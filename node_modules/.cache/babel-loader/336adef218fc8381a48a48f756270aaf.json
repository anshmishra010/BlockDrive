{"ast":null,"code":"'use strict';\n\nvar toPull = require('stream-to-pull-stream');\n\nvar map = require('pull-stream/throughs/map');\n\nvar pull = require('pull-stream/pull');\n\nvar transformChunk = require('./bw-util');\n\nvar deferred = require('pull-defer');\n\nmodule.exports = function (send) {\n  return function (opts) {\n    opts = opts || {};\n    var p = deferred.source();\n    send({\n      path: 'stats/bw',\n      qs: opts\n    }, function (err, stream) {\n      if (err) {\n        return p.end(err);\n      }\n\n      p.resolve(pull(toPull.source(stream), map(transformChunk)));\n    });\n    return p;\n  };\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/stats/bw-pull-stream.js"],"names":["toPull","require","map","pull","transformChunk","deferred","module","exports","send","opts","p","source","path","qs","err","stream","end","resolve"],"mappings":"AAAA;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAAtB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,0BAAD,CAAnB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAMG,cAAc,GAAGH,OAAO,CAAC,WAAD,CAA9B;;AACA,IAAMI,QAAQ,GAAGJ,OAAO,CAAC,YAAD,CAAxB;;AAEAK,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,SAAO,UAACC,IAAD,EAAU;AACfA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,QAAMC,CAAC,GAAGL,QAAQ,CAACM,MAAT,EAAV;AAEAH,IAAAA,IAAI,CAAC;AACHI,MAAAA,IAAI,EAAE,UADH;AAEHC,MAAAA,EAAE,EAAEJ;AAFD,KAAD,EAGD,UAACK,GAAD,EAAMC,MAAN,EAAiB;AAClB,UAAID,GAAJ,EAAS;AACP,eAAOJ,CAAC,CAACM,GAAF,CAAMF,GAAN,CAAP;AACD;;AAEDJ,MAAAA,CAAC,CAACO,OAAF,CAAUd,IAAI,CACZH,MAAM,CAACW,MAAP,CAAcI,MAAd,CADY,EAEZb,GAAG,CAACE,cAAD,CAFS,CAAd;AAID,KAZG,CAAJ;AAcA,WAAOM,CAAP;AACD,GApBD;AAqBD,CAtBD","sourcesContent":["'use strict'\n\nconst toPull = require('stream-to-pull-stream')\nconst map = require('pull-stream/throughs/map')\nconst pull = require('pull-stream/pull')\nconst transformChunk = require('./bw-util')\nconst deferred = require('pull-defer')\n\nmodule.exports = (send) => {\n  return (opts) => {\n    opts = opts || {}\n\n    const p = deferred.source()\n\n    send({\n      path: 'stats/bw',\n      qs: opts\n    }, (err, stream) => {\n      if (err) {\n        return p.end(err)\n      }\n\n      p.resolve(pull(\n        toPull.source(stream),\n        map(transformChunk)\n      ))\n    })\n\n    return p\n  }\n}\n"]},"metadata":{},"sourceType":"script"}