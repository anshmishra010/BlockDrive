{"ast":null,"code":"'use strict';\n/**\n * A CBOR tagged item, where the tag does not have semantics specified at the\n * moment, or those semantics threw an error during parsing. Typically this will\n * be an extension point you're not yet expecting.\n */\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar Tagged = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of Tagged.\n   *\n   * @param {Number} tag - the number of the tag\n   * @param {any} value - the value inside the tag\n   * @param {Error} err - the error that was thrown parsing the tag, or null\n   */\n  function Tagged(tag, value, err) {\n    _classCallCheck(this, Tagged);\n\n    this.tag = tag;\n    this.value = value;\n    this.err = err;\n\n    if (typeof this.tag !== 'number') {\n      throw new Error('Invalid tag type (' + typeof this.tag + ')');\n    }\n\n    if (this.tag < 0 || (this.tag | 0) !== this.tag) {\n      throw new Error('Tag must be a positive integer: ' + this.tag);\n    }\n  }\n  /**\n   * Convert to a String\n   *\n   * @returns {String} string of the form '1(2)'\n   */\n\n\n  _createClass(Tagged, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.tag, \"(\").concat(JSON.stringify(this.value), \")\");\n    }\n    /**\n     * Push the simple value onto the CBOR stream\n     *\n     * @param {cbor.Encoder} gen The generator to push onto\n     * @returns {number}\n     */\n\n  }, {\n    key: \"encodeCBOR\",\n    value: function encodeCBOR(gen) {\n      gen._pushTag(this.tag);\n\n      return gen.pushAny(this.value);\n    }\n    /**\n     * If we have a converter for this type, do the conversion.  Some converters\n     * are built-in.  Additional ones can be passed in.  If you want to remove\n     * a built-in converter, pass a converter in whose value is 'null' instead\n     * of a function.\n     *\n     * @param {Object} converters - keys in the object are a tag number, the value\n     *   is a function that takes the decoded CBOR and returns a JavaScript value\n     *   of the appropriate type.  Throw an exception in the function on errors.\n     * @returns {any} - the converted item\n     */\n\n  }, {\n    key: \"convert\",\n    value: function convert(converters) {\n      var er, f;\n      f = converters != null ? converters[this.tag] : undefined;\n\n      if (typeof f !== 'function') {\n        f = Tagged['_tag' + this.tag];\n\n        if (typeof f !== 'function') {\n          return this;\n        }\n      }\n\n      try {\n        return f.call(Tagged, this.value);\n      } catch (error) {\n        er = error;\n        this.err = er;\n        return this;\n      }\n    }\n  }]);\n\n  return Tagged;\n}();\n\nmodule.exports = Tagged;","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/borc/src/tagged.js"],"names":["Tagged","tag","value","err","Error","JSON","stringify","gen","_pushTag","pushAny","converters","er","f","undefined","call","error","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;;;;;;IACMA,M;AACJ;AACF;AACA;AACA;AACA;AACA;AACA;AACE,kBAAaC,GAAb,EAAkBC,KAAlB,EAAyBC,GAAzB,EAA8B;AAAA;;AAC5B,SAAKF,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,GAAL,GAAWA,GAAX;;AACA,QAAI,OAAO,KAAKF,GAAZ,KAAoB,QAAxB,EAAkC;AAChC,YAAM,IAAIG,KAAJ,CAAU,uBAAwB,OAAO,KAAKH,GAApC,GAA2C,GAArD,CAAN;AACD;;AACD,QAAK,KAAKA,GAAL,GAAW,CAAZ,IAAmB,CAAC,KAAKA,GAAL,GAAW,CAAZ,MAAmB,KAAKA,GAA/C,EAAqD;AACnD,YAAM,IAAIG,KAAJ,CAAU,qCAAqC,KAAKH,GAApD,CAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;;;+BACc;AACV,uBAAU,KAAKA,GAAf,cAAsBI,IAAI,CAACC,SAAL,CAAe,KAAKJ,KAApB,CAAtB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;+BACcK,G,EAAK;AACfA,MAAAA,GAAG,CAACC,QAAJ,CAAa,KAAKP,GAAlB;;AACA,aAAOM,GAAG,CAACE,OAAJ,CAAY,KAAKP,KAAjB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;4BACWQ,U,EAAY;AACnB,UAAIC,EAAJ,EAAQC,CAAR;AACAA,MAAAA,CAAC,GAAGF,UAAU,IAAI,IAAd,GAAqBA,UAAU,CAAC,KAAKT,GAAN,CAA/B,GAA4CY,SAAhD;;AACA,UAAI,OAAOD,CAAP,KAAa,UAAjB,EAA6B;AAC3BA,QAAAA,CAAC,GAAGZ,MAAM,CAAC,SAAS,KAAKC,GAAf,CAAV;;AACA,YAAI,OAAOW,CAAP,KAAa,UAAjB,EAA6B;AAC3B,iBAAO,IAAP;AACD;AACF;;AACD,UAAI;AACF,eAAOA,CAAC,CAACE,IAAF,CAAOd,MAAP,EAAe,KAAKE,KAApB,CAAP;AACD,OAFD,CAEE,OAAOa,KAAP,EAAc;AACdJ,QAAAA,EAAE,GAAGI,KAAL;AACA,aAAKZ,GAAL,GAAWQ,EAAX;AACA,eAAO,IAAP;AACD;AACF;;;;;;AAGHK,MAAM,CAACC,OAAP,GAAiBjB,MAAjB","sourcesContent":["'use strict'\n\n/**\n * A CBOR tagged item, where the tag does not have semantics specified at the\n * moment, or those semantics threw an error during parsing. Typically this will\n * be an extension point you're not yet expecting.\n */\nclass Tagged {\n  /**\n   * Creates an instance of Tagged.\n   *\n   * @param {Number} tag - the number of the tag\n   * @param {any} value - the value inside the tag\n   * @param {Error} err - the error that was thrown parsing the tag, or null\n   */\n  constructor (tag, value, err) {\n    this.tag = tag\n    this.value = value\n    this.err = err\n    if (typeof this.tag !== 'number') {\n      throw new Error('Invalid tag type (' + (typeof this.tag) + ')')\n    }\n    if ((this.tag < 0) || ((this.tag | 0) !== this.tag)) {\n      throw new Error('Tag must be a positive integer: ' + this.tag)\n    }\n  }\n\n  /**\n   * Convert to a String\n   *\n   * @returns {String} string of the form '1(2)'\n   */\n  toString () {\n    return `${this.tag}(${JSON.stringify(this.value)})`\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n  encodeCBOR (gen) {\n    gen._pushTag(this.tag)\n    return gen.pushAny(this.value)\n  }\n\n  /**\n   * If we have a converter for this type, do the conversion.  Some converters\n   * are built-in.  Additional ones can be passed in.  If you want to remove\n   * a built-in converter, pass a converter in whose value is 'null' instead\n   * of a function.\n   *\n   * @param {Object} converters - keys in the object are a tag number, the value\n   *   is a function that takes the decoded CBOR and returns a JavaScript value\n   *   of the appropriate type.  Throw an exception in the function on errors.\n   * @returns {any} - the converted item\n   */\n  convert (converters) {\n    var er, f\n    f = converters != null ? converters[this.tag] : undefined\n    if (typeof f !== 'function') {\n      f = Tagged['_tag' + this.tag]\n      if (typeof f !== 'function') {\n        return this\n      }\n    }\n    try {\n      return f.call(Tagged, this.value)\n    } catch (error) {\n      er = error\n      this.err = er\n      return this\n    }\n  }\n}\n\nmodule.exports = Tagged\n"]},"metadata":{},"sourceType":"script"}