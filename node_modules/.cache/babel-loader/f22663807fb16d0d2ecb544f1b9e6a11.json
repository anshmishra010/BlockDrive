{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar concatStream = require('concat-stream');\n\nvar once = require('once');\n\nvar FileResultStreamConverter = require('../utils/file-result-stream-converter');\n\nvar SendFilesStream = require('../utils/send-files-stream');\n\nmodule.exports = function (send) {\n  var sendFilesStream = SendFilesStream(send, 'files/write');\n  return promisify(function (pathDst, _files, opts, _callback) {\n    if (typeof opts === 'function' && !_callback) {\n      _callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof _callback === 'function') {\n      _callback = opts;\n      opts = {};\n    }\n\n    var files = [].concat(_files);\n    var callback = once(_callback);\n    var options = {\n      args: pathDst,\n      qs: opts,\n      converter: FileResultStreamConverter\n    };\n    var stream = sendFilesStream({\n      qs: options\n    });\n    var concat = concatStream(function (result) {\n      return callback(null, result);\n    });\n    stream.once('error', callback);\n    stream.pipe(concat);\n    files.forEach(function (file) {\n      return stream.write(file);\n    });\n    stream.end();\n  });\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/files-mfs/write.js"],"names":["promisify","require","concatStream","once","FileResultStreamConverter","SendFilesStream","module","exports","send","sendFilesStream","pathDst","_files","opts","_callback","files","concat","callback","options","args","qs","converter","stream","result","pipe","forEach","file","write","end"],"mappings":"AAAA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA5B;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMG,yBAAyB,GAAGH,OAAO,CAAC,uCAAD,CAAzC;;AACA,IAAMI,eAAe,GAAGJ,OAAO,CAAC,4BAAD,CAA/B;;AAEAK,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,MAAMC,eAAe,GAAGJ,eAAe,CAACG,IAAD,EAAO,aAAP,CAAvC;AAEA,SAAOR,SAAS,CAAC,UAACU,OAAD,EAAUC,MAAV,EAAkBC,IAAlB,EAAwBC,SAAxB,EAAsC;AACrD,QAAI,OAAOD,IAAP,KAAgB,UAAhB,IACF,CAACC,SADH,EACc;AACZA,MAAAA,SAAS,GAAGD,IAAZ;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD,KALoD,CAOrD;AACA;;;AACA,QAAI,OAAOA,IAAP,KAAgB,UAAhB,IACF,OAAOC,SAAP,KAAqB,UADvB,EACmC;AACjCA,MAAAA,SAAS,GAAGD,IAAZ;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,QAAME,KAAK,GAAG,GAAGC,MAAH,CAAUJ,MAAV,CAAd;AACA,QAAMK,QAAQ,GAAGb,IAAI,CAACU,SAAD,CAArB;AAEA,QAAMI,OAAO,GAAG;AACdC,MAAAA,IAAI,EAAER,OADQ;AAEdS,MAAAA,EAAE,EAAEP,IAFU;AAGdQ,MAAAA,SAAS,EAAEhB;AAHG,KAAhB;AAMA,QAAMiB,MAAM,GAAGZ,eAAe,CAAC;AAAEU,MAAAA,EAAE,EAAEF;AAAN,KAAD,CAA9B;AACA,QAAMF,MAAM,GAAGb,YAAY,CAAC,UAACoB,MAAD;AAAA,aAAYN,QAAQ,CAAC,IAAD,EAAOM,MAAP,CAApB;AAAA,KAAD,CAA3B;AACAD,IAAAA,MAAM,CAAClB,IAAP,CAAY,OAAZ,EAAqBa,QAArB;AACAK,IAAAA,MAAM,CAACE,IAAP,CAAYR,MAAZ;AAEAD,IAAAA,KAAK,CAACU,OAAN,CAAc,UAACC,IAAD;AAAA,aAAUJ,MAAM,CAACK,KAAP,CAAaD,IAAb,CAAV;AAAA,KAAd;AACAJ,IAAAA,MAAM,CAACM,GAAP;AACD,GA/Be,CAAhB;AAgCD,CAnCD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst concatStream = require('concat-stream')\nconst once = require('once')\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter')\nconst SendFilesStream = require('../utils/send-files-stream')\n\nmodule.exports = (send) => {\n  const sendFilesStream = SendFilesStream(send, 'files/write')\n\n  return promisify((pathDst, _files, opts, _callback) => {\n    if (typeof opts === 'function' &&\n      !_callback) {\n      _callback = opts\n      opts = {}\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' &&\n      typeof _callback === 'function') {\n      _callback = opts\n      opts = {}\n    }\n\n    const files = [].concat(_files)\n    const callback = once(_callback)\n\n    const options = {\n      args: pathDst,\n      qs: opts,\n      converter: FileResultStreamConverter\n    }\n\n    const stream = sendFilesStream({ qs: options })\n    const concat = concatStream((result) => callback(null, result))\n    stream.once('error', callback)\n    stream.pipe(concat)\n\n    files.forEach((file) => stream.write(file))\n    stream.end()\n  })\n}\n"]},"metadata":{},"sourceType":"script"}