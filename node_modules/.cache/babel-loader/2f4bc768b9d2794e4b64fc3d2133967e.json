{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar errcode = require('err-code');\n\nvar multihash = require('multihashes');\n\nvar crypto = require('./crypto');\n/**\n * Hash the given `buf` using the algorithm specified by `alg`.\n * @param {Buffer} buf - The value to hash.\n * @param {number|string} alg - The algorithm to use eg 'sha1'\n * @param {number} [length] - Optionally trim the result to this length.\n * @returns {Promise<Buffer>}\n */\n\n\nfunction Multihashing(_x, _x2, _x3) {\n  return _Multihashing.apply(this, arguments);\n}\n/**\n * The `buffer` module for easy use in the browser.\n *\n * @type {Buffer}\n */\n\n\nfunction _Multihashing() {\n  _Multihashing = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(buf, alg, length) {\n    var digest;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return Multihashing.digest(buf, alg, length);\n\n          case 2:\n            digest = _context3.sent;\n            return _context3.abrupt(\"return\", multihash.encode(digest, alg, length));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _Multihashing.apply(this, arguments);\n}\n\nMultihashing.Buffer = Buffer; // for browser things\n\n/**\n * Expose multihash itself, to avoid silly double requires.\n */\n\nMultihashing.multihash = multihash;\n/**\n * @param {Buffer} buf - The value to hash.\n * @param {number|string} alg - The algorithm to use eg 'sha1'\n * @param {number} [length] - Optionally trim the result to this length.\n * @returns {Promise<Buffer>}\n */\n\nMultihashing.digest = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(buf, alg, length) {\n    var hash, digest;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            hash = Multihashing.createHash(alg);\n            _context.next = 3;\n            return hash(buf);\n\n          case 3:\n            digest = _context.sent;\n            return _context.abrupt(\"return\", length ? digest.slice(0, length) : digest);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x4, _x5, _x6) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Creates a function that hashes with the given algorithm\n *\n * @param {string|number} alg - The algorithm to use eg 'sha1'\n *\n * @returns {function} - The hash function corresponding to `alg`\n */\n\n\nMultihashing.createHash = function (alg) {\n  if (!alg) {\n    throw errcode('hash algorithm must be specified', 'ERR_HASH_ALGORITHM_NOT_SPECIFIED');\n  }\n\n  alg = multihash.coerceCode(alg);\n\n  if (!Multihashing.functions[alg]) {\n    throw errcode(\"multihash function '\".concat(alg, \"' not yet supported\"), 'ERR_HASH_ALGORITHM_NOT_SUPPORTED');\n  }\n\n  return Multihashing.functions[alg];\n};\n/**\n * Mapping of multihash codes to their hashing functions.\n * @type {Object}\n */\n\n\nMultihashing.functions = {\n  // sha1\n  0x11: crypto.sha1,\n  // sha2-256\n  0x12: crypto.sha2256,\n  // sha2-512\n  0x13: crypto.sha2512,\n  // sha3-512\n  0x14: crypto.sha3512,\n  // sha3-384\n  0x15: crypto.sha3384,\n  // sha3-256\n  0x16: crypto.sha3256,\n  // sha3-224\n  0x17: crypto.sha3224,\n  // shake-128\n  0x18: crypto.shake128,\n  // shake-256\n  0x19: crypto.shake256,\n  // keccak-224\n  0x1A: crypto.keccak224,\n  // keccak-256\n  0x1B: crypto.keccak256,\n  // keccak-384\n  0x1C: crypto.keccak384,\n  // keccak-512\n  0x1D: crypto.keccak512,\n  // murmur3-128\n  0x22: crypto.murmur3128,\n  // murmur3-32\n  0x23: crypto.murmur332,\n  // dbl-sha2-256\n  0x56: crypto.dblSha2256\n}; // add blake functions\n\ncrypto.addBlake(Multihashing.functions);\n\nMultihashing.validate = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(buf, hash) {\n    var newHash;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return Multihashing(buf, multihash.decode(hash).name);\n\n          case 2:\n            newHash = _context2.sent;\n            return _context2.abrupt(\"return\", Buffer.compare(hash, newHash) === 0);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x7, _x8) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nmodule.exports = Multihashing;","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipld-dag-pb/node_modules/multihashing-async/src/index.js"],"names":["require","Buffer","errcode","multihash","crypto","Multihashing","buf","alg","length","digest","encode","hash","createHash","slice","coerceCode","functions","sha1","sha2256","sha2512","sha3512","sha3384","sha3256","sha3224","shake128","shake256","keccak224","keccak256","keccak384","keccak512","murmur3128","murmur332","dblSha2256","addBlake","validate","decode","name","newHash","compare","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst errcode = require('err-code')\nconst multihash = require('multihashes')\nconst crypto = require('./crypto')\n\n/**\n * Hash the given `buf` using the algorithm specified by `alg`.\n * @param {Buffer} buf - The value to hash.\n * @param {number|string} alg - The algorithm to use eg 'sha1'\n * @param {number} [length] - Optionally trim the result to this length.\n * @returns {Promise<Buffer>}\n */\nasync function Multihashing (buf, alg, length) {\n  const digest = await Multihashing.digest(buf, alg, length)\n  return multihash.encode(digest, alg, length)\n}\n\n/**\n * The `buffer` module for easy use in the browser.\n *\n * @type {Buffer}\n */\nMultihashing.Buffer = Buffer // for browser things\n\n/**\n * Expose multihash itself, to avoid silly double requires.\n */\nMultihashing.multihash = multihash\n\n/**\n * @param {Buffer} buf - The value to hash.\n * @param {number|string} alg - The algorithm to use eg 'sha1'\n * @param {number} [length] - Optionally trim the result to this length.\n * @returns {Promise<Buffer>}\n */\nMultihashing.digest = async (buf, alg, length) => {\n  const hash = Multihashing.createHash(alg)\n  const digest = await hash(buf)\n  return length ? digest.slice(0, length) : digest\n}\n\n/**\n * Creates a function that hashes with the given algorithm\n *\n * @param {string|number} alg - The algorithm to use eg 'sha1'\n *\n * @returns {function} - The hash function corresponding to `alg`\n */\nMultihashing.createHash = function (alg) {\n  if (!alg) {\n    throw errcode('hash algorithm must be specified', 'ERR_HASH_ALGORITHM_NOT_SPECIFIED')\n  }\n\n  alg = multihash.coerceCode(alg)\n  if (!Multihashing.functions[alg]) {\n    throw errcode(`multihash function '${alg}' not yet supported`, 'ERR_HASH_ALGORITHM_NOT_SUPPORTED')\n  }\n\n  return Multihashing.functions[alg]\n}\n\n/**\n * Mapping of multihash codes to their hashing functions.\n * @type {Object}\n */\nMultihashing.functions = {\n  // sha1\n  0x11: crypto.sha1,\n  // sha2-256\n  0x12: crypto.sha2256,\n  // sha2-512\n  0x13: crypto.sha2512,\n  // sha3-512\n  0x14: crypto.sha3512,\n  // sha3-384\n  0x15: crypto.sha3384,\n  // sha3-256\n  0x16: crypto.sha3256,\n  // sha3-224\n  0x17: crypto.sha3224,\n  // shake-128\n  0x18: crypto.shake128,\n  // shake-256\n  0x19: crypto.shake256,\n  // keccak-224\n  0x1A: crypto.keccak224,\n  // keccak-256\n  0x1B: crypto.keccak256,\n  // keccak-384\n  0x1C: crypto.keccak384,\n  // keccak-512\n  0x1D: crypto.keccak512,\n  // murmur3-128\n  0x22: crypto.murmur3128,\n  // murmur3-32\n  0x23: crypto.murmur332,\n  // dbl-sha2-256\n  0x56: crypto.dblSha2256\n}\n\n// add blake functions\ncrypto.addBlake(Multihashing.functions)\n\nMultihashing.validate = async (buf, hash) => {\n  const newHash = await Multihashing(buf, multihash.decode(hash).name)\n\n  return Buffer.compare(hash, newHash) === 0\n}\n\nmodule.exports = Multihashing\n"]},"metadata":{},"sourceType":"script"}