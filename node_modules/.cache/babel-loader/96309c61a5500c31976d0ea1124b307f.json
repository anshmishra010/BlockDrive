{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar EventEmitter = require('events');\n\nvar eos = require('end-of-stream');\n\nvar isNode = require('detect-node');\n\nvar setImmediate = require('async/setImmediate');\n\nvar PubsubMessageStream = require('./utils/pubsub-message-stream');\n\nvar stringlistToArray = require('./utils/stringlist-to-array');\n\nvar moduleConfig = require('./utils/module-config');\n\nvar NotSupportedError = function NotSupportedError() {\n  return new Error('pubsub is currently not supported when run in the browser');\n};\n/* Public API */\n\n\nmodule.exports = function (arg) {\n  var send = moduleConfig(arg);\n  /* Internal subscriptions state and functions */\n\n  var ps = new EventEmitter();\n  var subscriptions = {};\n  ps.id = Math.random();\n  return {\n    subscribe: function subscribe(topic, handler, options, callback) {\n      var defaultOptions = {\n        discover: false\n      };\n\n      if (typeof options === 'function') {\n        callback = options;\n        options = defaultOptions;\n      }\n\n      if (!options) {\n        options = defaultOptions;\n      } // Throw an error if ran in the browsers\n\n\n      if (!isNode) {\n        if (!callback) {\n          return Promise.reject(NotSupportedError());\n        }\n\n        return setImmediate(function () {\n          return callback(NotSupportedError());\n        });\n      } // promisify doesn't work as we always pass a\n      // function as last argument (`handler`)\n\n\n      if (!callback) {\n        return new Promise(function (resolve, reject) {\n          _subscribe(topic, handler, options, function (err) {\n            if (err) {\n              return reject(err);\n            }\n\n            resolve();\n          });\n        });\n      }\n\n      _subscribe(topic, handler, options, callback);\n    },\n    unsubscribe: function unsubscribe(topic, handler, callback) {\n      if (!isNode) {\n        if (!callback) {\n          return Promise.reject(NotSupportedError());\n        }\n\n        return setImmediate(function () {\n          return callback(NotSupportedError());\n        });\n      }\n\n      if (ps.listenerCount(topic) === 0 || !subscriptions[topic]) {\n        var err = new Error(\"Not subscribed to '\".concat(topic, \"'\"));\n\n        if (!callback) {\n          return Promise.reject(err);\n        }\n\n        return setImmediate(function () {\n          return callback(err);\n        });\n      }\n\n      if (!handler && !callback) {\n        ps.removeAllListeners(topic);\n      } else {\n        ps.removeListener(topic, handler);\n      } // Drop the request once we are actually done\n\n\n      if (ps.listenerCount(topic) === 0) {\n        if (!callback) {\n          return new Promise(function (resolve, reject) {\n            // When the response stream has ended, resolve the promise\n            eos(subscriptions[topic].res, function (err) {\n              // FIXME: Artificial timeout needed to ensure unsubscribed\n              setTimeout(function () {\n                if (err) return reject(err);\n                resolve();\n              });\n            });\n            subscriptions[topic].req.abort();\n            subscriptions[topic] = null;\n          });\n        } // When the response stream has ended, call the callback\n\n\n        eos(subscriptions[topic].res, function (err) {\n          // FIXME: Artificial timeout needed to ensure unsubscribed\n          setTimeout(function () {\n            return callback(err);\n          });\n        });\n        subscriptions[topic].req.abort();\n        subscriptions[topic] = null;\n        return;\n      }\n\n      if (!callback) {\n        return Promise.resolve();\n      }\n\n      setImmediate(function () {\n        return callback();\n      });\n    },\n    publish: promisify(function (topic, data, callback) {\n      if (!isNode) {\n        return callback(NotSupportedError());\n      }\n\n      if (!Buffer.isBuffer(data)) {\n        return callback(new Error('data must be a Buffer'));\n      }\n\n      var request = {\n        path: 'pubsub/pub',\n        args: [topic, data]\n      };\n      send(request, callback);\n    }),\n    ls: promisify(function (callback) {\n      if (!isNode) {\n        return callback(NotSupportedError());\n      }\n\n      var request = {\n        path: 'pubsub/ls'\n      };\n      send.andTransform(request, stringlistToArray, callback);\n    }),\n    peers: promisify(function (topic, callback) {\n      if (!isNode) {\n        return callback(NotSupportedError());\n      }\n\n      var request = {\n        path: 'pubsub/peers',\n        args: [topic]\n      };\n      send.andTransform(request, stringlistToArray, callback);\n    }),\n    setMaxListeners: function setMaxListeners(n) {\n      return ps.setMaxListeners(n);\n    }\n  };\n\n  function _subscribe(topic, handler, options, callback) {\n    ps.on(topic, handler);\n\n    if (subscriptions[topic]) {\n      // TODO: should a callback error be returned?\n      return callback();\n    } // Request params\n\n\n    var request = {\n      path: 'pubsub/sub',\n      args: [topic],\n      qs: {\n        discover: options.discover\n      }\n    }; // Start the request and transform the response\n    // stream to Pubsub messages stream\n\n    subscriptions[topic] = {};\n    subscriptions[topic].req = send.andTransform(request, PubsubMessageStream.from, function (err, stream) {\n      if (err) {\n        subscriptions[topic] = null;\n        ps.removeListener(topic, handler);\n        return callback(err);\n      }\n\n      subscriptions[topic].res = stream;\n      stream.on('data', function (msg) {\n        ps.emit(topic, msg);\n      });\n      stream.on('error', function (err) {\n        ps.emit('error', err);\n      });\n      eos(stream, function (err) {\n        if (err) {\n          ps.emit('error', err);\n        }\n\n        subscriptions[topic] = null;\n        ps.removeListener(topic, handler);\n      });\n      callback();\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/pubsub.js"],"names":["promisify","require","EventEmitter","eos","isNode","setImmediate","PubsubMessageStream","stringlistToArray","moduleConfig","NotSupportedError","Error","module","exports","arg","send","ps","subscriptions","id","Math","random","subscribe","topic","handler","options","callback","defaultOptions","discover","Promise","reject","resolve","err","unsubscribe","listenerCount","removeAllListeners","removeListener","res","setTimeout","req","abort","publish","data","Buffer","isBuffer","request","path","args","ls","andTransform","peers","setMaxListeners","n","on","qs","from","stream","msg","emit"],"mappings":"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","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst EventEmitter = require('events')\nconst eos = require('end-of-stream')\nconst isNode = require('detect-node')\nconst setImmediate = require('async/setImmediate')\nconst PubsubMessageStream = require('./utils/pubsub-message-stream')\nconst stringlistToArray = require('./utils/stringlist-to-array')\nconst moduleConfig = require('./utils/module-config')\n\nconst NotSupportedError = () => new Error('pubsub is currently not supported when run in the browser')\n\n/* Public API */\nmodule.exports = (arg) => {\n  const send = moduleConfig(arg)\n\n  /* Internal subscriptions state and functions */\n  const ps = new EventEmitter()\n  const subscriptions = {}\n  ps.id = Math.random()\n  return {\n    subscribe: (topic, handler, options, callback) => {\n      const defaultOptions = {\n        discover: false\n      }\n\n      if (typeof options === 'function') {\n        callback = options\n        options = defaultOptions\n      }\n\n      if (!options) {\n        options = defaultOptions\n      }\n\n      // Throw an error if ran in the browsers\n      if (!isNode) {\n        if (!callback) {\n          return Promise.reject(NotSupportedError())\n        }\n\n        return setImmediate(() => callback(NotSupportedError()))\n      }\n\n      // promisify doesn't work as we always pass a\n      // function as last argument (`handler`)\n      if (!callback) {\n        return new Promise((resolve, reject) => {\n          subscribe(topic, handler, options, (err) => {\n            if (err) {\n              return reject(err)\n            }\n            resolve()\n          })\n        })\n      }\n\n      subscribe(topic, handler, options, callback)\n    },\n    unsubscribe: (topic, handler, callback) => {\n      if (!isNode) {\n        if (!callback) {\n          return Promise.reject(NotSupportedError())\n        }\n\n        return setImmediate(() => callback(NotSupportedError()))\n      }\n\n      if (ps.listenerCount(topic) === 0 || !subscriptions[topic]) {\n        const err = new Error(`Not subscribed to '${topic}'`)\n\n        if (!callback) {\n          return Promise.reject(err)\n        }\n\n        return setImmediate(() => callback(err))\n      }\n\n      if (!handler && !callback) {\n        ps.removeAllListeners(topic)\n      } else {\n        ps.removeListener(topic, handler)\n      }\n\n      // Drop the request once we are actually done\n      if (ps.listenerCount(topic) === 0) {\n        if (!callback) {\n          return new Promise((resolve, reject) => {\n            // When the response stream has ended, resolve the promise\n            eos(subscriptions[topic].res, (err) => {\n              // FIXME: Artificial timeout needed to ensure unsubscribed\n              setTimeout(() => {\n                if (err) return reject(err)\n                resolve()\n              })\n            })\n            subscriptions[topic].req.abort()\n            subscriptions[topic] = null\n          })\n        }\n\n        // When the response stream has ended, call the callback\n        eos(subscriptions[topic].res, (err) => {\n          // FIXME: Artificial timeout needed to ensure unsubscribed\n          setTimeout(() => callback(err))\n        })\n        subscriptions[topic].req.abort()\n        subscriptions[topic] = null\n        return\n      }\n\n      if (!callback) {\n        return Promise.resolve()\n      }\n\n      setImmediate(() => callback())\n    },\n    publish: promisify((topic, data, callback) => {\n      if (!isNode) {\n        return callback(NotSupportedError())\n      }\n\n      if (!Buffer.isBuffer(data)) {\n        return callback(new Error('data must be a Buffer'))\n      }\n\n      const request = {\n        path: 'pubsub/pub',\n        args: [topic, data]\n      }\n\n      send(request, callback)\n    }),\n    ls: promisify((callback) => {\n      if (!isNode) {\n        return callback(NotSupportedError())\n      }\n\n      const request = {\n        path: 'pubsub/ls'\n      }\n\n      send.andTransform(request, stringlistToArray, callback)\n    }),\n    peers: promisify((topic, callback) => {\n      if (!isNode) {\n        return callback(NotSupportedError())\n      }\n\n      const request = {\n        path: 'pubsub/peers',\n        args: [topic]\n      }\n\n      send.andTransform(request, stringlistToArray, callback)\n    }),\n    setMaxListeners (n) {\n      return ps.setMaxListeners(n)\n    }\n  }\n\n  function subscribe (topic, handler, options, callback) {\n    ps.on(topic, handler)\n\n    if (subscriptions[topic]) {\n      // TODO: should a callback error be returned?\n      return callback()\n    }\n\n    // Request params\n    const request = {\n      path: 'pubsub/sub',\n      args: [topic],\n      qs: {\n        discover: options.discover\n      }\n    }\n\n    // Start the request and transform the response\n    // stream to Pubsub messages stream\n    subscriptions[topic] = {}\n    subscriptions[topic].req = send.andTransform(request, PubsubMessageStream.from, (err, stream) => {\n      if (err) {\n        subscriptions[topic] = null\n        ps.removeListener(topic, handler)\n        return callback(err)\n      }\n\n      subscriptions[topic].res = stream\n\n      stream.on('data', (msg) => {\n        ps.emit(topic, msg)\n      })\n\n      stream.on('error', (err) => {\n        ps.emit('error', err)\n      })\n\n      eos(stream, (err) => {\n        if (err) {\n          ps.emit('error', err)\n        }\n\n        subscriptions[topic] = null\n        ps.removeListener(topic, handler)\n      })\n\n      callback()\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}