{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar _require = require('ipld-dag-pb'),\n    DAGNode = _require.DAGNode,\n    DAGLink = _require.DAGLink;\n\nvar CID = require('cids');\n\nvar LRU = require('lru-cache');\n\nvar lruOptions = {\n  max: 128\n};\nvar cache = new LRU(lruOptions);\n\nmodule.exports = function (send) {\n  return promisify(function (cid, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    var cidB58Str;\n\n    try {\n      cid = new CID(cid);\n      cidB58Str = cid.toBaseEncodedString();\n    } catch (err) {\n      return callback(err);\n    }\n\n    var node = cache.get(cidB58Str);\n\n    if (node) {\n      return callback(null, node);\n    }\n\n    send({\n      path: 'object/get',\n      args: cidB58Str,\n      qs: {\n        'data-encoding': 'base64'\n      }\n    }, function (err, result) {\n      if (err) {\n        return callback(err);\n      }\n\n      var links = result.Links.map(function (l) {\n        return new DAGLink(l.Name, l.Size, l.Hash);\n      });\n      var node = DAGNode.create(Buffer.from(result.Data, 'base64'), links);\n      cache.set(cidB58Str, node);\n      callback(null, node);\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/object/get.js"],"names":["promisify","require","DAGNode","DAGLink","CID","LRU","lruOptions","max","cache","module","exports","send","cid","options","callback","cidB58Str","toBaseEncodedString","err","node","get","path","args","qs","result","links","Links","map","l","Name","Size","Hash","create","Buffer","from","Data","set"],"mappings":"AAAA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;eAC6BA,OAAO,CAAC,aAAD,C;IAA5BC,O,YAAAA,O;IAASC,O,YAAAA,O;;AACjB,IAAMC,GAAG,GAAGH,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMI,GAAG,GAAGJ,OAAO,CAAC,WAAD,CAAnB;;AACA,IAAMK,UAAU,GAAG;AACjBC,EAAAA,GAAG,EAAE;AADY,CAAnB;AAIA,IAAMC,KAAK,GAAG,IAAIH,GAAJ,CAAQC,UAAR,CAAd;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,SAAOX,SAAS,CAAC,UAACY,GAAD,EAAMC,OAAN,EAAeC,QAAf,EAA4B;AAC3C,QAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,MAAAA,QAAQ,GAAGD,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AAED,QAAI,CAACA,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAG,EAAV;AACD;;AAED,QAAIE,SAAJ;;AAEA,QAAI;AACFH,MAAAA,GAAG,GAAG,IAAIR,GAAJ,CAAQQ,GAAR,CAAN;AACAG,MAAAA,SAAS,GAAGH,GAAG,CAACI,mBAAJ,EAAZ;AACD,KAHD,CAGE,OAAOC,GAAP,EAAY;AACZ,aAAOH,QAAQ,CAACG,GAAD,CAAf;AACD;;AAED,QAAMC,IAAI,GAAGV,KAAK,CAACW,GAAN,CAAUJ,SAAV,CAAb;;AAEA,QAAIG,IAAJ,EAAU;AACR,aAAOJ,QAAQ,CAAC,IAAD,EAAOI,IAAP,CAAf;AACD;;AAEDP,IAAAA,IAAI,CAAC;AACHS,MAAAA,IAAI,EAAE,YADH;AAEHC,MAAAA,IAAI,EAAEN,SAFH;AAGHO,MAAAA,EAAE,EAAE;AACF,yBAAiB;AADf;AAHD,KAAD,EAMD,UAACL,GAAD,EAAMM,MAAN,EAAiB;AAClB,UAAIN,GAAJ,EAAS;AACP,eAAOH,QAAQ,CAACG,GAAD,CAAf;AACD;;AAED,UAAMO,KAAK,GAAGD,MAAM,CAACE,KAAP,CAAaC,GAAb,CAAiB,UAAAC,CAAC;AAAA,eAAI,IAAIxB,OAAJ,CAAYwB,CAAC,CAACC,IAAd,EAAoBD,CAAC,CAACE,IAAtB,EAA4BF,CAAC,CAACG,IAA9B,CAAJ;AAAA,OAAlB,CAAd;AACA,UAAMZ,IAAI,GAAGhB,OAAO,CAAC6B,MAAR,CAAeC,MAAM,CAACC,IAAP,CAAYV,MAAM,CAACW,IAAnB,EAAyB,QAAzB,CAAf,EAAmDV,KAAnD,CAAb;AAEAhB,MAAAA,KAAK,CAAC2B,GAAN,CAAUpB,SAAV,EAAqBG,IAArB;AACAJ,MAAAA,QAAQ,CAAC,IAAD,EAAOI,IAAP,CAAR;AACD,KAhBG,CAAJ;AAiBD,GA1Ce,CAAhB;AA2CD,CA5CD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst { DAGNode, DAGLink } = require('ipld-dag-pb')\nconst CID = require('cids')\nconst LRU = require('lru-cache')\nconst lruOptions = {\n  max: 128\n}\n\nconst cache = new LRU(lruOptions)\n\nmodule.exports = (send) => {\n  return promisify((cid, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    if (!options) {\n      options = {}\n    }\n\n    let cidB58Str\n\n    try {\n      cid = new CID(cid)\n      cidB58Str = cid.toBaseEncodedString()\n    } catch (err) {\n      return callback(err)\n    }\n\n    const node = cache.get(cidB58Str)\n\n    if (node) {\n      return callback(null, node)\n    }\n\n    send({\n      path: 'object/get',\n      args: cidB58Str,\n      qs: {\n        'data-encoding': 'base64'\n      }\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      const links = result.Links.map(l => new DAGLink(l.Name, l.Size, l.Hash))\n      const node = DAGNode.create(Buffer.from(result.Data, 'base64'), links)\n\n      cache.set(cidB58Str, node)\n      callback(null, node)\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}