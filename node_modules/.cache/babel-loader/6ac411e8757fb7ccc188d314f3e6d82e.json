{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar cleanCID = require('../utils/clean-cid');\n\nvar v = require('is-ipfs');\n\nvar bl = require('bl');\n\nmodule.exports = function (send) {\n  return promisify(function (hash, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    try {\n      hash = cleanCID(hash);\n    } catch (err) {\n      if (!v.ipfsPath(hash)) {\n        return callback(err);\n      }\n    }\n\n    var query = {\n      offset: opts.offset,\n      length: opts.length\n    };\n    send({\n      path: 'cat',\n      args: hash,\n      buffer: opts.buffer,\n      qs: query\n    }, function (err, stream) {\n      if (err) {\n        return callback(err);\n      }\n\n      stream.pipe(bl(function (err, data) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, data);\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/files-regular/cat.js"],"names":["promisify","require","cleanCID","v","bl","module","exports","send","hash","opts","callback","err","ipfsPath","query","offset","length","path","args","buffer","qs","stream","pipe","data"],"mappings":"AAAA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,oBAAD,CAAxB;;AACA,IAAME,CAAC,GAAGF,OAAO,CAAC,SAAD,CAAjB;;AACA,IAAMG,EAAE,GAAGH,OAAO,CAAC,IAAD,CAAlB;;AAEAI,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,SAAOP,SAAS,CAAC,UAACQ,IAAD,EAAOC,IAAP,EAAaC,QAAb,EAA0B;AACzC,QAAI,OAAOD,IAAP,KAAgB,UAApB,EAAgC;AAC9BC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,QAAI;AACFD,MAAAA,IAAI,GAAGN,QAAQ,CAACM,IAAD,CAAf;AACD,KAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,UAAI,CAACR,CAAC,CAACS,QAAF,CAAWJ,IAAX,CAAL,EAAuB;AACrB,eAAOE,QAAQ,CAACC,GAAD,CAAf;AACD;AACF;;AAED,QAAME,KAAK,GAAG;AACZC,MAAAA,MAAM,EAAEL,IAAI,CAACK,MADD;AAEZC,MAAAA,MAAM,EAAEN,IAAI,CAACM;AAFD,KAAd;AAKAR,IAAAA,IAAI,CAAC;AAAES,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,IAAI,EAAET,IAArB;AAA2BU,MAAAA,MAAM,EAAET,IAAI,CAACS,MAAxC;AAAgDC,MAAAA,EAAE,EAAEN;AAApD,KAAD,EAA8D,UAACF,GAAD,EAAMS,MAAN,EAAiB;AACjF,UAAIT,GAAJ,EAAS;AAAE,eAAOD,QAAQ,CAACC,GAAD,CAAf;AAAsB;;AAEjCS,MAAAA,MAAM,CAACC,IAAP,CAAYjB,EAAE,CAAC,UAACO,GAAD,EAAMW,IAAN,EAAe;AAC5B,YAAIX,GAAJ,EAAS;AAAE,iBAAOD,QAAQ,CAACC,GAAD,CAAf;AAAsB;;AAEjCD,QAAAA,QAAQ,CAAC,IAAD,EAAOY,IAAP,CAAR;AACD,OAJa,CAAd;AAKD,KARG,CAAJ;AASD,GA5Be,CAAhB;AA6BD,CA9BD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst cleanCID = require('../utils/clean-cid')\nconst v = require('is-ipfs')\nconst bl = require('bl')\n\nmodule.exports = (send) => {\n  return promisify((hash, opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    try {\n      hash = cleanCID(hash)\n    } catch (err) {\n      if (!v.ipfsPath(hash)) {\n        return callback(err)\n      }\n    }\n\n    const query = {\n      offset: opts.offset,\n      length: opts.length\n    }\n\n    send({ path: 'cat', args: hash, buffer: opts.buffer, qs: query }, (err, stream) => {\n      if (err) { return callback(err) }\n\n      stream.pipe(bl((err, data) => {\n        if (err) { return callback(err) }\n\n        callback(null, data)\n      }))\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}