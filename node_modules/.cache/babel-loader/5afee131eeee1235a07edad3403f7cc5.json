{"ast":null,"code":"'use strict';\n\nmodule.exports = function pull(a) {\n  var length = arguments.length;\n\n  if (typeof a === 'function' && a.length === 1) {\n    var args = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      args[i] = arguments[i];\n    }\n\n    return function (read) {\n      if (args == null) {\n        throw new TypeError(\"partial sink should only be called once!\");\n      } // Grab the reference after the check, because it's always an array now\n      // (engines like that kind of consistency).\n\n\n      var ref = args;\n      args = null; // Prioritize common case of small number of pulls.\n\n      switch (length) {\n        case 1:\n          return pull(read, ref[0]);\n\n        case 2:\n          return pull(read, ref[0], ref[1]);\n\n        case 3:\n          return pull(read, ref[0], ref[1], ref[2]);\n\n        case 4:\n          return pull(read, ref[0], ref[1], ref[2], ref[3]);\n\n        default:\n          ref.unshift(read);\n          return pull.apply(null, ref);\n      }\n    };\n  }\n\n  var read = a;\n\n  if (read && typeof read.source === 'function') {\n    read = read.source;\n  }\n\n  for (var i = 1; i < length; i++) {\n    var s = arguments[i];\n\n    if (typeof s === 'function') {\n      read = s(read);\n    } else if (s && typeof s === 'object') {\n      s.sink(read);\n      read = s.source;\n    }\n  }\n\n  return read;\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/pull-stream/pull.js"],"names":["module","exports","pull","a","length","arguments","args","Array","i","read","TypeError","ref","unshift","apply","source","s","sink"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAeC,CAAf,EAAkB;AACjC,MAAIC,MAAM,GAAGC,SAAS,CAACD,MAAvB;;AACA,MAAI,OAAOD,CAAP,KAAa,UAAb,IAA2BA,CAAC,CAACC,MAAF,KAAa,CAA5C,EAA+C;AAC7C,QAAIE,IAAI,GAAG,IAAIC,KAAJ,CAAUH,MAAV,CAAX;;AACA,SAAI,IAAII,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,MAAnB,EAA2BI,CAAC,EAA5B;AACEF,MAAAA,IAAI,CAACE,CAAD,CAAJ,GAAUH,SAAS,CAACG,CAAD,CAAnB;AADF;;AAEA,WAAO,UAAUC,IAAV,EAAgB;AACrB,UAAIH,IAAI,IAAI,IAAZ,EAAkB;AAChB,cAAM,IAAII,SAAJ,CAAc,0CAAd,CAAN;AACD,OAHoB,CAKrB;AACA;;;AACA,UAAIC,GAAG,GAAGL,IAAV;AACAA,MAAAA,IAAI,GAAG,IAAP,CARqB,CAUrB;;AACA,cAAQF,MAAR;AACA,aAAK,CAAL;AAAQ,iBAAOF,IAAI,CAACO,IAAD,EAAOE,GAAG,CAAC,CAAD,CAAV,CAAX;;AACR,aAAK,CAAL;AAAQ,iBAAOT,IAAI,CAACO,IAAD,EAAOE,GAAG,CAAC,CAAD,CAAV,EAAeA,GAAG,CAAC,CAAD,CAAlB,CAAX;;AACR,aAAK,CAAL;AAAQ,iBAAOT,IAAI,CAACO,IAAD,EAAOE,GAAG,CAAC,CAAD,CAAV,EAAeA,GAAG,CAAC,CAAD,CAAlB,EAAuBA,GAAG,CAAC,CAAD,CAA1B,CAAX;;AACR,aAAK,CAAL;AAAQ,iBAAOT,IAAI,CAACO,IAAD,EAAOE,GAAG,CAAC,CAAD,CAAV,EAAeA,GAAG,CAAC,CAAD,CAAlB,EAAuBA,GAAG,CAAC,CAAD,CAA1B,EAA+BA,GAAG,CAAC,CAAD,CAAlC,CAAX;;AACR;AACEA,UAAAA,GAAG,CAACC,OAAJ,CAAYH,IAAZ;AACA,iBAAOP,IAAI,CAACW,KAAL,CAAW,IAAX,EAAiBF,GAAjB,CAAP;AAPF;AASD,KApBD;AAqBD;;AAED,MAAIF,IAAI,GAAGN,CAAX;;AAEA,MAAIM,IAAI,IAAI,OAAOA,IAAI,CAACK,MAAZ,KAAuB,UAAnC,EAA+C;AAC7CL,IAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AAED,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAApB,EAA4BI,CAAC,EAA7B,EAAiC;AAC/B,QAAIO,CAAC,GAAGV,SAAS,CAACG,CAAD,CAAjB;;AACA,QAAI,OAAOO,CAAP,KAAa,UAAjB,EAA6B;AAC3BN,MAAAA,IAAI,GAAGM,CAAC,CAACN,IAAD,CAAR;AACD,KAFD,MAEO,IAAIM,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAtB,EAAgC;AACrCA,MAAAA,CAAC,CAACC,IAAF,CAAOP,IAAP;AACAA,MAAAA,IAAI,GAAGM,CAAC,CAACD,MAAT;AACD;AACF;;AAED,SAAOL,IAAP;AACD,CA9CD","sourcesContent":["'use strict'\n\nmodule.exports = function pull (a) {\n  var length = arguments.length\n  if (typeof a === 'function' && a.length === 1) {\n    var args = new Array(length)\n    for(var i = 0; i < length; i++)\n      args[i] = arguments[i]\n    return function (read) {\n      if (args == null) {\n        throw new TypeError(\"partial sink should only be called once!\")\n      }\n\n      // Grab the reference after the check, because it's always an array now\n      // (engines like that kind of consistency).\n      var ref = args\n      args = null\n\n      // Prioritize common case of small number of pulls.\n      switch (length) {\n      case 1: return pull(read, ref[0])\n      case 2: return pull(read, ref[0], ref[1])\n      case 3: return pull(read, ref[0], ref[1], ref[2])\n      case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])\n      default:\n        ref.unshift(read)\n        return pull.apply(null, ref)\n      }\n    }\n  }\n\n  var read = a\n\n  if (read && typeof read.source === 'function') {\n    read = read.source\n  }\n\n  for (var i = 1; i < length; i++) {\n    var s = arguments[i]\n    if (typeof s === 'function') {\n      read = s(read)\n    } else if (s && typeof s === 'object') {\n      s.sink(read)\n      read = s.source\n    }\n  }\n\n  return read\n}\n"]},"metadata":{},"sourceType":"script"}