{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar _require = require('readable-stream'),\n    Readable = _require.Readable;\n\nvar _require2 = require('../supports'),\n    supportsFileReader = _require2.supportsFileReader;\n\nvar streamFromFileReader = function streamFromFileReader(file, options) {\n  if (!supportsFileReader) {\n    throw new Error('FileReader DOM API is not supported.');\n  }\n\n  var FileStream = /*#__PURE__*/function (_Readable) {\n    _inherits(FileStream, _Readable);\n\n    var _super = _createSuper(FileStream);\n\n    function FileStream(file) {\n      var _this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, FileStream);\n\n      _this = _super.call(this, options);\n      _this.file = file;\n      _this.offset = options.offset || 0;\n      _this.chunkSize = options.chunkSize || 1024 * 1024;\n      _this.fileReader = new self.FileReader(file);\n\n      _this.fileReader.onloadend = function (event) {\n        var data = event.target.result;\n\n        if (data.byteLength === 0) {\n          _this.push(null);\n        }\n\n        _this.push(new Uint8Array(data));\n      };\n\n      _this.fileReader.onerror = function (err) {\n        return _this.destroy(err);\n      };\n\n      return _this;\n    }\n\n    _createClass(FileStream, [{\n      key: \"_read\",\n      value: function _read(size) {\n        var end = this.offset + this.chunkSize;\n        var slice = file.slice(this.offset, end);\n        this.fileReader.readAsArrayBuffer(slice);\n        this.offset = end;\n      }\n    }]);\n\n    return FileStream;\n  }(Readable);\n\n  return new FileStream(file, options);\n};\n\nmodule.exports = streamFromFileReader;","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-utils/src/streams/stream-from-filereader.js"],"names":["require","Readable","supportsFileReader","streamFromFileReader","file","options","Error","FileStream","offset","chunkSize","fileReader","self","FileReader","onloadend","event","data","target","result","byteLength","push","Uint8Array","onerror","err","destroy","size","end","slice","readAsArrayBuffer","module","exports"],"mappings":"AAAA;;;;;;;;;;eACqBA,OAAO,CAAC,iBAAD,C;IAApBC,Q,YAAAA,Q;;gBACuBD,OAAO,CAAC,aAAD,C;IAA9BE,kB,aAAAA,kB;;AAER,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD,EAAOC,OAAP,EAAmB;AAC9C,MAAI,CAACH,kBAAL,EAAyB;AACvB,UAAM,IAAII,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAH6C,MAIxCC,UAJwC;AAAA;;AAAA;;AAK5C,wBAAaH,IAAb,EAAiC;AAAA;;AAAA,UAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAC/B,gCAAMA,OAAN;AACA,YAAKD,IAAL,GAAYA,IAAZ;AACA,YAAKI,MAAL,GAAcH,OAAO,CAACG,MAAR,IAAkB,CAAhC;AACA,YAAKC,SAAL,GAAiBJ,OAAO,CAACI,SAAR,IAAqB,OAAO,IAA7C;AACA,YAAKC,UAAL,GAAkB,IAAIC,IAAI,CAACC,UAAT,CAAoBR,IAApB,CAAlB;;AACA,YAAKM,UAAL,CAAgBG,SAAhB,GAA4B,UAACC,KAAD,EAAW;AACrC,YAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaC,MAA1B;;AACA,YAAIF,IAAI,CAACG,UAAL,KAAoB,CAAxB,EAA2B;AACzB,gBAAKC,IAAL,CAAU,IAAV;AACD;;AACD,cAAKA,IAAL,CAAU,IAAIC,UAAJ,CAAeL,IAAf,CAAV;AACD,OAND;;AAOA,YAAKL,UAAL,CAAgBW,OAAhB,GAA0B,UAACC,GAAD;AAAA,eAAS,MAAKC,OAAL,CAAaD,GAAb,CAAT;AAAA,OAA1B;;AAb+B;AAchC;;AAnB2C;AAAA;AAAA,4BAqBrCE,IArBqC,EAqB/B;AACX,YAAMC,GAAG,GAAG,KAAKjB,MAAL,GAAc,KAAKC,SAA/B;AACA,YAAMiB,KAAK,GAAGtB,IAAI,CAACsB,KAAL,CAAW,KAAKlB,MAAhB,EAAwBiB,GAAxB,CAAd;AACA,aAAKf,UAAL,CAAgBiB,iBAAhB,CAAkCD,KAAlC;AACA,aAAKlB,MAAL,GAAciB,GAAd;AACD;AA1B2C;;AAAA;AAAA,IAIrBxB,QAJqB;;AA6B9C,SAAO,IAAIM,UAAJ,CAAeH,IAAf,EAAqBC,OAArB,CAAP;AACD,CA9BD;;AAgCAuB,MAAM,CAACC,OAAP,GAAiB1B,oBAAjB","sourcesContent":["'use strict'\nconst { Readable } = require('readable-stream')\nconst { supportsFileReader } = require('../supports')\n\nconst streamFromFileReader = (file, options) => {\n  if (!supportsFileReader) {\n    throw new Error('FileReader DOM API is not supported.')\n  }\n  class FileStream extends Readable {\n    constructor (file, options = {}) {\n      super(options)\n      this.file = file\n      this.offset = options.offset || 0\n      this.chunkSize = options.chunkSize || 1024 * 1024\n      this.fileReader = new self.FileReader(file)\n      this.fileReader.onloadend = (event) => {\n        const data = event.target.result\n        if (data.byteLength === 0) {\n          this.push(null)\n        }\n        this.push(new Uint8Array(data))\n      }\n      this.fileReader.onerror = (err) => this.destroy(err)\n    }\n\n    _read (size) {\n      const end = this.offset + this.chunkSize\n      const slice = file.slice(this.offset, end)\n      this.fileReader.readAsArrayBuffer(slice)\n      this.offset = end\n    }\n  }\n\n  return new FileStream(file, options)\n}\n\nmodule.exports = streamFromFileReader\n"]},"metadata":{},"sourceType":"script"}