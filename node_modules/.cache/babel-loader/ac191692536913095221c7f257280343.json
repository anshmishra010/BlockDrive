{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nmodule.exports = function (send) {\n  return promisify(function (key, opts, callback) {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    function handleResult(done, err, res) {\n      if (err) {\n        return done(err);\n      }\n\n      if (!res) {\n        return done(new Error('empty response'));\n      }\n\n      if (res.length === 0) {\n        return done(new Error('no value returned for key'));\n      } // Inconsistent return values in the browser vs node\n\n\n      if (Array.isArray(res)) {\n        res = res[0];\n      }\n\n      if (res.Type === 5) {\n        done(null, res.Extra);\n      } else {\n        var error = new Error('key was not found (type 6)');\n        done(error);\n      }\n    }\n\n    send({\n      path: 'dht/get',\n      args: key,\n      qs: opts\n    }, handleResult.bind(null, callback));\n  });\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/dht/get.js"],"names":["promisify","require","module","exports","send","key","opts","callback","handleResult","done","err","res","Error","length","Array","isArray","Type","Extra","error","path","args","qs","bind"],"mappings":"AAAA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,SAAOJ,SAAS,CAAC,UAACK,GAAD,EAAMC,IAAN,EAAYC,QAAZ,EAAyB;AACxC,QAAI,OAAOD,IAAP,KAAgB,UAAhB,IAA8B,CAACC,QAAnC,EAA6C;AAC3CA,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD,KAJuC,CAMxC;AACA;;;AACA,QAAI,OAAOA,IAAP,KAAgB,UAAhB,IAA8B,OAAOC,QAAP,KAAoB,UAAtD,EAAkE;AAChEA,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,aAASE,YAAT,CAAuBC,IAAvB,EAA6BC,GAA7B,EAAkCC,GAAlC,EAAuC;AACrC,UAAID,GAAJ,EAAS;AACP,eAAOD,IAAI,CAACC,GAAD,CAAX;AACD;;AACD,UAAI,CAACC,GAAL,EAAU;AACR,eAAOF,IAAI,CAAC,IAAIG,KAAJ,CAAU,gBAAV,CAAD,CAAX;AACD;;AACD,UAAID,GAAG,CAACE,MAAJ,KAAe,CAAnB,EAAsB;AACpB,eAAOJ,IAAI,CAAC,IAAIG,KAAJ,CAAU,2BAAV,CAAD,CAAX;AACD,OAToC,CAWrC;;;AACA,UAAIE,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAAJ,EAAwB;AACtBA,QAAAA,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAT;AACD;;AAED,UAAIA,GAAG,CAACK,IAAJ,KAAa,CAAjB,EAAoB;AAClBP,QAAAA,IAAI,CAAC,IAAD,EAAOE,GAAG,CAACM,KAAX,CAAJ;AACD,OAFD,MAEO;AACL,YAAIC,KAAK,GAAG,IAAIN,KAAJ,CAAU,4BAAV,CAAZ;AACAH,QAAAA,IAAI,CAACS,KAAD,CAAJ;AACD;AACF;;AAEDd,IAAAA,IAAI,CAAC;AACHe,MAAAA,IAAI,EAAE,SADH;AAEHC,MAAAA,IAAI,EAAEf,GAFH;AAGHgB,MAAAA,EAAE,EAAEf;AAHD,KAAD,EAIDE,YAAY,CAACc,IAAb,CAAkB,IAAlB,EAAwBf,QAAxB,CAJC,CAAJ;AAKD,GA1Ce,CAAhB;AA2CD,CA5CD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\n\nmodule.exports = (send) => {\n  return promisify((key, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts\n      opts = {}\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    function handleResult (done, err, res) {\n      if (err) {\n        return done(err)\n      }\n      if (!res) {\n        return done(new Error('empty response'))\n      }\n      if (res.length === 0) {\n        return done(new Error('no value returned for key'))\n      }\n\n      // Inconsistent return values in the browser vs node\n      if (Array.isArray(res)) {\n        res = res[0]\n      }\n\n      if (res.Type === 5) {\n        done(null, res.Extra)\n      } else {\n        let error = new Error('key was not found (type 6)')\n        done(error)\n      }\n    }\n\n    send({\n      path: 'dht/get',\n      args: key,\n      qs: opts\n    }, handleResult.bind(null, callback))\n  })\n}\n"]},"metadata":{},"sourceType":"script"}