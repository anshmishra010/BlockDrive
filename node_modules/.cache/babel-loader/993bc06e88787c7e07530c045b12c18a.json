{"ast":null,"code":"'use strict';\n/**\n * Make certain getters enumnerable\n *\n * This can be used to add additional getters that are enumerable and hence\n * show up on an `Object.keys()` call.\n *\n * @param {Object} object - The object it should be applied to\n * @param {Array.<String>} fields - The fields that should be made enumnerable\n */\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar addEnumerableGetters = function addEnumerableGetters(object, fields) {\n  var _iterator = _createForOfIteratorHelper(fields),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var field = _step.value;\n      var prop = void 0;\n      var proto = object; // Walk up the proottype chain until a property with the given name is\n      // found\n\n      while (prop === undefined) {\n        proto = Object.getPrototypeOf(proto);\n\n        if (proto === null) {\n          throw new Error(\"no getter named '\".concat(field, \"' found\"));\n        }\n\n        prop = Object.getOwnPropertyDescriptor(proto, field);\n      } // There is a property with the correct name, but it's not a getter\n\n\n      if (prop.get === undefined) {\n        throw new Error(\"no getter named '\".concat(field, \"' found\"));\n      }\n\n      Object.defineProperty(object, field, {\n        enumerable: true,\n        get: prop.get\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n/**\n * Makes all properties with a leading underscore non-enumerable.\n *\n * @param {Object} object - The object it should be applied to\n */\n\n\nvar hidePrivateFields = function hidePrivateFields(object) {\n  for (var key in object) {\n    if (key[0] === '_') {\n      Object.defineProperty(object, key, {\n        enumerable: false\n      });\n    }\n  }\n};\n\nmodule.exports = {\n  addEnumerableGetters: addEnumerableGetters,\n  hidePrivateFields: hidePrivateFields\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipld-dag-pb/src/visibility.js"],"names":["addEnumerableGetters","object","fields","field","prop","proto","undefined","Object","getPrototypeOf","Error","getOwnPropertyDescriptor","get","defineProperty","enumerable","hidePrivateFields","key","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,MAAD,EAASC,MAAT,EAAoB;AAAA,6CAC3BA,MAD2B;AAAA;;AAAA;AAC/C,wDAA4B;AAAA,UAAjBC,KAAiB;AAC1B,UAAIC,IAAI,SAAR;AACA,UAAIC,KAAK,GAAGJ,MAAZ,CAF0B,CAG1B;AACA;;AACA,aAAOG,IAAI,KAAKE,SAAhB,EAA2B;AACzBD,QAAAA,KAAK,GAAGE,MAAM,CAACC,cAAP,CAAsBH,KAAtB,CAAR;;AACA,YAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,gBAAM,IAAII,KAAJ,4BAA8BN,KAA9B,aAAN;AACD;;AACDC,QAAAA,IAAI,GAAGG,MAAM,CAACG,wBAAP,CAAgCL,KAAhC,EAAuCF,KAAvC,CAAP;AACD,OAXyB,CAa1B;;;AACA,UAAIC,IAAI,CAACO,GAAL,KAAaL,SAAjB,EAA4B;AAC1B,cAAM,IAAIG,KAAJ,4BAA8BN,KAA9B,aAAN;AACD;;AACDI,MAAAA,MAAM,CAACK,cAAP,CAAsBX,MAAtB,EAA8BE,KAA9B,EAAqC;AACnCU,QAAAA,UAAU,EAAE,IADuB;AAEnCF,QAAAA,GAAG,EAAEP,IAAI,CAACO;AAFyB,OAArC;AAID;AAtB8C;AAAA;AAAA;AAAA;AAAA;AAuBhD,CAvBD;AAyBA;AACA;AACA;AACA;AACA;;;AACA,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAACb,MAAD,EAAY;AACpC,OAAK,IAAMc,GAAX,IAAkBd,MAAlB,EAA0B;AACxB,QAAIc,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClBR,MAAAA,MAAM,CAACK,cAAP,CAAsBX,MAAtB,EAA8Bc,GAA9B,EAAmC;AAAEF,QAAAA,UAAU,EAAE;AAAd,OAAnC;AACD;AACF;AACF,CAND;;AAQAG,MAAM,CAACC,OAAP,GAAiB;AACfjB,EAAAA,oBAAoB,EAApBA,oBADe;AAEfc,EAAAA,iBAAiB,EAAjBA;AAFe,CAAjB","sourcesContent":["'use strict'\n\n/**\n * Make certain getters enumnerable\n *\n * This can be used to add additional getters that are enumerable and hence\n * show up on an `Object.keys()` call.\n *\n * @param {Object} object - The object it should be applied to\n * @param {Array.<String>} fields - The fields that should be made enumnerable\n */\nconst addEnumerableGetters = (object, fields) => {\n  for (const field of fields) {\n    let prop\n    let proto = object\n    // Walk up the proottype chain until a property with the given name is\n    // found\n    while (prop === undefined) {\n      proto = Object.getPrototypeOf(proto)\n      if (proto === null) {\n        throw new Error(`no getter named '${field}' found`)\n      }\n      prop = Object.getOwnPropertyDescriptor(proto, field)\n    }\n\n    // There is a property with the correct name, but it's not a getter\n    if (prop.get === undefined) {\n      throw new Error(`no getter named '${field}' found`)\n    }\n    Object.defineProperty(object, field, {\n      enumerable: true,\n      get: prop.get\n    })\n  }\n}\n\n/**\n * Makes all properties with a leading underscore non-enumerable.\n *\n * @param {Object} object - The object it should be applied to\n */\nconst hidePrivateFields = (object) => {\n  for (const key in object) {\n    if (key[0] === '_') {\n      Object.defineProperty(object, key, { enumerable: false })\n    }\n  }\n}\n\nmodule.exports = {\n  addEnumerableGetters,\n  hidePrivateFields\n}\n"]},"metadata":{},"sourceType":"script"}