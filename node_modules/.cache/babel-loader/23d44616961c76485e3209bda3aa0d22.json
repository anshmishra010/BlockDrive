{"ast":null,"code":"'use strict';\n\nvar _require = require('readable-stream'),\n    Transform = _require.Transform,\n    PassThrough = _require.PassThrough;\n\nvar pump = require('pump');\n\nvar ndjson = require('ndjson');\n\nvar isStream = require('is-stream');\n\nvar toEntry = function toEntry(entry) {\n  return {\n    name: entry.Name,\n    type: entry.Type,\n    size: entry.Size,\n    hash: entry.Hash\n  };\n};\n\nmodule.exports = function (send) {\n  return function (args, opts) {\n    opts = opts || {};\n    var transform = new Transform({\n      objectMode: true,\n      transform: function transform(entry, encoding, callback) {\n        callback(null, toEntry(entry));\n      }\n    });\n    var output = new PassThrough({\n      objectMode: true\n    });\n    send({\n      path: 'files/ls',\n      args: args,\n      qs: Object.assign({}, opts, {\n        stream: true\n      })\n    }, function (err, res) {\n      if (err) {\n        return output.destroy(err);\n      }\n\n      if (isStream(res)) {\n        var parse = ndjson.parse();\n        pump(res, parse, transform, output);\n      } else {\n        var entries = res.Entries || [];\n        entries.forEach(function (entry) {\n          output.write(toEntry(entry));\n        });\n        output.end();\n      }\n    });\n    return output;\n  };\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/files-mfs/ls-readable-stream.js"],"names":["require","Transform","PassThrough","pump","ndjson","isStream","toEntry","entry","name","Name","type","Type","size","Size","hash","Hash","module","exports","send","args","opts","transform","objectMode","encoding","callback","output","path","qs","Object","assign","stream","err","res","destroy","parse","entries","Entries","forEach","write","end"],"mappings":"AAAA;;eAKIA,OAAO,CAAC,iBAAD,C;IAFTC,S,YAAAA,S;IACAC,W,YAAAA,W;;AAEF,IAAMC,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMK,QAAQ,GAAGL,OAAO,CAAC,WAAD,CAAxB;;AAEA,IAAMM,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AACzB,SAAO;AACLC,IAAAA,IAAI,EAAED,KAAK,CAACE,IADP;AAELC,IAAAA,IAAI,EAAEH,KAAK,CAACI,IAFP;AAGLC,IAAAA,IAAI,EAAEL,KAAK,CAACM,IAHP;AAILC,IAAAA,IAAI,EAAEP,KAAK,CAACQ;AAJP,GAAP;AAMD,CAPD;;AASAC,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,SAAO,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACrBA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,QAAMC,SAAS,GAAG,IAAIpB,SAAJ,CAAc;AAC9BqB,MAAAA,UAAU,EAAE,IADkB;AAG9BD,MAAAA,SAH8B,qBAGnBd,KAHmB,EAGZgB,QAHY,EAGFC,QAHE,EAGQ;AACpCA,QAAAA,QAAQ,CAAC,IAAD,EAAOlB,OAAO,CAACC,KAAD,CAAd,CAAR;AACD;AAL6B,KAAd,CAAlB;AAQA,QAAMkB,MAAM,GAAG,IAAIvB,WAAJ,CAAgB;AAC7BoB,MAAAA,UAAU,EAAE;AADiB,KAAhB,CAAf;AAIAJ,IAAAA,IAAI,CAAC;AACHQ,MAAAA,IAAI,EAAE,UADH;AAEHP,MAAAA,IAAI,EAAEA,IAFH;AAGHQ,MAAAA,EAAE,EAAEC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,IAAlB,EAAwB;AAAEU,QAAAA,MAAM,EAAE;AAAV,OAAxB;AAHD,KAAD,EAID,UAACC,GAAD,EAAMC,GAAN,EAAc;AACf,UAAID,GAAJ,EAAS;AACP,eAAON,MAAM,CAACQ,OAAP,CAAeF,GAAf,CAAP;AACD;;AAED,UAAI1B,QAAQ,CAAC2B,GAAD,CAAZ,EAAmB;AACjB,YAAME,KAAK,GAAG9B,MAAM,CAAC8B,KAAP,EAAd;AAEA/B,QAAAA,IAAI,CAAC6B,GAAD,EAAME,KAAN,EAAab,SAAb,EAAwBI,MAAxB,CAAJ;AACD,OAJD,MAIO;AACL,YAAMU,OAAO,GAAGH,GAAG,CAACI,OAAJ,IAAe,EAA/B;AAEAD,QAAAA,OAAO,CAACE,OAAR,CAAgB,UAAC9B,KAAD,EAAW;AACzBkB,UAAAA,MAAM,CAACa,KAAP,CAAahC,OAAO,CAACC,KAAD,CAApB;AACD,SAFD;AAIAkB,QAAAA,MAAM,CAACc,GAAP;AACD;AACF,KAtBG,CAAJ;AAwBA,WAAOd,MAAP;AACD,GAxCD;AAyCD,CA1CD","sourcesContent":["'use strict'\n\nconst {\n  Transform,\n  PassThrough\n} = require('readable-stream')\nconst pump = require('pump')\nconst ndjson = require('ndjson')\nconst isStream = require('is-stream')\n\nconst toEntry = (entry) => {\n  return {\n    name: entry.Name,\n    type: entry.Type,\n    size: entry.Size,\n    hash: entry.Hash\n  }\n}\n\nmodule.exports = (send) => {\n  return (args, opts) => {\n    opts = opts || {}\n\n    const transform = new Transform({\n      objectMode: true,\n\n      transform (entry, encoding, callback) {\n        callback(null, toEntry(entry))\n      }\n    })\n\n    const output = new PassThrough({\n      objectMode: true\n    })\n\n    send({\n      path: 'files/ls',\n      args: args,\n      qs: Object.assign({}, opts, { stream: true })\n    }, (err, res) => {\n      if (err) {\n        return output.destroy(err)\n      }\n\n      if (isStream(res)) {\n        const parse = ndjson.parse()\n\n        pump(res, parse, transform, output)\n      } else {\n        const entries = res.Entries || []\n\n        entries.forEach((entry) => {\n          output.write(toEntry(entry))\n        })\n\n        output.end()\n      }\n    })\n\n    return output\n  }\n}\n"]},"metadata":{},"sourceType":"script"}