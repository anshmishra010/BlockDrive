{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar sha3 = require('js-sha3');\n\nvar mur = require('murmurhash3js-revisited');\n\nvar sha = require('./sha');\n\nvar _require2 = require('./utils'),\n    fromNumberTo32BitBuf = _require2.fromNumberTo32BitBuf; // Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\n\n\nvar hash = function hash(algorithm) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = algorithm;\n              _context.next = _context.t0 === 'sha3-224' ? 3 : _context.t0 === 'sha3-256' ? 4 : _context.t0 === 'sha3-384' ? 5 : _context.t0 === 'sha3-512' ? 6 : _context.t0 === 'shake-128' ? 7 : _context.t0 === 'shake-256' ? 8 : _context.t0 === 'keccak-224' ? 9 : _context.t0 === 'keccak-256' ? 10 : _context.t0 === 'keccak-384' ? 11 : _context.t0 === 'keccak-512' ? 12 : _context.t0 === 'murmur3-128' ? 13 : _context.t0 === 'murmur3-32' ? 14 : 15;\n              break;\n\n            case 3:\n              return _context.abrupt(\"return\", Buffer.from(sha3.sha3_224.arrayBuffer(data)));\n\n            case 4:\n              return _context.abrupt(\"return\", Buffer.from(sha3.sha3_256.arrayBuffer(data)));\n\n            case 5:\n              return _context.abrupt(\"return\", Buffer.from(sha3.sha3_384.arrayBuffer(data)));\n\n            case 6:\n              return _context.abrupt(\"return\", Buffer.from(sha3.sha3_512.arrayBuffer(data)));\n\n            case 7:\n              return _context.abrupt(\"return\", Buffer.from(sha3.shake128.create(128).update(data).arrayBuffer()));\n\n            case 8:\n              return _context.abrupt(\"return\", Buffer.from(sha3.shake256.create(256).update(data).arrayBuffer()));\n\n            case 9:\n              return _context.abrupt(\"return\", Buffer.from(sha3.keccak224.arrayBuffer(data)));\n\n            case 10:\n              return _context.abrupt(\"return\", Buffer.from(sha3.keccak256.arrayBuffer(data)));\n\n            case 11:\n              return _context.abrupt(\"return\", Buffer.from(sha3.keccak384.arrayBuffer(data)));\n\n            case 12:\n              return _context.abrupt(\"return\", Buffer.from(sha3.keccak512.arrayBuffer(data)));\n\n            case 13:\n              return _context.abrupt(\"return\", Buffer.from(mur.x64.hash128(data), 'hex'));\n\n            case 14:\n              return _context.abrupt(\"return\", fromNumberTo32BitBuf(mur.x86.hash32(data)));\n\n            case 15:\n              throw new TypeError(\"\".concat(algorithm, \" is not a supported algorithm\"));\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nmodule.exports = {\n  sha1: sha('sha1'),\n  sha2256: sha('sha2-256'),\n  sha2512: sha('sha2-512'),\n  dblSha2256: sha('dbl-sha2-256'),\n  sha3224: hash('sha3-224'),\n  sha3256: hash('sha3-256'),\n  sha3384: hash('sha3-384'),\n  sha3512: hash('sha3-512'),\n  shake128: hash('shake-128'),\n  shake256: hash('shake-256'),\n  keccak224: hash('keccak-224'),\n  keccak256: hash('keccak-256'),\n  keccak384: hash('keccak-384'),\n  keccak512: hash('keccak-512'),\n  murmur3128: hash('murmur3-128'),\n  murmur332: hash('murmur3-32'),\n  addBlake: require('./blake')\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipld-dag-pb/node_modules/multihashing-async/src/crypto.js"],"names":["require","Buffer","sha3","mur","sha","fromNumberTo32BitBuf","hash","algorithm","data","from","sha3_224","arrayBuffer","sha3_256","sha3_384","sha3_512","shake128","create","update","shake256","keccak224","keccak256","keccak384","keccak512","x64","hash128","x86","hash32","TypeError","module","exports","sha1","sha2256","sha2512","dblSha2256","sha3224","sha3256","sha3384","sha3512","murmur3128","murmur332","addBlake"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst sha3 = require('js-sha3')\nconst mur = require('murmurhash3js-revisited')\nconst sha = require('./sha')\nconst { fromNumberTo32BitBuf } = require('./utils')\n\n// Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\nconst hash = (algorithm) => async (data) => {\n  switch (algorithm) {\n    case 'sha3-224':\n      return Buffer.from(sha3.sha3_224.arrayBuffer(data))\n    case 'sha3-256':\n      return Buffer.from(sha3.sha3_256.arrayBuffer(data))\n    case 'sha3-384':\n      return Buffer.from(sha3.sha3_384.arrayBuffer(data))\n    case 'sha3-512':\n      return Buffer.from(sha3.sha3_512.arrayBuffer(data))\n    case 'shake-128':\n      return Buffer.from(sha3.shake128.create(128).update(data).arrayBuffer())\n    case 'shake-256':\n      return Buffer.from(sha3.shake256.create(256).update(data).arrayBuffer())\n    case 'keccak-224':\n      return Buffer.from(sha3.keccak224.arrayBuffer(data))\n    case 'keccak-256':\n      return Buffer.from(sha3.keccak256.arrayBuffer(data))\n    case 'keccak-384':\n      return Buffer.from(sha3.keccak384.arrayBuffer(data))\n    case 'keccak-512':\n      return Buffer.from(sha3.keccak512.arrayBuffer(data))\n    case 'murmur3-128':\n      return Buffer.from(mur.x64.hash128(data), 'hex')\n    case 'murmur3-32':\n      return fromNumberTo32BitBuf(mur.x86.hash32(data))\n\n    default:\n      throw new TypeError(`${algorithm} is not a supported algorithm`)\n  }\n}\n\nmodule.exports = {\n  sha1: sha('sha1'),\n  sha2256: sha('sha2-256'),\n  sha2512: sha('sha2-512'),\n  dblSha2256: sha('dbl-sha2-256'),\n  sha3224: hash('sha3-224'),\n  sha3256: hash('sha3-256'),\n  sha3384: hash('sha3-384'),\n  sha3512: hash('sha3-512'),\n  shake128: hash('shake-128'),\n  shake256: hash('shake-256'),\n  keccak224: hash('keccak-224'),\n  keccak256: hash('keccak-256'),\n  keccak384: hash('keccak-384'),\n  keccak512: hash('keccak-512'),\n  murmur3128: hash('murmur3-128'),\n  murmur332: hash('murmur3-32'),\n  addBlake: require('./blake')\n}\n"]},"metadata":{},"sourceType":"script"}