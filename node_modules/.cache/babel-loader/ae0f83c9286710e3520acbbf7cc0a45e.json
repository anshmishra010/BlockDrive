{"ast":null,"code":"'use strict';\n\nvar moduleConfig = require('../utils/module-config');\n\nvar values = require('pull-stream/sources/values');\n\nvar deferred = require('pull-defer');\n\nvar IsIpfs = require('is-ipfs');\n\nvar cleanCID = require('../utils/clean-cid');\n\nmodule.exports = function (arg) {\n  var send = moduleConfig(arg);\n  return function (args, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    try {\n      args = cleanCID(args);\n    } catch (err) {\n      if (!IsIpfs.ipfsPath(args)) {\n        return callback(err);\n      }\n    }\n\n    var p = deferred.source();\n    send({\n      path: 'ls',\n      args: args,\n      qs: opts\n    }, function (err, results) {\n      if (err) {\n        return callback(err);\n      }\n\n      var result = results.Objects;\n\n      if (!result) {\n        return callback(new Error('expected .Objects in results'));\n      }\n\n      result = result[0];\n\n      if (!result) {\n        return callback(new Error('expected one array in results.Objects'));\n      }\n\n      result = result.Links;\n\n      if (!Array.isArray(result)) {\n        return callback(new Error('expected one array in results.Objects[0].Links'));\n      }\n\n      result = result.map(function (link) {\n        return {\n          depth: 1,\n          name: link.Name,\n          path: args + '/' + link.Name,\n          size: link.Size,\n          hash: link.Hash,\n          type: typeOf(link)\n        };\n      });\n      p.resolve(values(result));\n    });\n    return p;\n  };\n};\n\nfunction typeOf(link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir';\n\n    case 2:\n      return 'file';\n\n    default:\n      return 'unknown';\n  }\n}","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/files-regular/ls-pull-stream.js"],"names":["moduleConfig","require","values","deferred","IsIpfs","cleanCID","module","exports","arg","send","args","opts","callback","err","ipfsPath","p","source","path","qs","results","result","Objects","Error","Links","Array","isArray","map","link","depth","name","Name","size","Size","hash","Hash","type","typeOf","resolve","Type"],"mappings":"AAAA;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,wBAAD,CAA5B;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,4BAAD,CAAtB;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,SAAD,CAAtB;;AACA,IAAMI,QAAQ,GAAGJ,OAAO,CAAC,oBAAD,CAAxB;;AAEAK,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAS;AACxB,MAAMC,IAAI,GAAGT,YAAY,CAACQ,GAAD,CAAzB;AAEA,SAAO,UAACE,IAAD,EAAOC,IAAP,EAAaC,QAAb,EAA0B;AAC/B,QAAI,OAAQD,IAAR,KAAkB,UAAtB,EAAkC;AAChCC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,QAAI;AACFD,MAAAA,IAAI,GAAGL,QAAQ,CAACK,IAAD,CAAf;AACD,KAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,UAAI,CAACT,MAAM,CAACU,QAAP,CAAgBJ,IAAhB,CAAL,EAA4B;AAC1B,eAAOE,QAAQ,CAACC,GAAD,CAAf;AACD;AACF;;AAED,QAAME,CAAC,GAAGZ,QAAQ,CAACa,MAAT,EAAV;AAEAP,IAAAA,IAAI,CAAC;AAAEQ,MAAAA,IAAI,EAAE,IAAR;AAAcP,MAAAA,IAAI,EAAEA,IAApB;AAA0BQ,MAAAA,EAAE,EAAEP;AAA9B,KAAD,EAAuC,UAACE,GAAD,EAAMM,OAAN,EAAkB;AAC3D,UAAIN,GAAJ,EAAS;AACP,eAAOD,QAAQ,CAACC,GAAD,CAAf;AACD;;AAED,UAAIO,MAAM,GAAGD,OAAO,CAACE,OAArB;;AACA,UAAI,CAACD,MAAL,EAAa;AACX,eAAOR,QAAQ,CAAC,IAAIU,KAAJ,CAAU,8BAAV,CAAD,CAAf;AACD;;AAEDF,MAAAA,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAf;;AACA,UAAI,CAACA,MAAL,EAAa;AACX,eAAOR,QAAQ,CAAC,IAAIU,KAAJ,CAAU,uCAAV,CAAD,CAAf;AACD;;AAEDF,MAAAA,MAAM,GAAGA,MAAM,CAACG,KAAhB;;AACA,UAAI,CAACC,KAAK,CAACC,OAAN,CAAcL,MAAd,CAAL,EAA4B;AAC1B,eAAOR,QAAQ,CAAC,IAAIU,KAAJ,CAAU,gDAAV,CAAD,CAAf;AACD;;AAEDF,MAAAA,MAAM,GAAGA,MAAM,CAACM,GAAP,CAAW,UAACC,IAAD;AAAA,eAAW;AAC7BC,UAAAA,KAAK,EAAE,CADsB;AAE7BC,UAAAA,IAAI,EAAEF,IAAI,CAACG,IAFkB;AAG7Bb,UAAAA,IAAI,EAAEP,IAAI,GAAG,GAAP,GAAaiB,IAAI,CAACG,IAHK;AAI7BC,UAAAA,IAAI,EAAEJ,IAAI,CAACK,IAJkB;AAK7BC,UAAAA,IAAI,EAAEN,IAAI,CAACO,IALkB;AAM7BC,UAAAA,IAAI,EAAEC,MAAM,CAACT,IAAD;AANiB,SAAX;AAAA,OAAX,CAAT;AASAZ,MAAAA,CAAC,CAACsB,OAAF,CAAUnC,MAAM,CAACkB,MAAD,CAAhB;AACD,KA9BG,CAAJ;AAgCA,WAAOL,CAAP;AACD,GAjDD;AAkDD,CArDD;;AAuDA,SAASqB,MAAT,CAAiBT,IAAjB,EAAuB;AACrB,UAAQA,IAAI,CAACW,IAAb;AACE,SAAK,CAAL;AACA,SAAK,CAAL;AACE,aAAO,KAAP;;AACF,SAAK,CAAL;AACE,aAAO,MAAP;;AACF;AACE,aAAO,SAAP;AAPJ;AASD","sourcesContent":["'use strict'\n\nconst moduleConfig = require('../utils/module-config')\nconst values = require('pull-stream/sources/values')\nconst deferred = require('pull-defer')\nconst IsIpfs = require('is-ipfs')\nconst cleanCID = require('../utils/clean-cid')\n\nmodule.exports = (arg) => {\n  const send = moduleConfig(arg)\n\n  return (args, opts, callback) => {\n    if (typeof (opts) === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    try {\n      args = cleanCID(args)\n    } catch (err) {\n      if (!IsIpfs.ipfsPath(args)) {\n        return callback(err)\n      }\n    }\n\n    const p = deferred.source()\n\n    send({ path: 'ls', args: args, qs: opts }, (err, results) => {\n      if (err) {\n        return callback(err)\n      }\n\n      let result = results.Objects\n      if (!result) {\n        return callback(new Error('expected .Objects in results'))\n      }\n\n      result = result[0]\n      if (!result) {\n        return callback(new Error('expected one array in results.Objects'))\n      }\n\n      result = result.Links\n      if (!Array.isArray(result)) {\n        return callback(new Error('expected one array in results.Objects[0].Links'))\n      }\n\n      result = result.map((link) => ({\n        depth: 1,\n        name: link.Name,\n        path: args + '/' + link.Name,\n        size: link.Size,\n        hash: link.Hash,\n        type: typeOf(link)\n      }))\n\n      p.resolve(values(result))\n    })\n\n    return p\n  }\n}\n\nfunction typeOf (link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir'\n    case 2:\n      return 'file'\n    default:\n      return 'unknown'\n  }\n}\n"]},"metadata":{},"sourceType":"script"}