{"ast":null,"code":"/* eslint-disable */\nmodule.exports = function decodeAsm(stdlib, foreign, buffer) {\n  'use asm'; // -- Imports\n\n  var heap = new stdlib.Uint8Array(buffer); // var log = foreign.log\n\n  var pushInt = foreign.pushInt;\n  var pushInt32 = foreign.pushInt32;\n  var pushInt32Neg = foreign.pushInt32Neg;\n  var pushInt64 = foreign.pushInt64;\n  var pushInt64Neg = foreign.pushInt64Neg;\n  var pushFloat = foreign.pushFloat;\n  var pushFloatSingle = foreign.pushFloatSingle;\n  var pushFloatDouble = foreign.pushFloatDouble;\n  var pushTrue = foreign.pushTrue;\n  var pushFalse = foreign.pushFalse;\n  var pushUndefined = foreign.pushUndefined;\n  var pushNull = foreign.pushNull;\n  var pushInfinity = foreign.pushInfinity;\n  var pushInfinityNeg = foreign.pushInfinityNeg;\n  var pushNaN = foreign.pushNaN;\n  var pushNaNNeg = foreign.pushNaNNeg;\n  var pushArrayStart = foreign.pushArrayStart;\n  var pushArrayStartFixed = foreign.pushArrayStartFixed;\n  var pushArrayStartFixed32 = foreign.pushArrayStartFixed32;\n  var pushArrayStartFixed64 = foreign.pushArrayStartFixed64;\n  var pushObjectStart = foreign.pushObjectStart;\n  var pushObjectStartFixed = foreign.pushObjectStartFixed;\n  var pushObjectStartFixed32 = foreign.pushObjectStartFixed32;\n  var pushObjectStartFixed64 = foreign.pushObjectStartFixed64;\n  var pushByteString = foreign.pushByteString;\n  var pushByteStringStart = foreign.pushByteStringStart;\n  var pushUtf8String = foreign.pushUtf8String;\n  var pushUtf8StringStart = foreign.pushUtf8StringStart;\n  var pushSimpleUnassigned = foreign.pushSimpleUnassigned;\n  var pushTagStart = foreign.pushTagStart;\n  var pushTagStart4 = foreign.pushTagStart4;\n  var pushTagStart8 = foreign.pushTagStart8;\n  var pushTagUnassigned = foreign.pushTagUnassigned;\n  var pushBreak = foreign.pushBreak;\n  var pow = stdlib.Math.pow; // -- Constants\n  // -- Mutable Variables\n\n  var offset = 0;\n  var inputLength = 0;\n  var code = 0; // Decode a cbor string represented as Uint8Array\n  // which is allocated on the heap from 0 to inputLength\n  //\n  // input - Int\n  //\n  // Returns Code - Int,\n  // Success = 0\n  // Error > 0\n\n  function parse(input) {\n    input = input | 0;\n    offset = 0;\n    inputLength = input;\n\n    while ((offset | 0) < (inputLength | 0)) {\n      code = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0;\n\n      if ((code | 0) > 0) {\n        break;\n      }\n    }\n\n    return code | 0;\n  } // -- Helper Function\n\n\n  function checkOffset(n) {\n    n = n | 0;\n\n    if (((offset | 0) + (n | 0) | 0) < (inputLength | 0)) {\n      return 0;\n    }\n\n    return 1;\n  }\n\n  function readUInt16(n) {\n    n = n | 0;\n    return heap[n | 0] << 8 | heap[n + 1 | 0] | 0;\n  }\n\n  function readUInt32(n) {\n    n = n | 0;\n    return heap[n | 0] << 24 | heap[n + 1 | 0] << 16 | heap[n + 2 | 0] << 8 | heap[n + 3 | 0] | 0;\n  } // -- Initial Byte Handlers\n\n\n  function INT_P(octet) {\n    octet = octet | 0;\n    pushInt(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function UINT_P_8(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n\n    pushInt(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n\n  function UINT_P_16(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n\n    pushInt(readUInt16(offset + 1 | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n\n  function UINT_P_32(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n\n    pushInt32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n\n  function UINT_P_64(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n\n    pushInt64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n\n  function INT_N(octet) {\n    octet = octet | 0;\n    pushInt(-1 - (octet - 32 | 0) | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function UINT_N_8(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n\n    pushInt(-1 - (heap[offset + 1 | 0] | 0) | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n\n  function UINT_N_16(octet) {\n    octet = octet | 0;\n    var val = 0;\n\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n\n    val = readUInt16(offset + 1 | 0) | 0;\n    pushInt(-1 - (val | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n\n  function UINT_N_32(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n\n    pushInt32Neg(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n\n  function UINT_N_64(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n\n    pushInt64Neg(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n\n  function BYTE_STRING(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var step = 0;\n    step = octet - 64 | 0;\n\n    if (checkOffset(step | 0) | 0) {\n      return 1;\n    }\n\n    start = offset + 1 | 0;\n    end = (offset + 1 | 0) + (step | 0) | 0;\n    pushByteString(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n\n  function BYTE_STRING_8(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n\n    length = heap[offset + 1 | 0] | 0;\n    start = offset + 2 | 0;\n    end = (offset + 2 | 0) + (length | 0) | 0;\n\n    if (checkOffset(length + 1 | 0) | 0) {\n      return 1;\n    }\n\n    pushByteString(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n\n  function BYTE_STRING_16(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n\n    length = readUInt16(offset + 1 | 0) | 0;\n    start = offset + 3 | 0;\n    end = (offset + 3 | 0) + (length | 0) | 0;\n\n    if (checkOffset(length + 2 | 0) | 0) {\n      return 1;\n    }\n\n    pushByteString(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n\n  function BYTE_STRING_32(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n\n    length = readUInt32(offset + 1 | 0) | 0;\n    start = offset + 5 | 0;\n    end = (offset + 5 | 0) + (length | 0) | 0;\n\n    if (checkOffset(length + 4 | 0) | 0) {\n      return 1;\n    }\n\n    pushByteString(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n\n  function BYTE_STRING_64(octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0;\n    return 1;\n  }\n\n  function BYTE_STRING_BREAK(octet) {\n    octet = octet | 0;\n    pushByteStringStart();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function UTF8_STRING(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var step = 0;\n    step = octet - 96 | 0;\n\n    if (checkOffset(step | 0) | 0) {\n      return 1;\n    }\n\n    start = offset + 1 | 0;\n    end = (offset + 1 | 0) + (step | 0) | 0;\n    pushUtf8String(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n\n  function UTF8_STRING_8(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n\n    length = heap[offset + 1 | 0] | 0;\n    start = offset + 2 | 0;\n    end = (offset + 2 | 0) + (length | 0) | 0;\n\n    if (checkOffset(length + 1 | 0) | 0) {\n      return 1;\n    }\n\n    pushUtf8String(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n\n  function UTF8_STRING_16(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n\n    length = readUInt16(offset + 1 | 0) | 0;\n    start = offset + 3 | 0;\n    end = (offset + 3 | 0) + (length | 0) | 0;\n\n    if (checkOffset(length + 2 | 0) | 0) {\n      return 1;\n    }\n\n    pushUtf8String(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n\n  function UTF8_STRING_32(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n\n    length = readUInt32(offset + 1 | 0) | 0;\n    start = offset + 5 | 0;\n    end = (offset + 5 | 0) + (length | 0) | 0;\n\n    if (checkOffset(length + 4 | 0) | 0) {\n      return 1;\n    }\n\n    pushUtf8String(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n\n  function UTF8_STRING_64(octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0;\n    return 1;\n  }\n\n  function UTF8_STRING_BREAK(octet) {\n    octet = octet | 0;\n    pushUtf8StringStart();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function ARRAY(octet) {\n    octet = octet | 0;\n    pushArrayStartFixed(octet - 128 | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function ARRAY_8(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n\n    pushArrayStartFixed(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n\n  function ARRAY_16(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n\n    pushArrayStartFixed(readUInt16(offset + 1 | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n\n  function ARRAY_32(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n\n    pushArrayStartFixed32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n\n  function ARRAY_64(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n\n    pushArrayStartFixed64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n\n  function ARRAY_BREAK(octet) {\n    octet = octet | 0;\n    pushArrayStart();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function MAP(octet) {\n    octet = octet | 0;\n    var step = 0;\n    step = octet - 160 | 0;\n\n    if (checkOffset(step | 0) | 0) {\n      return 1;\n    }\n\n    pushObjectStartFixed(step | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function MAP_8(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n\n    pushObjectStartFixed(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n\n  function MAP_16(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n\n    pushObjectStartFixed(readUInt16(offset + 1 | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n\n  function MAP_32(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n\n    pushObjectStartFixed32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n\n  function MAP_64(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n\n    pushObjectStartFixed64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n\n  function MAP_BREAK(octet) {\n    octet = octet | 0;\n    pushObjectStart();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_KNOWN(octet) {\n    octet = octet | 0;\n    pushTagStart(octet - 192 | 0 | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_BIGNUM_POS(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_BIGNUM_NEG(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_FRAC(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_BIGNUM_FLOAT(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_UNASSIGNED(octet) {\n    octet = octet | 0;\n    pushTagStart(octet - 192 | 0 | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_BASE64_URL(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_BASE64(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_BASE16(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function TAG_MORE_1(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n\n    pushTagStart(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n\n  function TAG_MORE_2(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n\n    pushTagStart(readUInt16(offset + 1 | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n\n  function TAG_MORE_4(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n\n    pushTagStart4(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n\n  function TAG_MORE_8(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n\n    pushTagStart8(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n\n  function SIMPLE_UNASSIGNED(octet) {\n    octet = octet | 0;\n    pushSimpleUnassigned((octet | 0) - 224 | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function SIMPLE_FALSE(octet) {\n    octet = octet | 0;\n    pushFalse();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function SIMPLE_TRUE(octet) {\n    octet = octet | 0;\n    pushTrue();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function SIMPLE_NULL(octet) {\n    octet = octet | 0;\n    pushNull();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function SIMPLE_UNDEFINED(octet) {\n    octet = octet | 0;\n    pushUndefined();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  function SIMPLE_BYTE(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n\n    pushSimpleUnassigned(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n\n  function SIMPLE_FLOAT_HALF(octet) {\n    octet = octet | 0;\n    var f = 0;\n    var g = 0;\n    var sign = 1.0;\n    var exp = 0.0;\n    var mant = 0.0;\n    var r = 0.0;\n\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n\n    f = heap[offset + 1 | 0] | 0;\n    g = heap[offset + 2 | 0] | 0;\n\n    if ((f | 0) & 0x80) {\n      sign = -1.0;\n    }\n\n    exp = +(((f | 0) & 0x7C) >> 2);\n    mant = +(((f | 0) & 0x03) << 8 | g);\n\n    if (+exp == 0.0) {\n      pushFloat(+(+sign * +5.9604644775390625e-8 * +mant));\n    } else if (+exp == 31.0) {\n      if (+sign == 1.0) {\n        if (+mant > 0.0) {\n          pushNaN();\n        } else {\n          pushInfinity();\n        }\n      } else {\n        if (+mant > 0.0) {\n          pushNaNNeg();\n        } else {\n          pushInfinityNeg();\n        }\n      }\n    } else {\n      pushFloat(+(+sign * pow(+2, +(+exp - 25.0)) * +(1024.0 + mant)));\n    }\n\n    offset = offset + 3 | 0;\n    return 0;\n  }\n\n  function SIMPLE_FLOAT_SINGLE(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n\n    pushFloatSingle(heap[offset + 1 | 0] | 0, heap[offset + 2 | 0] | 0, heap[offset + 3 | 0] | 0, heap[offset + 4 | 0] | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n\n  function SIMPLE_FLOAT_DOUBLE(octet) {\n    octet = octet | 0;\n\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n\n    pushFloatDouble(heap[offset + 1 | 0] | 0, heap[offset + 2 | 0] | 0, heap[offset + 3 | 0] | 0, heap[offset + 4 | 0] | 0, heap[offset + 5 | 0] | 0, heap[offset + 6 | 0] | 0, heap[offset + 7 | 0] | 0, heap[offset + 8 | 0] | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n\n  function ERROR(octet) {\n    octet = octet | 0;\n    return 1;\n  }\n\n  function BREAK(octet) {\n    octet = octet | 0;\n    pushBreak();\n    offset = offset + 1 | 0;\n    return 0;\n  } // -- Jump Table\n\n\n  var jumpTable = [// Integer 0x00..0x17 (0..23)\n  INT_P, // 0x00\n  INT_P, // 0x01\n  INT_P, // 0x02\n  INT_P, // 0x03\n  INT_P, // 0x04\n  INT_P, // 0x05\n  INT_P, // 0x06\n  INT_P, // 0x07\n  INT_P, // 0x08\n  INT_P, // 0x09\n  INT_P, // 0x0A\n  INT_P, // 0x0B\n  INT_P, // 0x0C\n  INT_P, // 0x0D\n  INT_P, // 0x0E\n  INT_P, // 0x0F\n  INT_P, // 0x10\n  INT_P, // 0x11\n  INT_P, // 0x12\n  INT_P, // 0x13\n  INT_P, // 0x14\n  INT_P, // 0x15\n  INT_P, // 0x16\n  INT_P, // 0x17\n  // Unsigned integer (one-byte uint8_t follows)\n  UINT_P_8, // 0x18\n  // Unsigned integer (two-byte uint16_t follows)\n  UINT_P_16, // 0x19\n  // Unsigned integer (four-byte uint32_t follows)\n  UINT_P_32, // 0x1a\n  // Unsigned integer (eight-byte uint64_t follows)\n  UINT_P_64, // 0x1b\n  ERROR, // 0x1c\n  ERROR, // 0x1d\n  ERROR, // 0x1e\n  ERROR, // 0x1f\n  // Negative integer -1-0x00..-1-0x17 (-1..-24)\n  INT_N, // 0x20\n  INT_N, // 0x21\n  INT_N, // 0x22\n  INT_N, // 0x23\n  INT_N, // 0x24\n  INT_N, // 0x25\n  INT_N, // 0x26\n  INT_N, // 0x27\n  INT_N, // 0x28\n  INT_N, // 0x29\n  INT_N, // 0x2A\n  INT_N, // 0x2B\n  INT_N, // 0x2C\n  INT_N, // 0x2D\n  INT_N, // 0x2E\n  INT_N, // 0x2F\n  INT_N, // 0x30\n  INT_N, // 0x31\n  INT_N, // 0x32\n  INT_N, // 0x33\n  INT_N, // 0x34\n  INT_N, // 0x35\n  INT_N, // 0x36\n  INT_N, // 0x37\n  // Negative integer -1-n (one-byte uint8_t for n follows)\n  UINT_N_8, // 0x38\n  // Negative integer -1-n (two-byte uint16_t for n follows)\n  UINT_N_16, // 0x39\n  // Negative integer -1-n (four-byte uint32_t for nfollows)\n  UINT_N_32, // 0x3a\n  // Negative integer -1-n (eight-byte uint64_t for n follows)\n  UINT_N_64, // 0x3b\n  ERROR, // 0x3c\n  ERROR, // 0x3d\n  ERROR, // 0x3e\n  ERROR, // 0x3f\n  // byte string (0x00..0x17 bytes follow)\n  BYTE_STRING, // 0x40\n  BYTE_STRING, // 0x41\n  BYTE_STRING, // 0x42\n  BYTE_STRING, // 0x43\n  BYTE_STRING, // 0x44\n  BYTE_STRING, // 0x45\n  BYTE_STRING, // 0x46\n  BYTE_STRING, // 0x47\n  BYTE_STRING, // 0x48\n  BYTE_STRING, // 0x49\n  BYTE_STRING, // 0x4A\n  BYTE_STRING, // 0x4B\n  BYTE_STRING, // 0x4C\n  BYTE_STRING, // 0x4D\n  BYTE_STRING, // 0x4E\n  BYTE_STRING, // 0x4F\n  BYTE_STRING, // 0x50\n  BYTE_STRING, // 0x51\n  BYTE_STRING, // 0x52\n  BYTE_STRING, // 0x53\n  BYTE_STRING, // 0x54\n  BYTE_STRING, // 0x55\n  BYTE_STRING, // 0x56\n  BYTE_STRING, // 0x57\n  // byte string (one-byte uint8_t for n, and then n bytes follow)\n  BYTE_STRING_8, // 0x58\n  // byte string (two-byte uint16_t for n, and then n bytes follow)\n  BYTE_STRING_16, // 0x59\n  // byte string (four-byte uint32_t for n, and then n bytes follow)\n  BYTE_STRING_32, // 0x5a\n  // byte string (eight-byte uint64_t for n, and then n bytes follow)\n  BYTE_STRING_64, // 0x5b\n  ERROR, // 0x5c\n  ERROR, // 0x5d\n  ERROR, // 0x5e\n  // byte string, byte strings follow, terminated by \"break\"\n  BYTE_STRING_BREAK, // 0x5f\n  // UTF-8 string (0x00..0x17 bytes follow)\n  UTF8_STRING, // 0x60\n  UTF8_STRING, // 0x61\n  UTF8_STRING, // 0x62\n  UTF8_STRING, // 0x63\n  UTF8_STRING, // 0x64\n  UTF8_STRING, // 0x65\n  UTF8_STRING, // 0x66\n  UTF8_STRING, // 0x67\n  UTF8_STRING, // 0x68\n  UTF8_STRING, // 0x69\n  UTF8_STRING, // 0x6A\n  UTF8_STRING, // 0x6B\n  UTF8_STRING, // 0x6C\n  UTF8_STRING, // 0x6D\n  UTF8_STRING, // 0x6E\n  UTF8_STRING, // 0x6F\n  UTF8_STRING, // 0x70\n  UTF8_STRING, // 0x71\n  UTF8_STRING, // 0x72\n  UTF8_STRING, // 0x73\n  UTF8_STRING, // 0x74\n  UTF8_STRING, // 0x75\n  UTF8_STRING, // 0x76\n  UTF8_STRING, // 0x77\n  // UTF-8 string (one-byte uint8_t for n, and then n bytes follow)\n  UTF8_STRING_8, // 0x78\n  // UTF-8 string (two-byte uint16_t for n, and then n bytes follow)\n  UTF8_STRING_16, // 0x79\n  // UTF-8 string (four-byte uint32_t for n, and then n bytes follow)\n  UTF8_STRING_32, // 0x7a\n  // UTF-8 string (eight-byte uint64_t for n, and then n bytes follow)\n  UTF8_STRING_64, // 0x7b\n  // UTF-8 string, UTF-8 strings follow, terminated by \"break\"\n  ERROR, // 0x7c\n  ERROR, // 0x7d\n  ERROR, // 0x7e\n  UTF8_STRING_BREAK, // 0x7f\n  // array (0x00..0x17 data items follow)\n  ARRAY, // 0x80\n  ARRAY, // 0x81\n  ARRAY, // 0x82\n  ARRAY, // 0x83\n  ARRAY, // 0x84\n  ARRAY, // 0x85\n  ARRAY, // 0x86\n  ARRAY, // 0x87\n  ARRAY, // 0x88\n  ARRAY, // 0x89\n  ARRAY, // 0x8A\n  ARRAY, // 0x8B\n  ARRAY, // 0x8C\n  ARRAY, // 0x8D\n  ARRAY, // 0x8E\n  ARRAY, // 0x8F\n  ARRAY, // 0x90\n  ARRAY, // 0x91\n  ARRAY, // 0x92\n  ARRAY, // 0x93\n  ARRAY, // 0x94\n  ARRAY, // 0x95\n  ARRAY, // 0x96\n  ARRAY, // 0x97\n  // array (one-byte uint8_t fo, and then n data items follow)\n  ARRAY_8, // 0x98\n  // array (two-byte uint16_t for n, and then n data items follow)\n  ARRAY_16, // 0x99\n  // array (four-byte uint32_t for n, and then n data items follow)\n  ARRAY_32, // 0x9a\n  // array (eight-byte uint64_t for n, and then n data items follow)\n  ARRAY_64, // 0x9b\n  // array, data items follow, terminated by \"break\"\n  ERROR, // 0x9c\n  ERROR, // 0x9d\n  ERROR, // 0x9e\n  ARRAY_BREAK, // 0x9f\n  // map (0x00..0x17 pairs of data items follow)\n  MAP, // 0xa0\n  MAP, // 0xa1\n  MAP, // 0xa2\n  MAP, // 0xa3\n  MAP, // 0xa4\n  MAP, // 0xa5\n  MAP, // 0xa6\n  MAP, // 0xa7\n  MAP, // 0xa8\n  MAP, // 0xa9\n  MAP, // 0xaA\n  MAP, // 0xaB\n  MAP, // 0xaC\n  MAP, // 0xaD\n  MAP, // 0xaE\n  MAP, // 0xaF\n  MAP, // 0xb0\n  MAP, // 0xb1\n  MAP, // 0xb2\n  MAP, // 0xb3\n  MAP, // 0xb4\n  MAP, // 0xb5\n  MAP, // 0xb6\n  MAP, // 0xb7\n  // map (one-byte uint8_t for n, and then n pairs of data items follow)\n  MAP_8, // 0xb8\n  // map (two-byte uint16_t for n, and then n pairs of data items follow)\n  MAP_16, // 0xb9\n  // map (four-byte uint32_t for n, and then n pairs of data items follow)\n  MAP_32, // 0xba\n  // map (eight-byte uint64_t for n, and then n pairs of data items follow)\n  MAP_64, // 0xbb\n  ERROR, // 0xbc\n  ERROR, // 0xbd\n  ERROR, // 0xbe\n  // map, pairs of data items follow, terminated by \"break\"\n  MAP_BREAK, // 0xbf\n  // Text-based date/time (data item follows; see Section 2.4.1)\n  TAG_KNOWN, // 0xc0\n  // Epoch-based date/time (data item follows; see Section 2.4.1)\n  TAG_KNOWN, // 0xc1\n  // Positive bignum (data item \"byte string\" follows)\n  TAG_KNOWN, // 0xc2\n  // Negative bignum (data item \"byte string\" follows)\n  TAG_KNOWN, // 0xc3\n  // Decimal Fraction (data item \"array\" follows; see Section 2.4.3)\n  TAG_KNOWN, // 0xc4\n  // Bigfloat (data item \"array\" follows; see Section 2.4.3)\n  TAG_KNOWN, // 0xc5\n  // (tagged item)\n  TAG_UNASSIGNED, // 0xc6\n  TAG_UNASSIGNED, // 0xc7\n  TAG_UNASSIGNED, // 0xc8\n  TAG_UNASSIGNED, // 0xc9\n  TAG_UNASSIGNED, // 0xca\n  TAG_UNASSIGNED, // 0xcb\n  TAG_UNASSIGNED, // 0xcc\n  TAG_UNASSIGNED, // 0xcd\n  TAG_UNASSIGNED, // 0xce\n  TAG_UNASSIGNED, // 0xcf\n  TAG_UNASSIGNED, // 0xd0\n  TAG_UNASSIGNED, // 0xd1\n  TAG_UNASSIGNED, // 0xd2\n  TAG_UNASSIGNED, // 0xd3\n  TAG_UNASSIGNED, // 0xd4\n  // Expected Conversion (data item follows; see Section 2.4.4.2)\n  TAG_UNASSIGNED, // 0xd5\n  TAG_UNASSIGNED, // 0xd6\n  TAG_UNASSIGNED, // 0xd7\n  // (more tagged items, 1/2/4/8 bytes and then a data item follow)\n  TAG_MORE_1, // 0xd8\n  TAG_MORE_2, // 0xd9\n  TAG_MORE_4, // 0xda\n  TAG_MORE_8, // 0xdb\n  ERROR, // 0xdc\n  ERROR, // 0xdd\n  ERROR, // 0xde\n  ERROR, // 0xdf\n  // (simple value)\n  SIMPLE_UNASSIGNED, // 0xe0\n  SIMPLE_UNASSIGNED, // 0xe1\n  SIMPLE_UNASSIGNED, // 0xe2\n  SIMPLE_UNASSIGNED, // 0xe3\n  SIMPLE_UNASSIGNED, // 0xe4\n  SIMPLE_UNASSIGNED, // 0xe5\n  SIMPLE_UNASSIGNED, // 0xe6\n  SIMPLE_UNASSIGNED, // 0xe7\n  SIMPLE_UNASSIGNED, // 0xe8\n  SIMPLE_UNASSIGNED, // 0xe9\n  SIMPLE_UNASSIGNED, // 0xea\n  SIMPLE_UNASSIGNED, // 0xeb\n  SIMPLE_UNASSIGNED, // 0xec\n  SIMPLE_UNASSIGNED, // 0xed\n  SIMPLE_UNASSIGNED, // 0xee\n  SIMPLE_UNASSIGNED, // 0xef\n  SIMPLE_UNASSIGNED, // 0xf0\n  SIMPLE_UNASSIGNED, // 0xf1\n  SIMPLE_UNASSIGNED, // 0xf2\n  SIMPLE_UNASSIGNED, // 0xf3\n  // False\n  SIMPLE_FALSE, // 0xf4\n  // True\n  SIMPLE_TRUE, // 0xf5\n  // Null\n  SIMPLE_NULL, // 0xf6\n  // Undefined\n  SIMPLE_UNDEFINED, // 0xf7\n  // (simple value, one byte follows)\n  SIMPLE_BYTE, // 0xf8\n  // Half-Precision Float (two-byte IEEE 754)\n  SIMPLE_FLOAT_HALF, // 0xf9\n  // Single-Precision Float (four-byte IEEE 754)\n  SIMPLE_FLOAT_SINGLE, // 0xfa\n  // Double-Precision Float (eight-byte IEEE 754)\n  SIMPLE_FLOAT_DOUBLE, // 0xfb\n  ERROR, // 0xfc\n  ERROR, // 0xfd\n  ERROR, // 0xfe\n  // \"break\" stop code\n  BREAK // 0xff\n  ]; // --\n\n  return {\n    parse: parse\n  };\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/borc/src/decoder.asm.js"],"names":["module","exports","decodeAsm","stdlib","foreign","buffer","heap","Uint8Array","pushInt","pushInt32","pushInt32Neg","pushInt64","pushInt64Neg","pushFloat","pushFloatSingle","pushFloatDouble","pushTrue","pushFalse","pushUndefined","pushNull","pushInfinity","pushInfinityNeg","pushNaN","pushNaNNeg","pushArrayStart","pushArrayStartFixed","pushArrayStartFixed32","pushArrayStartFixed64","pushObjectStart","pushObjectStartFixed","pushObjectStartFixed32","pushObjectStartFixed64","pushByteString","pushByteStringStart","pushUtf8String","pushUtf8StringStart","pushSimpleUnassigned","pushTagStart","pushTagStart4","pushTagStart8","pushTagUnassigned","pushBreak","pow","Math","offset","inputLength","code","parse","input","jumpTable","checkOffset","n","readUInt16","readUInt32","INT_P","octet","UINT_P_8","UINT_P_16","UINT_P_32","UINT_P_64","INT_N","UINT_N_8","UINT_N_16","val","UINT_N_32","UINT_N_64","BYTE_STRING","start","end","step","BYTE_STRING_8","length","BYTE_STRING_16","BYTE_STRING_32","BYTE_STRING_64","BYTE_STRING_BREAK","UTF8_STRING","UTF8_STRING_8","UTF8_STRING_16","UTF8_STRING_32","UTF8_STRING_64","UTF8_STRING_BREAK","ARRAY","ARRAY_8","ARRAY_16","ARRAY_32","ARRAY_64","ARRAY_BREAK","MAP","MAP_8","MAP_16","MAP_32","MAP_64","MAP_BREAK","TAG_KNOWN","TAG_BIGNUM_POS","TAG_BIGNUM_NEG","TAG_FRAC","TAG_BIGNUM_FLOAT","TAG_UNASSIGNED","TAG_BASE64_URL","TAG_BASE64","TAG_BASE16","TAG_MORE_1","TAG_MORE_2","TAG_MORE_4","TAG_MORE_8","SIMPLE_UNASSIGNED","SIMPLE_FALSE","SIMPLE_TRUE","SIMPLE_NULL","SIMPLE_UNDEFINED","SIMPLE_BYTE","SIMPLE_FLOAT_HALF","f","g","sign","exp","mant","r","SIMPLE_FLOAT_SINGLE","SIMPLE_FLOAT_DOUBLE","ERROR","BREAK"],"mappings":"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","sourcesContent":["/* eslint-disable */\n\nmodule.exports = function decodeAsm (stdlib, foreign, buffer) {\n  'use asm'\n\n  // -- Imports\n\n  var heap = new stdlib.Uint8Array(buffer)\n  // var log = foreign.log\n  var pushInt = foreign.pushInt\n  var pushInt32 = foreign.pushInt32\n  var pushInt32Neg = foreign.pushInt32Neg\n  var pushInt64 = foreign.pushInt64\n  var pushInt64Neg = foreign.pushInt64Neg\n  var pushFloat = foreign.pushFloat\n  var pushFloatSingle = foreign.pushFloatSingle\n  var pushFloatDouble = foreign.pushFloatDouble\n  var pushTrue = foreign.pushTrue\n  var pushFalse = foreign.pushFalse\n  var pushUndefined = foreign.pushUndefined\n  var pushNull = foreign.pushNull\n  var pushInfinity = foreign.pushInfinity\n  var pushInfinityNeg = foreign.pushInfinityNeg\n  var pushNaN = foreign.pushNaN\n  var pushNaNNeg = foreign.pushNaNNeg\n\n  var pushArrayStart = foreign.pushArrayStart\n  var pushArrayStartFixed = foreign.pushArrayStartFixed\n  var pushArrayStartFixed32 = foreign.pushArrayStartFixed32\n  var pushArrayStartFixed64 = foreign.pushArrayStartFixed64\n  var pushObjectStart = foreign.pushObjectStart\n  var pushObjectStartFixed = foreign.pushObjectStartFixed\n  var pushObjectStartFixed32 = foreign.pushObjectStartFixed32\n  var pushObjectStartFixed64 = foreign.pushObjectStartFixed64\n\n  var pushByteString = foreign.pushByteString\n  var pushByteStringStart = foreign.pushByteStringStart\n  var pushUtf8String = foreign.pushUtf8String\n  var pushUtf8StringStart = foreign.pushUtf8StringStart\n\n  var pushSimpleUnassigned = foreign.pushSimpleUnassigned\n\n  var pushTagStart = foreign.pushTagStart\n  var pushTagStart4 = foreign.pushTagStart4\n  var pushTagStart8 = foreign.pushTagStart8\n  var pushTagUnassigned = foreign.pushTagUnassigned\n\n  var pushBreak = foreign.pushBreak\n\n  var pow = stdlib.Math.pow\n\n  // -- Constants\n\n\n  // -- Mutable Variables\n\n  var offset = 0\n  var inputLength = 0\n  var code = 0\n\n  // Decode a cbor string represented as Uint8Array\n  // which is allocated on the heap from 0 to inputLength\n  //\n  // input - Int\n  //\n  // Returns Code - Int,\n  // Success = 0\n  // Error > 0\n  function parse (input) {\n    input = input | 0\n\n    offset = 0\n    inputLength = input\n\n    while ((offset | 0) < (inputLength | 0)) {\n      code = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0\n\n      if ((code | 0) > 0) {\n        break\n      }\n    }\n\n    return code | 0\n  }\n\n  // -- Helper Function\n\n  function checkOffset (n) {\n    n = n | 0\n\n    if ((((offset | 0) + (n | 0)) | 0) < (inputLength | 0)) {\n      return 0\n    }\n\n    return 1\n  }\n\n  function readUInt16 (n) {\n    n = n | 0\n\n    return (\n      (heap[n | 0] << 8) | heap[(n + 1) | 0]\n    ) | 0\n  }\n\n  function readUInt32 (n) {\n    n = n | 0\n\n    return (\n      (heap[n | 0] << 24) | (heap[(n + 1) | 0] << 16) | (heap[(n + 2) | 0] << 8) | heap[(n + 3) | 0]\n    ) | 0\n  }\n\n  // -- Initial Byte Handlers\n\n  function INT_P (octet) {\n    octet = octet | 0\n\n    pushInt(octet | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UINT_P_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushInt(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function UINT_P_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushInt(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function UINT_P_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushInt32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function UINT_P_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushInt64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function INT_N (octet) {\n    octet = octet | 0\n\n    pushInt((-1 - ((octet - 32) | 0)) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UINT_N_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushInt(\n      (-1 - (heap[(offset + 1) | 0] | 0)) | 0\n    )\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function UINT_N_16 (octet) {\n    octet = octet | 0\n\n    var val = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    val = readUInt16((offset + 1) | 0) | 0\n    pushInt((-1 - (val | 0)) | 0)\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function UINT_N_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushInt32Neg(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function UINT_N_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushInt64Neg(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function BYTE_STRING (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var step = 0\n\n    step = (octet - 64) | 0\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    start = (offset + 1) | 0\n    end = (((offset + 1) | 0) + (step | 0)) | 0\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_8 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    length = heap[(offset + 1) | 0] | 0\n    start = (offset + 2) | 0\n    end = (((offset + 2) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 1) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_16 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    length = readUInt16((offset + 1) | 0) | 0\n    start = (offset + 3) | 0\n    end = (((offset + 3) | 0) + (length | 0)) | 0\n\n\n    if (checkOffset((length + 2) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_32 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    length = readUInt32((offset + 1) | 0) | 0\n    start = (offset + 5) | 0\n    end = (((offset + 5) | 0) + (length | 0)) | 0\n\n\n    if (checkOffset((length + 4) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_64 (octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0\n\n    return 1\n  }\n\n  function BYTE_STRING_BREAK (octet) {\n    octet = octet | 0\n\n    pushByteStringStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UTF8_STRING (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var step = 0\n\n    step = (octet - 96) | 0\n\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    start = (offset + 1) | 0\n    end = (((offset + 1) | 0) + (step | 0)) | 0\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_8 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    length = heap[(offset + 1) | 0] | 0\n    start = (offset + 2) | 0\n    end = (((offset + 2) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 1) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_16 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    length = readUInt16((offset + 1) | 0) | 0\n    start = (offset + 3) | 0\n    end = (((offset + 3) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 2) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_32 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    length = readUInt32((offset + 1) | 0) | 0\n    start = (offset + 5) | 0\n    end = (((offset + 5) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 4) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_64 (octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0\n\n    return 1\n  }\n\n  function UTF8_STRING_BREAK (octet) {\n    octet = octet | 0\n\n    pushUtf8StringStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function ARRAY (octet) {\n    octet = octet | 0\n\n    pushArrayStartFixed((octet - 128) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function ARRAY_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function ARRAY_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function ARRAY_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function ARRAY_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function ARRAY_BREAK (octet) {\n    octet = octet | 0\n\n    pushArrayStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function MAP (octet) {\n    octet = octet | 0\n\n    var step = 0\n\n    step = (octet - 160) | 0\n\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(step | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function MAP_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function MAP_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function MAP_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function MAP_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function MAP_BREAK (octet) {\n    octet = octet | 0\n\n    pushObjectStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function TAG_KNOWN (octet) {\n    octet = octet | 0\n\n    pushTagStart((octet - 192| 0) | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_POS (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_NEG (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_FRAC (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_FLOAT (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_UNASSIGNED (octet) {\n    octet = octet | 0\n\n    pushTagStart((octet - 192| 0) | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE64_URL (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE64 (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE16 (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_1 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushTagStart(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_2 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushTagStart(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_4 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushTagStart4(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushTagStart8(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9 | 0)\n\n    return 0\n  }\n\n  function SIMPLE_UNASSIGNED (octet) {\n    octet = octet | 0\n\n    pushSimpleUnassigned(((octet | 0) - 224) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FALSE (octet) {\n    octet = octet | 0\n\n    pushFalse()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_TRUE (octet) {\n    octet = octet | 0\n\n    pushTrue()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_NULL (octet) {\n    octet = octet | 0\n\n    pushNull()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_UNDEFINED (octet) {\n    octet = octet | 0\n\n    pushUndefined()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_BYTE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushSimpleUnassigned(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2)  | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_HALF (octet) {\n    octet = octet | 0\n\n    var f = 0\n    var g = 0\n    var sign = 1.0\n    var exp = 0.0\n    var mant = 0.0\n    var r = 0.0\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    f = heap[(offset + 1) | 0] | 0\n    g = heap[(offset + 2) | 0] | 0\n\n    if ((f | 0) & 0x80) {\n      sign = -1.0\n    }\n\n    exp = +(((f | 0) & 0x7C) >> 2)\n    mant = +((((f | 0) & 0x03) << 8) | g)\n\n    if (+exp == 0.0) {\n      pushFloat(+(\n        (+sign) * +5.9604644775390625e-8 * (+mant)\n      ))\n    } else if (+exp == 31.0) {\n      if (+sign == 1.0) {\n        if (+mant > 0.0) {\n          pushNaN()\n        } else {\n          pushInfinity()\n        }\n      } else {\n        if (+mant > 0.0) {\n          pushNaNNeg()\n        } else {\n          pushInfinityNeg()\n        }\n      }\n    } else {\n      pushFloat(+(\n        +sign * pow(+2, +(+exp - 25.0)) * +(1024.0 + mant)\n      ))\n    }\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_SINGLE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushFloatSingle(\n      heap[(offset + 1) | 0] | 0,\n      heap[(offset + 2) | 0] | 0,\n      heap[(offset + 3) | 0] | 0,\n      heap[(offset + 4) | 0] | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_DOUBLE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushFloatDouble(\n      heap[(offset + 1) | 0] | 0,\n      heap[(offset + 2) | 0] | 0,\n      heap[(offset + 3) | 0] | 0,\n      heap[(offset + 4) | 0] | 0,\n      heap[(offset + 5) | 0] | 0,\n      heap[(offset + 6) | 0] | 0,\n      heap[(offset + 7) | 0] | 0,\n      heap[(offset + 8) | 0] | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function ERROR (octet) {\n    octet = octet | 0\n\n    return 1\n  }\n\n  function BREAK (octet) {\n    octet = octet | 0\n\n    pushBreak()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  // -- Jump Table\n\n  var jumpTable = [\n    // Integer 0x00..0x17 (0..23)\n    INT_P, // 0x00\n    INT_P, // 0x01\n    INT_P, // 0x02\n    INT_P, // 0x03\n    INT_P, // 0x04\n    INT_P, // 0x05\n    INT_P, // 0x06\n    INT_P, // 0x07\n    INT_P, // 0x08\n    INT_P, // 0x09\n    INT_P, // 0x0A\n    INT_P, // 0x0B\n    INT_P, // 0x0C\n    INT_P, // 0x0D\n    INT_P, // 0x0E\n    INT_P, // 0x0F\n    INT_P, // 0x10\n    INT_P, // 0x11\n    INT_P, // 0x12\n    INT_P, // 0x13\n    INT_P, // 0x14\n    INT_P, // 0x15\n    INT_P, // 0x16\n    INT_P, // 0x17\n    // Unsigned integer (one-byte uint8_t follows)\n    UINT_P_8, // 0x18\n    // Unsigned integer (two-byte uint16_t follows)\n    UINT_P_16, // 0x19\n    // Unsigned integer (four-byte uint32_t follows)\n    UINT_P_32, // 0x1a\n    // Unsigned integer (eight-byte uint64_t follows)\n    UINT_P_64, // 0x1b\n    ERROR, // 0x1c\n    ERROR, // 0x1d\n    ERROR, // 0x1e\n    ERROR, // 0x1f\n    // Negative integer -1-0x00..-1-0x17 (-1..-24)\n    INT_N, // 0x20\n    INT_N, // 0x21\n    INT_N, // 0x22\n    INT_N, // 0x23\n    INT_N, // 0x24\n    INT_N, // 0x25\n    INT_N, // 0x26\n    INT_N, // 0x27\n    INT_N, // 0x28\n    INT_N, // 0x29\n    INT_N, // 0x2A\n    INT_N, // 0x2B\n    INT_N, // 0x2C\n    INT_N, // 0x2D\n    INT_N, // 0x2E\n    INT_N, // 0x2F\n    INT_N, // 0x30\n    INT_N, // 0x31\n    INT_N, // 0x32\n    INT_N, // 0x33\n    INT_N, // 0x34\n    INT_N, // 0x35\n    INT_N, // 0x36\n    INT_N, // 0x37\n    // Negative integer -1-n (one-byte uint8_t for n follows)\n    UINT_N_8, // 0x38\n    // Negative integer -1-n (two-byte uint16_t for n follows)\n    UINT_N_16, // 0x39\n    // Negative integer -1-n (four-byte uint32_t for nfollows)\n    UINT_N_32, // 0x3a\n    // Negative integer -1-n (eight-byte uint64_t for n follows)\n    UINT_N_64, // 0x3b\n    ERROR, // 0x3c\n    ERROR, // 0x3d\n    ERROR, // 0x3e\n    ERROR, // 0x3f\n    // byte string (0x00..0x17 bytes follow)\n    BYTE_STRING, // 0x40\n    BYTE_STRING, // 0x41\n    BYTE_STRING, // 0x42\n    BYTE_STRING, // 0x43\n    BYTE_STRING, // 0x44\n    BYTE_STRING, // 0x45\n    BYTE_STRING, // 0x46\n    BYTE_STRING, // 0x47\n    BYTE_STRING, // 0x48\n    BYTE_STRING, // 0x49\n    BYTE_STRING, // 0x4A\n    BYTE_STRING, // 0x4B\n    BYTE_STRING, // 0x4C\n    BYTE_STRING, // 0x4D\n    BYTE_STRING, // 0x4E\n    BYTE_STRING, // 0x4F\n    BYTE_STRING, // 0x50\n    BYTE_STRING, // 0x51\n    BYTE_STRING, // 0x52\n    BYTE_STRING, // 0x53\n    BYTE_STRING, // 0x54\n    BYTE_STRING, // 0x55\n    BYTE_STRING, // 0x56\n    BYTE_STRING, // 0x57\n    // byte string (one-byte uint8_t for n, and then n bytes follow)\n    BYTE_STRING_8, // 0x58\n    // byte string (two-byte uint16_t for n, and then n bytes follow)\n    BYTE_STRING_16, // 0x59\n    // byte string (four-byte uint32_t for n, and then n bytes follow)\n    BYTE_STRING_32, // 0x5a\n    // byte string (eight-byte uint64_t for n, and then n bytes follow)\n    BYTE_STRING_64, // 0x5b\n    ERROR, // 0x5c\n    ERROR, // 0x5d\n    ERROR, // 0x5e\n    // byte string, byte strings follow, terminated by \"break\"\n    BYTE_STRING_BREAK, // 0x5f\n    // UTF-8 string (0x00..0x17 bytes follow)\n    UTF8_STRING, // 0x60\n    UTF8_STRING, // 0x61\n    UTF8_STRING, // 0x62\n    UTF8_STRING, // 0x63\n    UTF8_STRING, // 0x64\n    UTF8_STRING, // 0x65\n    UTF8_STRING, // 0x66\n    UTF8_STRING, // 0x67\n    UTF8_STRING, // 0x68\n    UTF8_STRING, // 0x69\n    UTF8_STRING, // 0x6A\n    UTF8_STRING, // 0x6B\n    UTF8_STRING, // 0x6C\n    UTF8_STRING, // 0x6D\n    UTF8_STRING, // 0x6E\n    UTF8_STRING, // 0x6F\n    UTF8_STRING, // 0x70\n    UTF8_STRING, // 0x71\n    UTF8_STRING, // 0x72\n    UTF8_STRING, // 0x73\n    UTF8_STRING, // 0x74\n    UTF8_STRING, // 0x75\n    UTF8_STRING, // 0x76\n    UTF8_STRING, // 0x77\n    // UTF-8 string (one-byte uint8_t for n, and then n bytes follow)\n    UTF8_STRING_8, // 0x78\n    // UTF-8 string (two-byte uint16_t for n, and then n bytes follow)\n    UTF8_STRING_16, // 0x79\n    // UTF-8 string (four-byte uint32_t for n, and then n bytes follow)\n    UTF8_STRING_32, // 0x7a\n    // UTF-8 string (eight-byte uint64_t for n, and then n bytes follow)\n    UTF8_STRING_64, // 0x7b\n    // UTF-8 string, UTF-8 strings follow, terminated by \"break\"\n    ERROR, // 0x7c\n    ERROR, // 0x7d\n    ERROR, // 0x7e\n    UTF8_STRING_BREAK, // 0x7f\n    // array (0x00..0x17 data items follow)\n    ARRAY, // 0x80\n    ARRAY, // 0x81\n    ARRAY, // 0x82\n    ARRAY, // 0x83\n    ARRAY, // 0x84\n    ARRAY, // 0x85\n    ARRAY, // 0x86\n    ARRAY, // 0x87\n    ARRAY, // 0x88\n    ARRAY, // 0x89\n    ARRAY, // 0x8A\n    ARRAY, // 0x8B\n    ARRAY, // 0x8C\n    ARRAY, // 0x8D\n    ARRAY, // 0x8E\n    ARRAY, // 0x8F\n    ARRAY, // 0x90\n    ARRAY, // 0x91\n    ARRAY, // 0x92\n    ARRAY, // 0x93\n    ARRAY, // 0x94\n    ARRAY, // 0x95\n    ARRAY, // 0x96\n    ARRAY, // 0x97\n    // array (one-byte uint8_t fo, and then n data items follow)\n    ARRAY_8, // 0x98\n    // array (two-byte uint16_t for n, and then n data items follow)\n    ARRAY_16, // 0x99\n    // array (four-byte uint32_t for n, and then n data items follow)\n    ARRAY_32, // 0x9a\n    // array (eight-byte uint64_t for n, and then n data items follow)\n    ARRAY_64, // 0x9b\n    // array, data items follow, terminated by \"break\"\n    ERROR, // 0x9c\n    ERROR, // 0x9d\n    ERROR, // 0x9e\n    ARRAY_BREAK, // 0x9f\n    // map (0x00..0x17 pairs of data items follow)\n    MAP, // 0xa0\n    MAP, // 0xa1\n    MAP, // 0xa2\n    MAP, // 0xa3\n    MAP, // 0xa4\n    MAP, // 0xa5\n    MAP, // 0xa6\n    MAP, // 0xa7\n    MAP, // 0xa8\n    MAP, // 0xa9\n    MAP, // 0xaA\n    MAP, // 0xaB\n    MAP, // 0xaC\n    MAP, // 0xaD\n    MAP, // 0xaE\n    MAP, // 0xaF\n    MAP, // 0xb0\n    MAP, // 0xb1\n    MAP, // 0xb2\n    MAP, // 0xb3\n    MAP, // 0xb4\n    MAP, // 0xb5\n    MAP, // 0xb6\n    MAP, // 0xb7\n    // map (one-byte uint8_t for n, and then n pairs of data items follow)\n    MAP_8, // 0xb8\n    // map (two-byte uint16_t for n, and then n pairs of data items follow)\n    MAP_16, // 0xb9\n    // map (four-byte uint32_t for n, and then n pairs of data items follow)\n    MAP_32, // 0xba\n    // map (eight-byte uint64_t for n, and then n pairs of data items follow)\n    MAP_64, // 0xbb\n    ERROR, // 0xbc\n    ERROR, // 0xbd\n    ERROR, // 0xbe\n    // map, pairs of data items follow, terminated by \"break\"\n    MAP_BREAK, // 0xbf\n    // Text-based date/time (data item follows; see Section 2.4.1)\n    TAG_KNOWN, // 0xc0\n    // Epoch-based date/time (data item follows; see Section 2.4.1)\n    TAG_KNOWN, // 0xc1\n    // Positive bignum (data item \"byte string\" follows)\n    TAG_KNOWN, // 0xc2\n    // Negative bignum (data item \"byte string\" follows)\n    TAG_KNOWN, // 0xc3\n    // Decimal Fraction (data item \"array\" follows; see Section 2.4.3)\n    TAG_KNOWN, // 0xc4\n    // Bigfloat (data item \"array\" follows; see Section 2.4.3)\n    TAG_KNOWN, // 0xc5\n    // (tagged item)\n    TAG_UNASSIGNED, // 0xc6\n    TAG_UNASSIGNED, // 0xc7\n    TAG_UNASSIGNED, // 0xc8\n    TAG_UNASSIGNED, // 0xc9\n    TAG_UNASSIGNED, // 0xca\n    TAG_UNASSIGNED, // 0xcb\n    TAG_UNASSIGNED, // 0xcc\n    TAG_UNASSIGNED, // 0xcd\n    TAG_UNASSIGNED, // 0xce\n    TAG_UNASSIGNED, // 0xcf\n    TAG_UNASSIGNED, // 0xd0\n    TAG_UNASSIGNED, // 0xd1\n    TAG_UNASSIGNED, // 0xd2\n    TAG_UNASSIGNED, // 0xd3\n    TAG_UNASSIGNED, // 0xd4\n    // Expected Conversion (data item follows; see Section 2.4.4.2)\n    TAG_UNASSIGNED, // 0xd5\n    TAG_UNASSIGNED, // 0xd6\n    TAG_UNASSIGNED, // 0xd7\n    // (more tagged items, 1/2/4/8 bytes and then a data item follow)\n    TAG_MORE_1, // 0xd8\n    TAG_MORE_2, // 0xd9\n    TAG_MORE_4, // 0xda\n    TAG_MORE_8, // 0xdb\n    ERROR, // 0xdc\n    ERROR, // 0xdd\n    ERROR, // 0xde\n    ERROR, // 0xdf\n    // (simple value)\n    SIMPLE_UNASSIGNED, // 0xe0\n    SIMPLE_UNASSIGNED, // 0xe1\n    SIMPLE_UNASSIGNED, // 0xe2\n    SIMPLE_UNASSIGNED, // 0xe3\n    SIMPLE_UNASSIGNED, // 0xe4\n    SIMPLE_UNASSIGNED, // 0xe5\n    SIMPLE_UNASSIGNED, // 0xe6\n    SIMPLE_UNASSIGNED, // 0xe7\n    SIMPLE_UNASSIGNED, // 0xe8\n    SIMPLE_UNASSIGNED, // 0xe9\n    SIMPLE_UNASSIGNED, // 0xea\n    SIMPLE_UNASSIGNED, // 0xeb\n    SIMPLE_UNASSIGNED, // 0xec\n    SIMPLE_UNASSIGNED, // 0xed\n    SIMPLE_UNASSIGNED, // 0xee\n    SIMPLE_UNASSIGNED, // 0xef\n    SIMPLE_UNASSIGNED, // 0xf0\n    SIMPLE_UNASSIGNED, // 0xf1\n    SIMPLE_UNASSIGNED, // 0xf2\n    SIMPLE_UNASSIGNED, // 0xf3\n    // False\n    SIMPLE_FALSE, // 0xf4\n    // True\n    SIMPLE_TRUE, // 0xf5\n    // Null\n    SIMPLE_NULL, // 0xf6\n    // Undefined\n    SIMPLE_UNDEFINED, // 0xf7\n    // (simple value, one byte follows)\n    SIMPLE_BYTE, // 0xf8\n    // Half-Precision Float (two-byte IEEE 754)\n    SIMPLE_FLOAT_HALF, // 0xf9\n    // Single-Precision Float (four-byte IEEE 754)\n    SIMPLE_FLOAT_SINGLE, // 0xfa\n    // Double-Precision Float (eight-byte IEEE 754)\n    SIMPLE_FLOAT_DOUBLE, // 0xfb\n    ERROR, // 0xfc\n    ERROR, // 0xfd\n    ERROR, // 0xfe\n    // \"break\" stop code\n    BREAK // 0xff\n  ]\n\n  // --\n\n  return {\n    parse: parse\n  }\n}\n"]},"metadata":{},"sourceType":"script"}