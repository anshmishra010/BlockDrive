{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar _require2 = require('iso-url'),\n    URL = _require2.URL;\n\nvar Bignumber = require('bignumber.js').BigNumber;\n\nvar utils = require('./utils');\n\nvar constants = require('./constants');\n\nvar MT = constants.MT;\nvar NUMBYTES = constants.NUMBYTES;\nvar SHIFT32 = constants.SHIFT32;\nvar SYMS = constants.SYMS;\nvar TAG = constants.TAG;\nvar HALF = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.TWO;\nvar FLOAT = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.FOUR;\nvar DOUBLE = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.EIGHT;\nvar TRUE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.TRUE;\nvar FALSE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.FALSE;\nvar UNDEFINED = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.UNDEFINED;\nvar NULL = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.NULL;\nvar MAXINT_BN = new Bignumber('0x20000000000000');\nvar BUF_NAN = Buffer.from('f97e00', 'hex');\nvar BUF_INF_NEG = Buffer.from('f9fc00', 'hex');\nvar BUF_INF_POS = Buffer.from('f97c00', 'hex');\n\nfunction toType(obj) {\n  // [object Type]\n  // --------8---1\n  return {}.toString.call(obj).slice(8, -1);\n}\n/**\n * Transform JavaScript values into CBOR bytes\n *\n */\n\n\nvar Encoder = /*#__PURE__*/function () {\n  /**\n   * @param {Object} [options={}]\n   * @param {function(Buffer)} options.stream\n   */\n  function Encoder(options) {\n    _classCallCheck(this, Encoder);\n\n    options = options || {};\n    this.streaming = typeof options.stream === 'function';\n    this.onData = options.stream;\n    this.semanticTypes = [[URL, this._pushUrl], [Bignumber, this._pushBigNumber]];\n    var addTypes = options.genTypes || [];\n    var len = addTypes.length;\n\n    for (var i = 0; i < len; i++) {\n      this.addSemanticType(addTypes[i][0], addTypes[i][1]);\n    }\n\n    this._reset();\n  }\n\n  _createClass(Encoder, [{\n    key: \"addSemanticType\",\n    value: function addSemanticType(type, fun) {\n      var len = this.semanticTypes.length;\n\n      for (var i = 0; i < len; i++) {\n        var typ = this.semanticTypes[i][0];\n\n        if (typ === type) {\n          var old = this.semanticTypes[i][1];\n          this.semanticTypes[i][1] = fun;\n          return old;\n        }\n      }\n\n      this.semanticTypes.push([type, fun]);\n      return null;\n    }\n  }, {\n    key: \"push\",\n    value: function push(val) {\n      if (!val) {\n        return true;\n      }\n\n      this.result[this.offset] = val;\n      this.resultMethod[this.offset] = 0;\n      this.resultLength[this.offset] = val.length;\n      this.offset++;\n\n      if (this.streaming) {\n        this.onData(this.finalize());\n      }\n\n      return true;\n    }\n  }, {\n    key: \"pushWrite\",\n    value: function pushWrite(val, method, len) {\n      this.result[this.offset] = val;\n      this.resultMethod[this.offset] = method;\n      this.resultLength[this.offset] = len;\n      this.offset++;\n\n      if (this.streaming) {\n        this.onData(this.finalize());\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_pushUInt8\",\n    value: function _pushUInt8(val) {\n      return this.pushWrite(val, 1, 1);\n    }\n  }, {\n    key: \"_pushUInt16BE\",\n    value: function _pushUInt16BE(val) {\n      return this.pushWrite(val, 2, 2);\n    }\n  }, {\n    key: \"_pushUInt32BE\",\n    value: function _pushUInt32BE(val) {\n      return this.pushWrite(val, 3, 4);\n    }\n  }, {\n    key: \"_pushDoubleBE\",\n    value: function _pushDoubleBE(val) {\n      return this.pushWrite(val, 4, 8);\n    }\n  }, {\n    key: \"_pushNaN\",\n    value: function _pushNaN() {\n      return this.push(BUF_NAN);\n    }\n  }, {\n    key: \"_pushInfinity\",\n    value: function _pushInfinity(obj) {\n      var half = obj < 0 ? BUF_INF_NEG : BUF_INF_POS;\n      return this.push(half);\n    }\n  }, {\n    key: \"_pushFloat\",\n    value: function _pushFloat(obj) {\n      var b2 = Buffer.allocUnsafe(2);\n\n      if (utils.writeHalf(b2, obj)) {\n        if (utils.parseHalf(b2) === obj) {\n          return this._pushUInt8(HALF) && this.push(b2);\n        }\n      }\n\n      var b4 = Buffer.allocUnsafe(4);\n      b4.writeFloatBE(obj, 0);\n\n      if (b4.readFloatBE(0) === obj) {\n        return this._pushUInt8(FLOAT) && this.push(b4);\n      }\n\n      return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj);\n    }\n  }, {\n    key: \"_pushInt\",\n    value: function _pushInt(obj, mt, orig) {\n      var m = mt << 5;\n\n      if (obj < 24) {\n        return this._pushUInt8(m | obj);\n      }\n\n      if (obj <= 0xff) {\n        return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj);\n      }\n\n      if (obj <= 0xffff) {\n        return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj);\n      }\n\n      if (obj <= 0xffffffff) {\n        return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj);\n      }\n\n      if (obj <= Number.MAX_SAFE_INTEGER) {\n        return this._pushUInt8(m | NUMBYTES.EIGHT) && this._pushUInt32BE(Math.floor(obj / SHIFT32)) && this._pushUInt32BE(obj % SHIFT32);\n      }\n\n      if (mt === MT.NEG_INT) {\n        return this._pushFloat(orig);\n      }\n\n      return this._pushFloat(obj);\n    }\n  }, {\n    key: \"_pushIntNum\",\n    value: function _pushIntNum(obj) {\n      if (obj < 0) {\n        return this._pushInt(-obj - 1, MT.NEG_INT, obj);\n      } else {\n        return this._pushInt(obj, MT.POS_INT);\n      }\n    }\n  }, {\n    key: \"_pushNumber\",\n    value: function _pushNumber(obj) {\n      switch (false) {\n        case obj === obj:\n          // eslint-disable-line\n          return this._pushNaN(obj);\n\n        case isFinite(obj):\n          return this._pushInfinity(obj);\n\n        case obj % 1 !== 0:\n          return this._pushIntNum(obj);\n\n        default:\n          return this._pushFloat(obj);\n      }\n    }\n  }, {\n    key: \"_pushString\",\n    value: function _pushString(obj) {\n      var len = Buffer.byteLength(obj, 'utf8');\n      return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len);\n    }\n  }, {\n    key: \"_pushBoolean\",\n    value: function _pushBoolean(obj) {\n      return this._pushUInt8(obj ? TRUE : FALSE);\n    }\n  }, {\n    key: \"_pushUndefined\",\n    value: function _pushUndefined(obj) {\n      return this._pushUInt8(UNDEFINED);\n    }\n  }, {\n    key: \"_pushArray\",\n    value: function _pushArray(gen, obj) {\n      var len = obj.length;\n\n      if (!gen._pushInt(len, MT.ARRAY)) {\n        return false;\n      }\n\n      for (var j = 0; j < len; j++) {\n        if (!gen.pushAny(obj[j])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_pushTag\",\n    value: function _pushTag(tag) {\n      return this._pushInt(tag, MT.TAG);\n    }\n  }, {\n    key: \"_pushDate\",\n    value: function _pushDate(gen, obj) {\n      // Round date, to get seconds since 1970-01-01 00:00:00 as defined in\n      // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is\n      // still allowed to encode fractions of seconds which can be achieved by\n      // changing overwriting the encode function for Date objects.\n      return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000));\n    }\n  }, {\n    key: \"_pushBuffer\",\n    value: function _pushBuffer(gen, obj) {\n      return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj);\n    }\n  }, {\n    key: \"_pushNoFilter\",\n    value: function _pushNoFilter(gen, obj) {\n      return gen._pushBuffer(gen, obj.slice());\n    }\n  }, {\n    key: \"_pushRegexp\",\n    value: function _pushRegexp(gen, obj) {\n      return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source);\n    }\n  }, {\n    key: \"_pushSet\",\n    value: function _pushSet(gen, obj) {\n      if (!gen._pushInt(obj.size, MT.ARRAY)) {\n        return false;\n      }\n\n      var _iterator = _createForOfIteratorHelper(obj),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var x = _step.value;\n\n          if (!gen.pushAny(x)) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_pushUrl\",\n    value: function _pushUrl(gen, obj) {\n      return gen._pushTag(TAG.URI) && gen.pushAny(obj.format());\n    }\n  }, {\n    key: \"_pushBigint\",\n    value: function _pushBigint(obj) {\n      var tag = TAG.POS_BIGINT;\n\n      if (obj.isNegative()) {\n        obj = obj.negated().minus(1);\n        tag = TAG.NEG_BIGINT;\n      }\n\n      var str = obj.toString(16);\n\n      if (str.length % 2) {\n        str = '0' + str;\n      }\n\n      var buf = Buffer.from(str, 'hex');\n      return this._pushTag(tag) && this._pushBuffer(this, buf);\n    }\n  }, {\n    key: \"_pushBigNumber\",\n    value: function _pushBigNumber(gen, obj) {\n      if (obj.isNaN()) {\n        return gen._pushNaN();\n      }\n\n      if (!obj.isFinite()) {\n        return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity);\n      }\n\n      if (obj.isInteger()) {\n        return gen._pushBigint(obj);\n      }\n\n      if (!(gen._pushTag(TAG.DECIMAL_FRAC) && gen._pushInt(2, MT.ARRAY))) {\n        return false;\n      }\n\n      var dec = obj.decimalPlaces();\n      var slide = obj.multipliedBy(new Bignumber(10).pow(dec));\n\n      if (!gen._pushIntNum(-dec)) {\n        return false;\n      }\n\n      if (slide.abs().isLessThan(MAXINT_BN)) {\n        return gen._pushIntNum(slide.toNumber());\n      } else {\n        return gen._pushBigint(slide);\n      }\n    }\n  }, {\n    key: \"_pushMap\",\n    value: function _pushMap(gen, obj) {\n      if (!gen._pushInt(obj.size, MT.MAP)) {\n        return false;\n      }\n\n      return this._pushRawMap(obj.size, Array.from(obj));\n    }\n  }, {\n    key: \"_pushObject\",\n    value: function _pushObject(obj) {\n      if (!obj) {\n        return this._pushUInt8(NULL);\n      }\n\n      var len = this.semanticTypes.length;\n\n      for (var i = 0; i < len; i++) {\n        if (obj instanceof this.semanticTypes[i][0]) {\n          return this.semanticTypes[i][1].call(obj, this, obj);\n        }\n      }\n\n      var f = obj.encodeCBOR;\n\n      if (typeof f === 'function') {\n        return f.call(obj, this);\n      }\n\n      var keys = Object.keys(obj);\n      var keyLength = keys.length;\n\n      if (!this._pushInt(keyLength, MT.MAP)) {\n        return false;\n      }\n\n      return this._pushRawMap(keyLength, keys.map(function (k) {\n        return [k, obj[k]];\n      }));\n    }\n  }, {\n    key: \"_pushRawMap\",\n    value: function _pushRawMap(len, map) {\n      // Sort keys for canoncialization\n      // 1. encode key\n      // 2. shorter key comes before longer key\n      // 3. same length keys are sorted with lower\n      //    byte value before higher\n      map = map.map(function (a) {\n        a[0] = Encoder.encode(a[0]);\n        return a;\n      }).sort(utils.keySorter);\n\n      for (var j = 0; j < len; j++) {\n        if (!this.push(map[j][0])) {\n          return false;\n        }\n\n        if (!this.pushAny(map[j][1])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /**\n     * Alias for `.pushAny`\n     *\n     * @param {*} obj\n     * @returns {boolean} true on success\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(obj) {\n      return this.pushAny(obj);\n    }\n    /**\n     * Push any supported type onto the encoded stream\n     *\n     * @param {any} obj\n     * @returns {boolean} true on success\n     */\n\n  }, {\n    key: \"pushAny\",\n    value: function pushAny(obj) {\n      var typ = toType(obj);\n\n      switch (typ) {\n        case 'Number':\n          return this._pushNumber(obj);\n\n        case 'String':\n          return this._pushString(obj);\n\n        case 'Boolean':\n          return this._pushBoolean(obj);\n\n        case 'Object':\n          return this._pushObject(obj);\n\n        case 'Array':\n          return this._pushArray(this, obj);\n\n        case 'Uint8Array':\n          return this._pushBuffer(this, Buffer.isBuffer(obj) ? obj : Buffer.from(obj));\n\n        case 'Null':\n          return this._pushUInt8(NULL);\n\n        case 'Undefined':\n          return this._pushUndefined(obj);\n\n        case 'Map':\n          return this._pushMap(this, obj);\n\n        case 'Set':\n          return this._pushSet(this, obj);\n\n        case 'URL':\n          return this._pushUrl(this, obj);\n\n        case 'BigNumber':\n          return this._pushBigNumber(this, obj);\n\n        case 'Date':\n          return this._pushDate(this, obj);\n\n        case 'RegExp':\n          return this._pushRegexp(this, obj);\n\n        case 'Symbol':\n          switch (obj) {\n            case SYMS.NULL:\n              return this._pushObject(null);\n\n            case SYMS.UNDEFINED:\n              return this._pushUndefined(undefined);\n            // TODO: Add pluggable support for other symbols\n\n            default:\n              throw new Error('Unknown symbol: ' + obj.toString());\n          }\n\n        default:\n          throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''));\n      }\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      if (this.offset === 0) {\n        return null;\n      }\n\n      var result = this.result;\n      var resultLength = this.resultLength;\n      var resultMethod = this.resultMethod;\n      var offset = this.offset; // Determine the size of the buffer\n\n      var size = 0;\n      var i = 0;\n\n      for (; i < offset; i++) {\n        size += resultLength[i];\n      }\n\n      var res = Buffer.allocUnsafe(size);\n      var index = 0;\n      var length = 0; // Write the content into the result buffer\n\n      for (i = 0; i < offset; i++) {\n        length = resultLength[i];\n\n        switch (resultMethod[i]) {\n          case 0:\n            result[i].copy(res, index);\n            break;\n\n          case 1:\n            res.writeUInt8(result[i], index, true);\n            break;\n\n          case 2:\n            res.writeUInt16BE(result[i], index, true);\n            break;\n\n          case 3:\n            res.writeUInt32BE(result[i], index, true);\n            break;\n\n          case 4:\n            res.writeDoubleBE(result[i], index, true);\n            break;\n\n          case 5:\n            res.write(result[i], index, length, 'utf8');\n            break;\n\n          default:\n            throw new Error('unkown method');\n        }\n\n        index += length;\n      }\n\n      var tmp = res;\n\n      this._reset();\n\n      return tmp;\n    }\n  }, {\n    key: \"_reset\",\n    value: function _reset() {\n      this.result = [];\n      this.resultMethod = [];\n      this.resultLength = [];\n      this.offset = 0;\n    }\n    /**\n     * Encode the given value\n     * @param {*} o\n     * @returns {Buffer}\n     */\n\n  }], [{\n    key: \"encode\",\n    value: function encode(o) {\n      var enc = new Encoder();\n      var ret = enc.pushAny(o);\n\n      if (!ret) {\n        throw new Error('Failed to encode input');\n      }\n\n      return enc.finalize();\n    }\n  }]);\n\n  return Encoder;\n}();\n\nmodule.exports = Encoder;","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/borc/src/encoder.js"],"names":["require","Buffer","URL","Bignumber","BigNumber","utils","constants","MT","NUMBYTES","SHIFT32","SYMS","TAG","HALF","SIMPLE_FLOAT","TWO","FLOAT","FOUR","DOUBLE","EIGHT","TRUE","SIMPLE","FALSE","UNDEFINED","NULL","MAXINT_BN","BUF_NAN","from","BUF_INF_NEG","BUF_INF_POS","toType","obj","toString","call","slice","Encoder","options","streaming","stream","onData","semanticTypes","_pushUrl","_pushBigNumber","addTypes","genTypes","len","length","i","addSemanticType","_reset","type","fun","typ","old","push","val","result","offset","resultMethod","resultLength","finalize","method","pushWrite","half","b2","allocUnsafe","writeHalf","parseHalf","_pushUInt8","b4","writeFloatBE","readFloatBE","_pushDoubleBE","mt","orig","m","ONE","_pushUInt16BE","_pushUInt32BE","Number","MAX_SAFE_INTEGER","Math","floor","NEG_INT","_pushFloat","_pushInt","POS_INT","_pushNaN","isFinite","_pushInfinity","_pushIntNum","byteLength","UTF8_STRING","gen","ARRAY","j","pushAny","tag","_pushTag","DATE_EPOCH","round","BYTE_STRING","_pushBuffer","REGEXP","source","size","x","URI","format","POS_BIGINT","isNegative","negated","minus","NEG_BIGINT","str","buf","isNaN","Infinity","isInteger","_pushBigint","DECIMAL_FRAC","dec","decimalPlaces","slide","multipliedBy","pow","abs","isLessThan","toNumber","MAP","_pushRawMap","Array","f","encodeCBOR","keys","Object","keyLength","map","k","a","encode","sort","keySorter","_pushNumber","_pushString","_pushBoolean","_pushObject","_pushArray","isBuffer","_pushUndefined","_pushMap","_pushSet","_pushDate","_pushRegexp","undefined","Error","res","index","copy","writeUInt8","writeUInt16BE","writeUInt32BE","writeDoubleBE","write","tmp","o","enc","ret","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst { URL } = require('iso-url')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst utils = require('./utils')\nconst constants = require('./constants')\nconst MT = constants.MT\nconst NUMBYTES = constants.NUMBYTES\nconst SHIFT32 = constants.SHIFT32\nconst SYMS = constants.SYMS\nconst TAG = constants.TAG\nconst HALF = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.TWO\nconst FLOAT = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.FOUR\nconst DOUBLE = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.EIGHT\nconst TRUE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.TRUE\nconst FALSE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.FALSE\nconst UNDEFINED = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.UNDEFINED\nconst NULL = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.NULL\n\nconst MAXINT_BN = new Bignumber('0x20000000000000')\nconst BUF_NAN = Buffer.from('f97e00', 'hex')\nconst BUF_INF_NEG = Buffer.from('f9fc00', 'hex')\nconst BUF_INF_POS = Buffer.from('f97c00', 'hex')\n\nfunction toType (obj) {\n  // [object Type]\n  // --------8---1\n  return ({}).toString.call(obj).slice(8, -1)\n}\n\n/**\n * Transform JavaScript values into CBOR bytes\n *\n */\nclass Encoder {\n  /**\n   * @param {Object} [options={}]\n   * @param {function(Buffer)} options.stream\n   */\n  constructor (options) {\n    options = options || {}\n\n    this.streaming = typeof options.stream === 'function'\n    this.onData = options.stream\n\n    this.semanticTypes = [\n      [URL, this._pushUrl],\n      [Bignumber, this._pushBigNumber]\n    ]\n\n    const addTypes = options.genTypes || []\n    const len = addTypes.length\n    for (let i = 0; i < len; i++) {\n      this.addSemanticType(\n        addTypes[i][0],\n        addTypes[i][1]\n      )\n    }\n\n    this._reset()\n  }\n\n  addSemanticType (type, fun) {\n    const len = this.semanticTypes.length\n    for (let i = 0; i < len; i++) {\n      const typ = this.semanticTypes[i][0]\n      if (typ === type) {\n        const old = this.semanticTypes[i][1]\n        this.semanticTypes[i][1] = fun\n        return old\n      }\n    }\n    this.semanticTypes.push([type, fun])\n    return null\n  }\n\n  push (val) {\n    if (!val) {\n      return true\n    }\n\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = 0\n    this.resultLength[this.offset] = val.length\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  pushWrite (val, method, len) {\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = method\n    this.resultLength[this.offset] = len\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  _pushUInt8 (val) {\n    return this.pushWrite(val, 1, 1)\n  }\n\n  _pushUInt16BE (val) {\n    return this.pushWrite(val, 2, 2)\n  }\n\n  _pushUInt32BE (val) {\n    return this.pushWrite(val, 3, 4)\n  }\n\n  _pushDoubleBE (val) {\n    return this.pushWrite(val, 4, 8)\n  }\n\n  _pushNaN () {\n    return this.push(BUF_NAN)\n  }\n\n  _pushInfinity (obj) {\n    const half = (obj < 0) ? BUF_INF_NEG : BUF_INF_POS\n    return this.push(half)\n  }\n\n  _pushFloat (obj) {\n    const b2 = Buffer.allocUnsafe(2)\n\n    if (utils.writeHalf(b2, obj)) {\n      if (utils.parseHalf(b2) === obj) {\n        return this._pushUInt8(HALF) && this.push(b2)\n      }\n    }\n\n    const b4 = Buffer.allocUnsafe(4)\n    b4.writeFloatBE(obj, 0)\n    if (b4.readFloatBE(0) === obj) {\n      return this._pushUInt8(FLOAT) && this.push(b4)\n    }\n\n    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj)\n  }\n\n  _pushInt (obj, mt, orig) {\n    const m = mt << 5\n    if (obj < 24) {\n      return this._pushUInt8(m | obj)\n    }\n\n    if (obj <= 0xff) {\n      return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj)\n    }\n\n    if (obj <= 0xffff) {\n      return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj)\n    }\n\n    if (obj <= 0xffffffff) {\n      return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj)\n    }\n\n    if (obj <= Number.MAX_SAFE_INTEGER) {\n      return this._pushUInt8(m | NUMBYTES.EIGHT) &&\n        this._pushUInt32BE(Math.floor(obj / SHIFT32)) &&\n        this._pushUInt32BE(obj % SHIFT32)\n    }\n\n    if (mt === MT.NEG_INT) {\n      return this._pushFloat(orig)\n    }\n\n    return this._pushFloat(obj)\n  }\n\n  _pushIntNum (obj) {\n    if (obj < 0) {\n      return this._pushInt(-obj - 1, MT.NEG_INT, obj)\n    } else {\n      return this._pushInt(obj, MT.POS_INT)\n    }\n  }\n\n  _pushNumber (obj) {\n    switch (false) {\n      case (obj === obj): // eslint-disable-line\n        return this._pushNaN(obj)\n      case isFinite(obj):\n        return this._pushInfinity(obj)\n      case ((obj % 1) !== 0):\n        return this._pushIntNum(obj)\n      default:\n        return this._pushFloat(obj)\n    }\n  }\n\n  _pushString (obj) {\n    const len = Buffer.byteLength(obj, 'utf8')\n    return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len)\n  }\n\n  _pushBoolean (obj) {\n    return this._pushUInt8(obj ? TRUE : FALSE)\n  }\n\n  _pushUndefined (obj) {\n    return this._pushUInt8(UNDEFINED)\n  }\n\n  _pushArray (gen, obj) {\n    const len = obj.length\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen.pushAny(obj[j])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushTag (tag) {\n    return this._pushInt(tag, MT.TAG)\n  }\n\n  _pushDate (gen, obj) {\n    // Round date, to get seconds since 1970-01-01 00:00:00 as defined in\n    // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is\n    // still allowed to encode fractions of seconds which can be achieved by\n    // changing overwriting the encode function for Date objects.\n    return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000))\n  }\n\n  _pushBuffer (gen, obj) {\n    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj)\n  }\n\n  _pushNoFilter (gen, obj) {\n    return gen._pushBuffer(gen, obj.slice())\n  }\n\n  _pushRegexp (gen, obj) {\n    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source)\n  }\n\n  _pushSet (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.ARRAY)) {\n      return false\n    }\n    for (const x of obj) {\n      if (!gen.pushAny(x)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushUrl (gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format())\n  }\n\n  _pushBigint (obj) {\n    let tag = TAG.POS_BIGINT\n    if (obj.isNegative()) {\n      obj = obj.negated().minus(1)\n      tag = TAG.NEG_BIGINT\n    }\n    let str = obj.toString(16)\n    if (str.length % 2) {\n      str = '0' + str\n    }\n    const buf = Buffer.from(str, 'hex')\n    return this._pushTag(tag) && this._pushBuffer(this, buf)\n  }\n\n  _pushBigNumber (gen, obj) {\n    if (obj.isNaN()) {\n      return gen._pushNaN()\n    }\n    if (!obj.isFinite()) {\n      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity)\n    }\n    if (obj.isInteger()) {\n      return gen._pushBigint(obj)\n    }\n    if (!(gen._pushTag(TAG.DECIMAL_FRAC) &&\n      gen._pushInt(2, MT.ARRAY))) {\n      return false\n    }\n\n    const dec = obj.decimalPlaces()\n    const slide = obj.multipliedBy(new Bignumber(10).pow(dec))\n    if (!gen._pushIntNum(-dec)) {\n      return false\n    }\n    if (slide.abs().isLessThan(MAXINT_BN)) {\n      return gen._pushIntNum(slide.toNumber())\n    } else {\n      return gen._pushBigint(slide)\n    }\n  }\n\n  _pushMap (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      obj.size,\n      Array.from(obj)\n    )\n  }\n\n  _pushObject (obj) {\n    if (!obj) {\n      return this._pushUInt8(NULL)\n    }\n\n    var len = this.semanticTypes.length\n    for (var i = 0; i < len; i++) {\n      if (obj instanceof this.semanticTypes[i][0]) {\n        return this.semanticTypes[i][1].call(obj, this, obj)\n      }\n    }\n\n    var f = obj.encodeCBOR\n    if (typeof f === 'function') {\n      return f.call(obj, this)\n    }\n\n    var keys = Object.keys(obj)\n    var keyLength = keys.length\n    if (!this._pushInt(keyLength, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      keyLength,\n      keys.map((k) => [k, obj[k]])\n    )\n  }\n\n  _pushRawMap (len, map) {\n    // Sort keys for canoncialization\n    // 1. encode key\n    // 2. shorter key comes before longer key\n    // 3. same length keys are sorted with lower\n    //    byte value before higher\n\n    map = map.map(function (a) {\n      a[0] = Encoder.encode(a[0])\n      return a\n    }).sort(utils.keySorter)\n\n    for (var j = 0; j < len; j++) {\n      if (!this.push(map[j][0])) {\n        return false\n      }\n\n      if (!this.pushAny(map[j][1])) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Alias for `.pushAny`\n   *\n   * @param {*} obj\n   * @returns {boolean} true on success\n   */\n  write (obj) {\n    return this.pushAny(obj)\n  }\n\n  /**\n   * Push any supported type onto the encoded stream\n   *\n   * @param {any} obj\n   * @returns {boolean} true on success\n   */\n  pushAny (obj) {\n    var typ = toType(obj)\n\n    switch (typ) {\n      case 'Number':\n        return this._pushNumber(obj)\n      case 'String':\n        return this._pushString(obj)\n      case 'Boolean':\n        return this._pushBoolean(obj)\n      case 'Object':\n        return this._pushObject(obj)\n      case 'Array':\n        return this._pushArray(this, obj)\n      case 'Uint8Array':\n        return this._pushBuffer(this, Buffer.isBuffer(obj) ? obj : Buffer.from(obj))\n      case 'Null':\n        return this._pushUInt8(NULL)\n      case 'Undefined':\n        return this._pushUndefined(obj)\n      case 'Map':\n        return this._pushMap(this, obj)\n      case 'Set':\n        return this._pushSet(this, obj)\n      case 'URL':\n        return this._pushUrl(this, obj)\n      case 'BigNumber':\n        return this._pushBigNumber(this, obj)\n      case 'Date':\n        return this._pushDate(this, obj)\n      case 'RegExp':\n        return this._pushRegexp(this, obj)\n      case 'Symbol':\n        switch (obj) {\n          case SYMS.NULL:\n            return this._pushObject(null)\n          case SYMS.UNDEFINED:\n            return this._pushUndefined(undefined)\n          // TODO: Add pluggable support for other symbols\n          default:\n            throw new Error('Unknown symbol: ' + obj.toString())\n        }\n      default:\n        throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''))\n    }\n  }\n\n  finalize () {\n    if (this.offset === 0) {\n      return null\n    }\n\n    var result = this.result\n    var resultLength = this.resultLength\n    var resultMethod = this.resultMethod\n    var offset = this.offset\n\n    // Determine the size of the buffer\n    var size = 0\n    var i = 0\n\n    for (; i < offset; i++) {\n      size += resultLength[i]\n    }\n\n    var res = Buffer.allocUnsafe(size)\n    var index = 0\n    var length = 0\n\n    // Write the content into the result buffer\n    for (i = 0; i < offset; i++) {\n      length = resultLength[i]\n\n      switch (resultMethod[i]) {\n        case 0:\n          result[i].copy(res, index)\n          break\n        case 1:\n          res.writeUInt8(result[i], index, true)\n          break\n        case 2:\n          res.writeUInt16BE(result[i], index, true)\n          break\n        case 3:\n          res.writeUInt32BE(result[i], index, true)\n          break\n        case 4:\n          res.writeDoubleBE(result[i], index, true)\n          break\n        case 5:\n          res.write(result[i], index, length, 'utf8')\n          break\n        default:\n          throw new Error('unkown method')\n      }\n\n      index += length\n    }\n\n    var tmp = res\n\n    this._reset()\n\n    return tmp\n  }\n\n  _reset () {\n    this.result = []\n    this.resultMethod = []\n    this.resultLength = []\n    this.offset = 0\n  }\n\n  /**\n   * Encode the given value\n   * @param {*} o\n   * @returns {Buffer}\n   */\n  static encode (o) {\n    const enc = new Encoder()\n    const ret = enc.pushAny(o)\n    if (!ret) {\n      throw new Error('Failed to encode input')\n    }\n\n    return enc.finalize()\n  }\n}\n\nmodule.exports = Encoder\n"]},"metadata":{},"sourceType":"script"}