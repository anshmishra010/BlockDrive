{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _get = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar Decoder = require('./decoder');\n\nvar utils = require('./utils');\n/**\n * Output the diagnostic format from a stream of CBOR bytes.\n *\n */\n\n\nvar Diagnose = /*#__PURE__*/function (_Decoder) {\n  _inherits(Diagnose, _Decoder);\n\n  var _super = _createSuper(Diagnose);\n\n  function Diagnose() {\n    _classCallCheck(this, Diagnose);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Diagnose, [{\n    key: \"createTag\",\n    value: function createTag(tagNumber, value) {\n      return \"\".concat(tagNumber, \"(\").concat(value, \")\");\n    }\n  }, {\n    key: \"createInt\",\n    value: function createInt(val) {\n      return _get(_getPrototypeOf(Diagnose.prototype), \"createInt\", this).call(this, val).toString();\n    }\n  }, {\n    key: \"createInt32\",\n    value: function createInt32(f, g) {\n      return _get(_getPrototypeOf(Diagnose.prototype), \"createInt32\", this).call(this, f, g).toString();\n    }\n  }, {\n    key: \"createInt64\",\n    value: function createInt64(f1, f2, g1, g2) {\n      return _get(_getPrototypeOf(Diagnose.prototype), \"createInt64\", this).call(this, f1, f2, g1, g2).toString();\n    }\n  }, {\n    key: \"createInt32Neg\",\n    value: function createInt32Neg(f, g) {\n      return _get(_getPrototypeOf(Diagnose.prototype), \"createInt32Neg\", this).call(this, f, g).toString();\n    }\n  }, {\n    key: \"createInt64Neg\",\n    value: function createInt64Neg(f1, f2, g1, g2) {\n      return _get(_getPrototypeOf(Diagnose.prototype), \"createInt64Neg\", this).call(this, f1, f2, g1, g2).toString();\n    }\n  }, {\n    key: \"createTrue\",\n    value: function createTrue() {\n      return 'true';\n    }\n  }, {\n    key: \"createFalse\",\n    value: function createFalse() {\n      return 'false';\n    }\n  }, {\n    key: \"createFloat\",\n    value: function createFloat(val) {\n      var fl = _get(_getPrototypeOf(Diagnose.prototype), \"createFloat\", this).call(this, val);\n\n      if (utils.isNegativeZero(val)) {\n        return '-0_1';\n      }\n\n      return \"\".concat(fl, \"_1\");\n    }\n  }, {\n    key: \"createFloatSingle\",\n    value: function createFloatSingle(a, b, c, d) {\n      var fl = _get(_getPrototypeOf(Diagnose.prototype), \"createFloatSingle\", this).call(this, a, b, c, d);\n\n      return \"\".concat(fl, \"_2\");\n    }\n  }, {\n    key: \"createFloatDouble\",\n    value: function createFloatDouble(a, b, c, d, e, f, g, h) {\n      var fl = _get(_getPrototypeOf(Diagnose.prototype), \"createFloatDouble\", this).call(this, a, b, c, d, e, f, g, h);\n\n      return \"\".concat(fl, \"_3\");\n    }\n  }, {\n    key: \"createByteString\",\n    value: function createByteString(raw, len) {\n      var val = raw.join(', ');\n\n      if (len === -1) {\n        return \"(_ \".concat(val, \")\");\n      }\n\n      return \"h'\".concat(val);\n    }\n  }, {\n    key: \"createByteStringFromHeap\",\n    value: function createByteStringFromHeap(start, end) {\n      var val = Buffer.from(_get(_getPrototypeOf(Diagnose.prototype), \"createByteStringFromHeap\", this).call(this, start, end)).toString('hex');\n      return \"h'\".concat(val, \"'\");\n    }\n  }, {\n    key: \"createInfinity\",\n    value: function createInfinity() {\n      return 'Infinity_1';\n    }\n  }, {\n    key: \"createInfinityNeg\",\n    value: function createInfinityNeg() {\n      return '-Infinity_1';\n    }\n  }, {\n    key: \"createNaN\",\n    value: function createNaN() {\n      return 'NaN_1';\n    }\n  }, {\n    key: \"createNaNNeg\",\n    value: function createNaNNeg() {\n      return '-NaN_1';\n    }\n  }, {\n    key: \"createNull\",\n    value: function createNull() {\n      return 'null';\n    }\n  }, {\n    key: \"createUndefined\",\n    value: function createUndefined() {\n      return 'undefined';\n    }\n  }, {\n    key: \"createSimpleUnassigned\",\n    value: function createSimpleUnassigned(val) {\n      return \"simple(\".concat(val, \")\");\n    }\n  }, {\n    key: \"createArray\",\n    value: function createArray(arr, len) {\n      var val = _get(_getPrototypeOf(Diagnose.prototype), \"createArray\", this).call(this, arr, len);\n\n      if (len === -1) {\n        // indefinite\n        return \"[_ \".concat(val.join(', '), \"]\");\n      }\n\n      return \"[\".concat(val.join(', '), \"]\");\n    }\n  }, {\n    key: \"createMap\",\n    value: function createMap(map, len) {\n      var val = _get(_getPrototypeOf(Diagnose.prototype), \"createMap\", this).call(this, map);\n\n      var list = Array.from(val.keys()).reduce(collectObject(val), '');\n\n      if (len === -1) {\n        return \"{_ \".concat(list, \"}\");\n      }\n\n      return \"{\".concat(list, \"}\");\n    }\n  }, {\n    key: \"createObject\",\n    value: function createObject(obj, len) {\n      var val = _get(_getPrototypeOf(Diagnose.prototype), \"createObject\", this).call(this, obj);\n\n      var map = Object.keys(val).reduce(collectObject(val), '');\n\n      if (len === -1) {\n        return \"{_ \".concat(map, \"}\");\n      }\n\n      return \"{\".concat(map, \"}\");\n    }\n  }, {\n    key: \"createUtf8String\",\n    value: function createUtf8String(raw, len) {\n      var val = raw.join(', ');\n\n      if (len === -1) {\n        return \"(_ \".concat(val, \")\");\n      }\n\n      return \"\\\"\".concat(val, \"\\\"\");\n    }\n  }, {\n    key: \"createUtf8StringFromHeap\",\n    value: function createUtf8StringFromHeap(start, end) {\n      var val = Buffer.from(_get(_getPrototypeOf(Diagnose.prototype), \"createUtf8StringFromHeap\", this).call(this, start, end)).toString('utf8');\n      return \"\\\"\".concat(val, \"\\\"\");\n    }\n  }], [{\n    key: \"diagnose\",\n    value: function diagnose(input, enc) {\n      if (typeof input === 'string') {\n        input = Buffer.from(input, enc || 'hex');\n      }\n\n      var dec = new Diagnose();\n      return dec.decodeFirst(input);\n    }\n  }]);\n\n  return Diagnose;\n}(Decoder);\n\nmodule.exports = Diagnose;\n\nfunction collectObject(val) {\n  return function (acc, key) {\n    if (acc) {\n      return \"\".concat(acc, \", \").concat(key, \": \").concat(val[key]);\n    }\n\n    return \"\".concat(key, \": \").concat(val[key]);\n  };\n}","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/borc/src/diagnose.js"],"names":["require","Buffer","Decoder","utils","Diagnose","tagNumber","value","val","toString","f","g","f1","f2","g1","g2","fl","isNegativeZero","a","b","c","d","e","h","raw","len","join","start","end","from","arr","map","list","Array","keys","reduce","collectObject","obj","Object","input","enc","dec","decodeFirst","module","exports","acc","key"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst Decoder = require('./decoder')\nconst utils = require('./utils')\n\n/**\n * Output the diagnostic format from a stream of CBOR bytes.\n *\n */\nclass Diagnose extends Decoder {\n  createTag (tagNumber, value) {\n    return `${tagNumber}(${value})`\n  }\n\n  createInt (val) {\n    return super.createInt(val).toString()\n  }\n\n  createInt32 (f, g) {\n    return super.createInt32(f, g).toString()\n  }\n\n  createInt64 (f1, f2, g1, g2) {\n    return super.createInt64(f1, f2, g1, g2).toString()\n  }\n\n  createInt32Neg (f, g) {\n    return super.createInt32Neg(f, g).toString()\n  }\n\n  createInt64Neg (f1, f2, g1, g2) {\n    return super.createInt64Neg(f1, f2, g1, g2).toString()\n  }\n\n  createTrue () {\n    return 'true'\n  }\n\n  createFalse () {\n    return 'false'\n  }\n\n  createFloat (val) {\n    const fl = super.createFloat(val)\n    if (utils.isNegativeZero(val)) {\n      return '-0_1'\n    }\n\n    return `${fl}_1`\n  }\n\n  createFloatSingle (a, b, c, d) {\n    const fl = super.createFloatSingle(a, b, c, d)\n    return `${fl}_2`\n  }\n\n  createFloatDouble (a, b, c, d, e, f, g, h) {\n    const fl = super.createFloatDouble(a, b, c, d, e, f, g, h)\n    return `${fl}_3`\n  }\n\n  createByteString (raw, len) {\n    const val = raw.join(', ')\n\n    if (len === -1) {\n      return `(_ ${val})`\n    }\n    return `h'${val}`\n  }\n\n  createByteStringFromHeap (start, end) {\n    const val = (Buffer.from(\n      super.createByteStringFromHeap(start, end)\n    )).toString('hex')\n\n    return `h'${val}'`\n  }\n\n  createInfinity () {\n    return 'Infinity_1'\n  }\n\n  createInfinityNeg () {\n    return '-Infinity_1'\n  }\n\n  createNaN () {\n    return 'NaN_1'\n  }\n\n  createNaNNeg () {\n    return '-NaN_1'\n  }\n\n  createNull () {\n    return 'null'\n  }\n\n  createUndefined () {\n    return 'undefined'\n  }\n\n  createSimpleUnassigned (val) {\n    return `simple(${val})`\n  }\n\n  createArray (arr, len) {\n    const val = super.createArray(arr, len)\n\n    if (len === -1) {\n      // indefinite\n      return `[_ ${val.join(', ')}]`\n    }\n\n    return `[${val.join(', ')}]`\n  }\n\n  createMap (map, len) {\n    const val = super.createMap(map)\n    const list = Array.from(val.keys())\n      .reduce(collectObject(val), '')\n\n    if (len === -1) {\n      return `{_ ${list}}`\n    }\n\n    return `{${list}}`\n  }\n\n  createObject (obj, len) {\n    const val = super.createObject(obj)\n    const map = Object.keys(val)\n      .reduce(collectObject(val), '')\n\n    if (len === -1) {\n      return `{_ ${map}}`\n    }\n\n    return `{${map}}`\n  }\n\n  createUtf8String (raw, len) {\n    const val = raw.join(', ')\n\n    if (len === -1) {\n      return `(_ ${val})`\n    }\n\n    return `\"${val}\"`\n  }\n\n  createUtf8StringFromHeap (start, end) {\n    const val = (Buffer.from(\n      super.createUtf8StringFromHeap(start, end)\n    )).toString('utf8')\n\n    return `\"${val}\"`\n  }\n\n  static diagnose (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Diagnose()\n    return dec.decodeFirst(input)\n  }\n}\n\nmodule.exports = Diagnose\n\nfunction collectObject (val) {\n  return (acc, key) => {\n    if (acc) {\n      return `${acc}, ${key}: ${val[key]}`\n    }\n    return `${key}: ${val[key]}`\n  }\n}\n"]},"metadata":{},"sourceType":"script"}