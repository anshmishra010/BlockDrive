{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar multibase = require('multibase');\n\nvar CID = require('cids');\n\nmodule.exports = function (send) {\n  return promisify(function (args, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.cidBase) {\n      opts['cid-base'] = opts.cidBase;\n      delete opts.cidBase;\n    }\n\n    var transform = function transform(res, callback) {\n      if (!opts['cid-base']) {\n        return callback(null, res.Path);\n      } // FIXME: remove when go-ipfs supports ?cid-base for /api/v0/resolve\n      // https://github.com/ipfs/go-ipfs/pull/5777#issuecomment-439838555\n\n\n      var parts = res.Path.split('/'); // ['', 'ipfs', 'QmHash', ...]\n\n      if (multibase.isEncoded(parts[2]) !== opts['cid-base']) {\n        try {\n          var cid = new CID(parts[2]);\n\n          if (cid.version === 0 && opts['cid-base'] !== 'base58btc') {\n            cid = cid.toV1();\n          }\n\n          parts[2] = cid.toBaseEncodedString(opts['cid-base']);\n          res.Path = parts.join('/');\n        } catch (err) {\n          return callback(err);\n        }\n      }\n\n      callback(null, res.Path);\n    };\n\n    send.andTransform({\n      path: 'resolve',\n      args: args,\n      qs: opts\n    }, transform, callback);\n  });\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/resolve.js"],"names":["promisify","require","multibase","CID","module","exports","send","args","opts","callback","cidBase","transform","res","Path","parts","split","isEncoded","cid","version","toV1","toBaseEncodedString","join","err","andTransform","path","qs"],"mappings":"AAAA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAME,GAAG,GAAGF,OAAO,CAAC,MAAD,CAAnB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,SAAON,SAAS,CAAC,UAACO,IAAD,EAAOC,IAAP,EAAaC,QAAb,EAA0B;AACzC,QAAI,OAAQD,IAAR,KAAkB,UAAtB,EAAkC;AAChCC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAEDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AAEA,QAAIA,IAAI,CAACE,OAAT,EAAkB;AAChBF,MAAAA,IAAI,CAAC,UAAD,CAAJ,GAAmBA,IAAI,CAACE,OAAxB;AACA,aAAOF,IAAI,CAACE,OAAZ;AACD;;AAED,QAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAMH,QAAN,EAAmB;AACnC,UAAI,CAACD,IAAI,CAAC,UAAD,CAAT,EAAuB;AACrB,eAAOC,QAAQ,CAAC,IAAD,EAAOG,GAAG,CAACC,IAAX,CAAf;AACD,OAHkC,CAKnC;AACA;;;AACA,UAAMC,KAAK,GAAGF,GAAG,CAACC,IAAJ,CAASE,KAAT,CAAe,GAAf,CAAd,CAPmC,CAOD;;AAElC,UAAIb,SAAS,CAACc,SAAV,CAAoBF,KAAK,CAAC,CAAD,CAAzB,MAAkCN,IAAI,CAAC,UAAD,CAA1C,EAAwD;AACtD,YAAI;AACF,cAAIS,GAAG,GAAG,IAAId,GAAJ,CAAQW,KAAK,CAAC,CAAD,CAAb,CAAV;;AAEA,cAAIG,GAAG,CAACC,OAAJ,KAAgB,CAAhB,IAAqBV,IAAI,CAAC,UAAD,CAAJ,KAAqB,WAA9C,EAA2D;AACzDS,YAAAA,GAAG,GAAGA,GAAG,CAACE,IAAJ,EAAN;AACD;;AAEDL,UAAAA,KAAK,CAAC,CAAD,CAAL,GAAWG,GAAG,CAACG,mBAAJ,CAAwBZ,IAAI,CAAC,UAAD,CAA5B,CAAX;AACAI,UAAAA,GAAG,CAACC,IAAJ,GAAWC,KAAK,CAACO,IAAN,CAAW,GAAX,CAAX;AACD,SATD,CASE,OAAOC,GAAP,EAAY;AACZ,iBAAOb,QAAQ,CAACa,GAAD,CAAf;AACD;AACF;;AAEDb,MAAAA,QAAQ,CAAC,IAAD,EAAOG,GAAG,CAACC,IAAX,CAAR;AACD,KAzBD;;AA2BAP,IAAAA,IAAI,CAACiB,YAAL,CAAkB;AAChBC,MAAAA,IAAI,EAAE,SADU;AAEhBjB,MAAAA,IAAI,EAAEA,IAFU;AAGhBkB,MAAAA,EAAE,EAAEjB;AAHY,KAAlB,EAIGG,SAJH,EAIcF,QAJd;AAKD,GA7Ce,CAAhB;AA8CD,CA/CD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst multibase = require('multibase')\nconst CID = require('cids')\n\nmodule.exports = (send) => {\n  return promisify((args, opts, callback) => {\n    if (typeof (opts) === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    opts = opts || {}\n\n    if (opts.cidBase) {\n      opts['cid-base'] = opts.cidBase\n      delete opts.cidBase\n    }\n\n    const transform = (res, callback) => {\n      if (!opts['cid-base']) {\n        return callback(null, res.Path)\n      }\n\n      // FIXME: remove when go-ipfs supports ?cid-base for /api/v0/resolve\n      // https://github.com/ipfs/go-ipfs/pull/5777#issuecomment-439838555\n      const parts = res.Path.split('/') // ['', 'ipfs', 'QmHash', ...]\n\n      if (multibase.isEncoded(parts[2]) !== opts['cid-base']) {\n        try {\n          let cid = new CID(parts[2])\n\n          if (cid.version === 0 && opts['cid-base'] !== 'base58btc') {\n            cid = cid.toV1()\n          }\n\n          parts[2] = cid.toBaseEncodedString(opts['cid-base'])\n          res.Path = parts.join('/')\n        } catch (err) {\n          return callback(err)\n        }\n      }\n\n      callback(null, res.Path)\n    }\n\n    send.andTransform({\n      path: 'resolve',\n      args: args,\n      qs: opts\n    }, transform, callback)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}