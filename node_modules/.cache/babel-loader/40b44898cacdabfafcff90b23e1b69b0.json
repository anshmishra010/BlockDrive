{"ast":null,"code":"module.exports = function (sch) {\n  var noComments = function noComments(line) {\n    var i = line.indexOf('//');\n    return i > -1 ? line.slice(0, i) : line;\n  };\n\n  var noMultilineComments = function noMultilineComments() {\n    var inside = false;\n    return function (token) {\n      if (token === '/*') {\n        inside = true;\n        return false;\n      }\n\n      if (token === '*/') {\n        inside = false;\n        return false;\n      }\n\n      return !inside;\n    };\n  };\n\n  var trim = function trim(line) {\n    return line.trim();\n  };\n\n  return sch.replace(/([;,{}()=:[\\]<>]|\\/\\*|\\*\\/)/g, ' $1 ').split(/\\n/).map(trim).filter(Boolean).map(noComments).map(trim).filter(Boolean).join('\\n').split(/\\s+|\\n+/gm).filter(noMultilineComments());\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/protocol-buffers-schema/tokenize.js"],"names":["module","exports","sch","noComments","line","i","indexOf","slice","noMultilineComments","inside","token","trim","replace","split","map","filter","Boolean","join"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAC9B,MAAIC,UAAU,GAAG,SAAbA,UAAa,CAAUC,IAAV,EAAgB;AAC/B,QAAIC,CAAC,GAAGD,IAAI,CAACE,OAAL,CAAa,IAAb,CAAR;AACA,WAAOD,CAAC,GAAG,CAAC,CAAL,GAASD,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcF,CAAd,CAAT,GAA4BD,IAAnC;AACD,GAHD;;AAKA,MAAII,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAY;AACpC,QAAIC,MAAM,GAAG,KAAb;AACA,WAAO,UAAUC,KAAV,EAAiB;AACtB,UAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBD,QAAAA,MAAM,GAAG,IAAT;AACA,eAAO,KAAP;AACD;;AACD,UAAIC,KAAK,KAAK,IAAd,EAAoB;AAClBD,QAAAA,MAAM,GAAG,KAAT;AACA,eAAO,KAAP;AACD;;AACD,aAAO,CAACA,MAAR;AACD,KAVD;AAWD,GAbD;;AAeA,MAAIE,IAAI,GAAG,SAAPA,IAAO,CAAUP,IAAV,EAAgB;AACzB,WAAOA,IAAI,CAACO,IAAL,EAAP;AACD,GAFD;;AAIA,SAAOT,GAAG,CACPU,OADI,CACI,8BADJ,EACoC,MADpC,EAEJC,KAFI,CAEE,IAFF,EAGJC,GAHI,CAGAH,IAHA,EAIJI,MAJI,CAIGC,OAJH,EAKJF,GALI,CAKAX,UALA,EAMJW,GANI,CAMAH,IANA,EAOJI,MAPI,CAOGC,OAPH,EAQJC,IARI,CAQC,IARD,EASJJ,KATI,CASE,WATF,EAUJE,MAVI,CAUGP,mBAAmB,EAVtB,CAAP;AAWD,CApCD","sourcesContent":["module.exports = function (sch) {\n  var noComments = function (line) {\n    var i = line.indexOf('//')\n    return i > -1 ? line.slice(0, i) : line\n  }\n\n  var noMultilineComments = function () {\n    var inside = false\n    return function (token) {\n      if (token === '/*') {\n        inside = true\n        return false\n      }\n      if (token === '*/') {\n        inside = false\n        return false\n      }\n      return !inside\n    }\n  }\n\n  var trim = function (line) {\n    return line.trim()\n  }\n\n  return sch\n    .replace(/([;,{}()=:[\\]<>]|\\/\\*|\\*\\/)/g, ' $1 ')\n    .split(/\\n/)\n    .map(trim)\n    .filter(Boolean)\n    .map(noComments)\n    .map(trim)\n    .filter(Boolean)\n    .join('\\n')\n    .split(/\\s+|\\n+/gm)\n    .filter(noMultilineComments())\n}\n"]},"metadata":{},"sourceType":"script"}