{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar pump = require('pump');\n\nvar tar = require('tar-stream');\n\nvar ReadableStream = require('readable-stream').Readable;\n\nvar ObjectsStreams = /*#__PURE__*/function (_ReadableStream) {\n  _inherits(ObjectsStreams, _ReadableStream);\n\n  var _super = _createSuper(ObjectsStreams);\n\n  function ObjectsStreams(options) {\n    _classCallCheck(this, ObjectsStreams);\n\n    var opts = Object.assign(options || {}, {\n      objectMode: true\n    });\n    return _super.call(this, opts);\n  }\n\n  _createClass(ObjectsStreams, [{\n    key: \"_read\",\n    value: function _read() {}\n  }]);\n\n  return ObjectsStreams;\n}(ReadableStream);\n/*\n  Transform a tar stream into a stream of objects:\n\n  Output format:\n  { path: 'string', content: Stream<Readable> }\n*/\n\n\nvar TarStreamToObjects = function TarStreamToObjects(inputStream, callback) {\n  var outputStream = new ObjectsStreams();\n  var extractStream = tar.extract();\n  extractStream.on('entry', function (header, stream, next) {\n    stream.on('end', next);\n\n    if (header.type !== 'directory') {\n      outputStream.push({\n        path: header.name,\n        content: stream\n      });\n    } else {\n      outputStream.push({\n        path: header.name\n      });\n      stream.resume();\n    }\n  }).on('finish', function () {\n    return outputStream.push(null);\n  });\n  pump(inputStream, extractStream);\n  callback(null, outputStream);\n};\n\nmodule.exports = TarStreamToObjects;","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/utils/tar-stream-to-objects.js"],"names":["pump","require","tar","ReadableStream","Readable","ObjectsStreams","options","opts","Object","assign","objectMode","TarStreamToObjects","inputStream","callback","outputStream","extractStream","extract","on","header","stream","next","type","push","path","name","content","resume","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,YAAD,CAAnB;;AACA,IAAME,cAAc,GAAGF,OAAO,CAAC,iBAAD,CAAP,CAA2BG,QAAlD;;IAEMC,c;;;;;AACJ,0BAAaC,OAAb,EAAsB;AAAA;;AACpB,QAAMC,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAcH,OAAO,IAAI,EAAzB,EAA6B;AAAEI,MAAAA,UAAU,EAAE;AAAd,KAA7B,CAAb;AADoB,6BAEdH,IAFc;AAGrB;;;;4BAEQ,CAAE;;;;EANgBJ,c;AAS7B;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,WAAD,EAAcC,QAAd,EAA2B;AACpD,MAAIC,YAAY,GAAG,IAAIT,cAAJ,EAAnB;AACA,MAAIU,aAAa,GAAGb,GAAG,CAACc,OAAJ,EAApB;AAEAD,EAAAA,aAAa,CACVE,EADH,CACM,OADN,EACe,UAACC,MAAD,EAASC,MAAT,EAAiBC,IAAjB,EAA0B;AACrCD,IAAAA,MAAM,CAACF,EAAP,CAAU,KAAV,EAAiBG,IAAjB;;AAEA,QAAIF,MAAM,CAACG,IAAP,KAAgB,WAApB,EAAiC;AAC/BP,MAAAA,YAAY,CAACQ,IAAb,CAAkB;AAChBC,QAAAA,IAAI,EAAEL,MAAM,CAACM,IADG;AAEhBC,QAAAA,OAAO,EAAEN;AAFO,OAAlB;AAID,KALD,MAKO;AACLL,MAAAA,YAAY,CAACQ,IAAb,CAAkB;AAChBC,QAAAA,IAAI,EAAEL,MAAM,CAACM;AADG,OAAlB;AAGAL,MAAAA,MAAM,CAACO,MAAP;AACD;AACF,GAfH,EAgBGT,EAhBH,CAgBM,QAhBN,EAgBgB;AAAA,WAAMH,YAAY,CAACQ,IAAb,CAAkB,IAAlB,CAAN;AAAA,GAhBhB;AAkBAtB,EAAAA,IAAI,CAACY,WAAD,EAAcG,aAAd,CAAJ;AACAF,EAAAA,QAAQ,CAAC,IAAD,EAAOC,YAAP,CAAR;AACD,CAxBD;;AA0BAa,MAAM,CAACC,OAAP,GAAiBjB,kBAAjB","sourcesContent":["'use strict'\n\nconst pump = require('pump')\nconst tar = require('tar-stream')\nconst ReadableStream = require('readable-stream').Readable\n\nclass ObjectsStreams extends ReadableStream {\n  constructor (options) {\n    const opts = Object.assign(options || {}, { objectMode: true })\n    super(opts)\n  }\n\n  _read () {}\n}\n\n/*\n  Transform a tar stream into a stream of objects:\n\n  Output format:\n  { path: 'string', content: Stream<Readable> }\n*/\nconst TarStreamToObjects = (inputStream, callback) => {\n  let outputStream = new ObjectsStreams()\n  let extractStream = tar.extract()\n\n  extractStream\n    .on('entry', (header, stream, next) => {\n      stream.on('end', next)\n\n      if (header.type !== 'directory') {\n        outputStream.push({\n          path: header.name,\n          content: stream\n        })\n      } else {\n        outputStream.push({\n          path: header.name\n        })\n        stream.resume()\n      }\n    })\n    .on('finish', () => outputStream.push(null))\n\n  pump(inputStream, extractStream)\n  callback(null, outputStream)\n}\n\nmodule.exports = TarStreamToObjects\n"]},"metadata":{},"sourceType":"script"}