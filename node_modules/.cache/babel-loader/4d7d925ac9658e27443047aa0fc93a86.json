{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar Block = require('ipfs-block');\n\nvar CID = require('cids');\n\nvar multihash = require('multihashes');\n\nvar SendOneFile = require('../utils/send-one-file');\n\nmodule.exports = function (send) {\n  var sendOneFile = SendOneFile(send, 'block/put');\n  return promisify(function (block, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n\n    if (Array.isArray(block)) {\n      return callback(new Error('block.put accepts only one block'));\n    }\n\n    if (Buffer.isBuffer(block)) {\n      block = {\n        data: block\n      };\n    }\n\n    if (!block || !block.data) {\n      return callback(new Error('invalid block arg'));\n    }\n\n    var qs = {};\n\n    if (block.cid || options.cid) {\n      var cid;\n\n      try {\n        cid = new CID(block.cid || options.cid);\n      } catch (err) {\n        return callback(err);\n      }\n\n      var _multihash$decode = multihash.decode(cid.multihash),\n          name = _multihash$decode.name,\n          length = _multihash$decode.length;\n\n      qs.format = cid.codec;\n      qs.mhtype = name;\n      qs.mhlen = length;\n      qs.version = cid.version;\n    } else {\n      if (options.format) qs.format = options.format;\n      if (options.mhtype) qs.mhtype = options.mhtype;\n      if (options.mhlen) qs.mhlen = options.mhlen;\n      if (options.version != null) qs.version = options.version;\n    }\n\n    sendOneFile(block.data, {\n      qs: qs\n    }, function (err, result) {\n      if (err) {\n        // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n        // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n        if (qs.format === 'dag-pb' || qs.format === 'dag-cbor') {\n          qs.format = qs.format === 'dag-pb' ? 'protobuf' : 'cbor';\n          return sendOneFile(block.data, {\n            qs: qs\n          }, function (err, result) {\n            if (err) return callback(err);\n            callback(null, new Block(block.data, new CID(result.Key)));\n          });\n        }\n\n        return callback(err);\n      }\n\n      callback(null, new Block(block.data, new CID(result.Key)));\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/block/put.js"],"names":["promisify","require","Block","CID","multihash","SendOneFile","module","exports","send","sendOneFile","block","options","callback","Array","isArray","Error","Buffer","isBuffer","data","qs","cid","err","decode","name","length","format","codec","mhtype","mhlen","version","result","Key"],"mappings":"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","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst Block = require('ipfs-block')\nconst CID = require('cids')\nconst multihash = require('multihashes')\nconst SendOneFile = require('../utils/send-one-file')\n\nmodule.exports = (send) => {\n  const sendOneFile = SendOneFile(send, 'block/put')\n\n  return promisify((block, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    options = options || {}\n\n    if (Array.isArray(block)) {\n      return callback(new Error('block.put accepts only one block'))\n    }\n\n    if (Buffer.isBuffer(block)) {\n      block = { data: block }\n    }\n\n    if (!block || !block.data) {\n      return callback(new Error('invalid block arg'))\n    }\n\n    const qs = {}\n\n    if (block.cid || options.cid) {\n      let cid\n\n      try {\n        cid = new CID(block.cid || options.cid)\n      } catch (err) {\n        return callback(err)\n      }\n\n      const { name, length } = multihash.decode(cid.multihash)\n\n      qs.format = cid.codec\n      qs.mhtype = name\n      qs.mhlen = length\n      qs.version = cid.version\n    } else {\n      if (options.format) qs.format = options.format\n      if (options.mhtype) qs.mhtype = options.mhtype\n      if (options.mhlen) qs.mhlen = options.mhlen\n      if (options.version != null) qs.version = options.version\n    }\n\n    sendOneFile(block.data, { qs }, (err, result) => {\n      if (err) {\n        // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n        // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n        if (qs.format === 'dag-pb' || qs.format === 'dag-cbor') {\n          qs.format = qs.format === 'dag-pb' ? 'protobuf' : 'cbor'\n          return sendOneFile(block.data, { qs }, (err, result) => {\n            if (err) return callback(err)\n            callback(null, new Block(block.data, new CID(result.Key)))\n          })\n        }\n\n        return callback(err)\n      }\n\n      callback(null, new Block(block.data, new CID(result.Key)))\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}