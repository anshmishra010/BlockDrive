{"ast":null,"code":"'use strict';\n\nvar blake = require('blakejs');\n\nvar toCallback = require('./utils').toCallback;\n\nvar minB = 0xb201;\nvar minS = 0xb241;\nvar blake2b = {\n  init: blake.blake2bInit,\n  update: blake.blake2bUpdate,\n  digest: blake.blake2bFinal\n};\nvar blake2s = {\n  init: blake.blake2sInit,\n  update: blake.blake2sUpdate,\n  digest: blake.blake2sFinal\n};\n\nvar makeB2Hash = function makeB2Hash(size, hf) {\n  return toCallback(function (buf) {\n    var ctx = hf.init(size, null);\n    hf.update(ctx, buf);\n    return Buffer.from(hf.digest(ctx));\n  });\n};\n\nmodule.exports = function (table) {\n  for (var i = 0; i < 64; i++) {\n    table[minB + i] = makeB2Hash(i + 1, blake2b);\n  }\n\n  for (var _i = 0; _i < 32; _i++) {\n    table[minS + _i] = makeB2Hash(_i + 1, blake2s);\n  }\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/libp2p-crypto/node_modules/multihashing-async/src/blake.js"],"names":["blake","require","toCallback","minB","minS","blake2b","init","blake2bInit","update","blake2bUpdate","digest","blake2bFinal","blake2s","blake2sInit","blake2sUpdate","blake2sFinal","makeB2Hash","size","hf","buf","ctx","Buffer","from","module","exports","table","i"],"mappings":"AAAA;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AAEA,IAAMC,UAAU,GAAGD,OAAO,CAAC,SAAD,CAAP,CAAmBC,UAAtC;;AAEA,IAAMC,IAAI,GAAG,MAAb;AACA,IAAMC,IAAI,GAAG,MAAb;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAEN,KAAK,CAACO,WADE;AAEdC,EAAAA,MAAM,EAAER,KAAK,CAACS,aAFA;AAGdC,EAAAA,MAAM,EAAEV,KAAK,CAACW;AAHA,CAAhB;AAMA,IAAMC,OAAO,GAAG;AACdN,EAAAA,IAAI,EAAEN,KAAK,CAACa,WADE;AAEdL,EAAAA,MAAM,EAAER,KAAK,CAACc,aAFA;AAGdJ,EAAAA,MAAM,EAAEV,KAAK,CAACe;AAHA,CAAhB;;AAMA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOC,EAAP;AAAA,SAAchB,UAAU,CAAC,UAACiB,GAAD,EAAS;AACnD,QAAMC,GAAG,GAAGF,EAAE,CAACZ,IAAH,CAAQW,IAAR,EAAc,IAAd,CAAZ;AACAC,IAAAA,EAAE,CAACV,MAAH,CAAUY,GAAV,EAAeD,GAAf;AACA,WAAOE,MAAM,CAACC,IAAP,CAAYJ,EAAE,CAACR,MAAH,CAAUU,GAAV,CAAZ,CAAP;AACD,GAJ0C,CAAxB;AAAA,CAAnB;;AAMAG,MAAM,CAACC,OAAP,GAAiB,UAACC,KAAD,EAAW;AAC1B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BD,IAAAA,KAAK,CAACtB,IAAI,GAAGuB,CAAR,CAAL,GAAkBV,UAAU,CAACU,CAAC,GAAG,CAAL,EAAQrB,OAAR,CAA5B;AACD;;AACD,OAAK,IAAIqB,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG,EAApB,EAAwBA,EAAC,EAAzB,EAA6B;AAC3BD,IAAAA,KAAK,CAACrB,IAAI,GAAGsB,EAAR,CAAL,GAAkBV,UAAU,CAACU,EAAC,GAAG,CAAL,EAAQd,OAAR,CAA5B;AACD;AACF,CAPD","sourcesContent":["'use strict'\n\nconst blake = require('blakejs')\n\nconst toCallback = require('./utils').toCallback\n\nconst minB = 0xb201\nconst minS = 0xb241\n\nconst blake2b = {\n  init: blake.blake2bInit,\n  update: blake.blake2bUpdate,\n  digest: blake.blake2bFinal\n}\n\nconst blake2s = {\n  init: blake.blake2sInit,\n  update: blake.blake2sUpdate,\n  digest: blake.blake2sFinal\n}\n\nconst makeB2Hash = (size, hf) => toCallback((buf) => {\n  const ctx = hf.init(size, null)\n  hf.update(ctx, buf)\n  return Buffer.from(hf.digest(ctx))\n})\n\nmodule.exports = (table) => {\n  for (let i = 0; i < 64; i++) {\n    table[minB + i] = makeB2Hash(i + 1, blake2b)\n  }\n  for (let i = 0; i < 32; i++) {\n    table[minS + i] = makeB2Hash(i + 1, blake2s)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}