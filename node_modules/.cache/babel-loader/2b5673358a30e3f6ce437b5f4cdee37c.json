{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar forge = {\n  util: require('node-forge/lib/util'),\n  pki: require('node-forge/lib/pki'),\n  jsbn: require('node-forge/lib/jsbn')\n};\n\nfunction base64urlToBigInteger(str) {\n  var bytes = forge.util.decode64((str + '==='.slice((str.length + 3) % 4)).replace(/-/g, '+').replace(/_/g, '/'));\n  return new forge.jsbn.BigInteger(forge.util.bytesToHex(bytes), 16);\n}\n\nfunction convert(key, types) {\n  return types.map(function (t) {\n    return base64urlToBigInteger(key[t]);\n  });\n}\n\nfunction jwk2priv(key) {\n  var _forge$pki;\n\n  return (_forge$pki = forge.pki).setRsaPrivateKey.apply(_forge$pki, _toConsumableArray(convert(key, ['n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi'])));\n}\n\nfunction jwk2privPem(key) {\n  return forge.pki.privateKeyToPem(jwk2priv(key));\n}\n\nfunction jwk2pub(key) {\n  var _forge$pki2;\n\n  return (_forge$pki2 = forge.pki).setRsaPublicKey.apply(_forge$pki2, _toConsumableArray(convert(key, ['n', 'e'])));\n}\n\nfunction jwk2pubPem(key) {\n  return forge.pki.publicKeyToPem(jwk2pub(key));\n}\n\nmodule.exports = {\n  jwk2pub: jwk2pub,\n  jwk2pubPem: jwk2pubPem,\n  jwk2priv: jwk2priv,\n  jwk2privPem: jwk2privPem\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/libp2p-crypto/src/keys/jwk2pem.js"],"names":["forge","util","require","pki","jsbn","base64urlToBigInteger","str","bytes","decode64","slice","length","replace","BigInteger","bytesToHex","convert","key","types","map","t","jwk2priv","setRsaPrivateKey","jwk2privPem","privateKeyToPem","jwk2pub","setRsaPublicKey","jwk2pubPem","publicKeyToPem","module","exports"],"mappings":"AAAA;;;;AAEA,IAAMA,KAAK,GAAG;AACZC,EAAAA,IAAI,EAAEC,OAAO,CAAC,qBAAD,CADD;AAEZC,EAAAA,GAAG,EAAED,OAAO,CAAC,oBAAD,CAFA;AAGZE,EAAAA,IAAI,EAAEF,OAAO,CAAC,qBAAD;AAHD,CAAd;;AAMA,SAASG,qBAAT,CAAgCC,GAAhC,EAAqC;AACnC,MAAIC,KAAK,GAAGP,KAAK,CAACC,IAAN,CAAWO,QAAX,CACV,CAACF,GAAG,GAAG,MAAMG,KAAN,CAAY,CAACH,GAAG,CAACI,MAAJ,GAAa,CAAd,IAAmB,CAA/B,CAAP,EACGC,OADH,CACW,IADX,EACiB,GADjB,EAEGA,OAFH,CAEW,IAFX,EAEiB,GAFjB,CADU,CAAZ;AAIA,SAAO,IAAIX,KAAK,CAACI,IAAN,CAAWQ,UAAf,CAA0BZ,KAAK,CAACC,IAAN,CAAWY,UAAX,CAAsBN,KAAtB,CAA1B,EAAwD,EAAxD,CAAP;AACD;;AAED,SAASO,OAAT,CAAkBC,GAAlB,EAAuBC,KAAvB,EAA8B;AAC5B,SAAOA,KAAK,CAACC,GAAN,CAAU,UAAAC,CAAC;AAAA,WAAIb,qBAAqB,CAACU,GAAG,CAACG,CAAD,CAAJ,CAAzB;AAAA,GAAX,CAAP;AACD;;AAED,SAASC,QAAT,CAAmBJ,GAAnB,EAAwB;AAAA;;AACtB,SAAO,cAAAf,KAAK,CAACG,GAAN,EAAUiB,gBAAV,sCAA8BN,OAAO,CAACC,GAAD,EAAM,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,IAA1B,EAAgC,IAAhC,EAAsC,IAAtC,CAAN,CAArC,EAAP;AACD;;AAED,SAASM,WAAT,CAAsBN,GAAtB,EAA2B;AACzB,SAAOf,KAAK,CAACG,GAAN,CAAUmB,eAAV,CAA0BH,QAAQ,CAACJ,GAAD,CAAlC,CAAP;AACD;;AAED,SAASQ,OAAT,CAAkBR,GAAlB,EAAuB;AAAA;;AACrB,SAAO,eAAAf,KAAK,CAACG,GAAN,EAAUqB,eAAV,uCAA6BV,OAAO,CAACC,GAAD,EAAM,CAAC,GAAD,EAAM,GAAN,CAAN,CAApC,EAAP;AACD;;AAED,SAASU,UAAT,CAAqBV,GAArB,EAA0B;AACxB,SAAOf,KAAK,CAACG,GAAN,CAAUuB,cAAV,CAAyBH,OAAO,CAACR,GAAD,CAAhC,CAAP;AACD;;AAEDY,MAAM,CAACC,OAAP,GAAiB;AACfL,EAAAA,OAAO,EAAPA,OADe;AAEfE,EAAAA,UAAU,EAAVA,UAFe;AAGfN,EAAAA,QAAQ,EAARA,QAHe;AAIfE,EAAAA,WAAW,EAAXA;AAJe,CAAjB","sourcesContent":["'use strict'\n\nconst forge = {\n  util: require('node-forge/lib/util'),\n  pki: require('node-forge/lib/pki'),\n  jsbn: require('node-forge/lib/jsbn')\n}\n\nfunction base64urlToBigInteger (str) {\n  var bytes = forge.util.decode64(\n    (str + '==='.slice((str.length + 3) % 4))\n      .replace(/-/g, '+')\n      .replace(/_/g, '/'))\n  return new forge.jsbn.BigInteger(forge.util.bytesToHex(bytes), 16)\n}\n\nfunction convert (key, types) {\n  return types.map(t => base64urlToBigInteger(key[t]))\n}\n\nfunction jwk2priv (key) {\n  return forge.pki.setRsaPrivateKey(...convert(key, ['n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi']))\n}\n\nfunction jwk2privPem (key) {\n  return forge.pki.privateKeyToPem(jwk2priv(key))\n}\n\nfunction jwk2pub (key) {\n  return forge.pki.setRsaPublicKey(...convert(key, ['n', 'e']))\n}\n\nfunction jwk2pubPem (key) {\n  return forge.pki.publicKeyToPem(jwk2pub(key))\n}\n\nmodule.exports = {\n  jwk2pub,\n  jwk2pubPem,\n  jwk2priv,\n  jwk2privPem\n}\n"]},"metadata":{},"sourceType":"script"}