{"ast":null,"code":"'use strict';\n\nvar values = require('../sources/values');\n\nvar once = require('../sources/once'); //convert a stream of arrays or streams into just a stream.\n\n\nmodule.exports = function flatten() {\n  return function (read) {\n    var _read;\n\n    return function (abort, cb) {\n      if (abort) {\n        //abort the current stream, and then stream of streams.\n        _read ? _read(abort, function (err) {\n          read(err || abort, cb);\n        }) : read(abort, cb);\n      } else if (_read) nextChunk();else nextStream();\n\n      function nextChunk() {\n        _read(null, function (err, data) {\n          if (err === true) nextStream();else if (err) {\n            read(true, function (abortErr) {\n              // TODO: what do we do with the abortErr?\n              cb(err);\n            });\n          } else cb(null, data);\n        });\n      }\n\n      function nextStream() {\n        _read = null;\n        read(null, function (end, stream) {\n          if (end) return cb(end);\n          if (Array.isArray(stream) || stream && 'object' === typeof stream) stream = values(stream);else if ('function' != typeof stream) stream = once(stream);\n          _read = stream;\n          nextChunk();\n        });\n      }\n    };\n  };\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/pull-stream/throughs/flatten.js"],"names":["values","require","once","module","exports","flatten","read","_read","abort","cb","err","nextChunk","nextStream","data","abortErr","end","stream","Array","isArray"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,mBAAD,CAApB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,iBAAD,CAAlB,C,CAEA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,GAAoB;AACnC,SAAO,UAAUC,IAAV,EAAgB;AACrB,QAAIC,KAAJ;;AACA,WAAO,UAAUC,KAAV,EAAiBC,EAAjB,EAAqB;AAC1B,UAAID,KAAJ,EAAW;AAAE;AACXD,QAAAA,KAAK,GAAGA,KAAK,CAACC,KAAD,EAAQ,UAASE,GAAT,EAAc;AACjCJ,UAAAA,IAAI,CAACI,GAAG,IAAIF,KAAR,EAAeC,EAAf,CAAJ;AACD,SAFY,CAAR,GAEAH,IAAI,CAACE,KAAD,EAAQC,EAAR,CAFT;AAGD,OAJD,MAKK,IAAGF,KAAH,EAAUI,SAAS,GAAnB,KACAC,UAAU;;AAEf,eAASD,SAAT,GAAsB;AACpBJ,QAAAA,KAAK,CAAC,IAAD,EAAO,UAAUG,GAAV,EAAeG,IAAf,EAAqB;AAC/B,cAAIH,GAAG,KAAK,IAAZ,EAAkBE,UAAU,GAA5B,KACK,IAAIF,GAAJ,EAAS;AACZJ,YAAAA,IAAI,CAAC,IAAD,EAAO,UAASQ,QAAT,EAAmB;AAC5B;AACAL,cAAAA,EAAE,CAACC,GAAD,CAAF;AACD,aAHG,CAAJ;AAID,WALI,MAMAD,EAAE,CAAC,IAAD,EAAOI,IAAP,CAAF;AACN,SATI,CAAL;AAUD;;AACD,eAASD,UAAT,GAAuB;AACrBL,QAAAA,KAAK,GAAG,IAAR;AACAD,QAAAA,IAAI,CAAC,IAAD,EAAO,UAAUS,GAAV,EAAeC,MAAf,EAAuB;AAChC,cAAGD,GAAH,EACE,OAAON,EAAE,CAACM,GAAD,CAAT;AACF,cAAGE,KAAK,CAACC,OAAN,CAAcF,MAAd,KAAyBA,MAAM,IAAI,aAAa,OAAOA,MAA1D,EACEA,MAAM,GAAGhB,MAAM,CAACgB,MAAD,CAAf,CADF,KAEK,IAAG,cAAc,OAAOA,MAAxB,EACHA,MAAM,GAAGd,IAAI,CAACc,MAAD,CAAb;AACFT,UAAAA,KAAK,GAAGS,MAAR;AACAL,UAAAA,SAAS;AACV,SATG,CAAJ;AAUD;AACF,KAlCD;AAmCD,GArCD;AAsCD,CAvCD","sourcesContent":["'use strict'\n\nvar values = require('../sources/values')\nvar once = require('../sources/once')\n\n//convert a stream of arrays or streams into just a stream.\nmodule.exports = function flatten () {\n  return function (read) {\n    var _read\n    return function (abort, cb) {\n      if (abort) { //abort the current stream, and then stream of streams.\n        _read ? _read(abort, function(err) {\n          read(err || abort, cb)\n        }) : read(abort, cb)\n      }\n      else if(_read) nextChunk()\n      else nextStream()\n\n      function nextChunk () {\n        _read(null, function (err, data) {\n          if (err === true) nextStream()\n          else if (err) {\n            read(true, function(abortErr) {\n              // TODO: what do we do with the abortErr?\n              cb(err)\n            })\n          }\n          else cb(null, data)\n        })\n      }\n      function nextStream () {\n        _read = null\n        read(null, function (end, stream) {\n          if(end)\n            return cb(end)\n          if(Array.isArray(stream) || stream && 'object' === typeof stream)\n            stream = values(stream)\n          else if('function' != typeof stream)\n            stream = once(stream)\n          _read = stream\n          nextChunk()\n        })\n      }\n    }\n  }\n}\n\n"]},"metadata":{},"sourceType":"script"}