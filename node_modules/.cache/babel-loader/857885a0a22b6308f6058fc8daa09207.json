{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar IsIpfs = require('is-ipfs');\n\nvar promisify = require('promisify-es6');\n\nvar streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer');\n\nvar moduleConfig = require('../utils/module-config');\n\nvar cleanCID = require('../utils/clean-cid');\n\nmodule.exports = function (arg) {\n  var send = moduleConfig(arg);\n  var refs = promisify(function (args, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = module.exports.normalizeOpts(opts);\n\n    try {\n      args = module.exports.checkArgs(args);\n    } catch (err) {\n      return callback(err);\n    }\n\n    var transform = function transform(res, cb) {\n      cb(null, res.map(function (r) {\n        return {\n          ref: r.Ref,\n          err: r.Err\n        };\n      }));\n    };\n\n    var request = {\n      args: args,\n      path: 'refs',\n      qs: opts\n    };\n    send(request, function (err, result) {\n      if (err) {\n        return callback(err);\n      }\n\n      streamToValueWithTransformer(result, transform, callback);\n    });\n  });\n  refs.local = require('./refs-local')(arg);\n  refs.localReadableStream = require('./refs-local-readable-stream')(arg);\n  refs.localPullStream = require('./refs-local-pull-stream')(arg);\n  return refs;\n};\n\nmodule.exports.checkArgs = function (args) {\n  var isArray = Array.isArray(args);\n  args = isArray ? args : [args];\n  var res = [];\n\n  var _iterator = _createForOfIteratorHelper(args),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var arg = _step.value;\n\n      try {\n        arg = cleanCID(arg);\n      } catch (err) {\n        if (!IsIpfs.ipfsPath(arg)) {\n          throw err;\n        }\n      }\n\n      res.push(arg);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return isArray ? res : res[0];\n};\n\nmodule.exports.normalizeOpts = function (opts) {\n  opts = opts || {};\n\n  if (typeof opts.maxDepth === 'number') {\n    opts['max-depth'] = opts.maxDepth;\n  }\n\n  return opts;\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/files-regular/refs.js"],"names":["IsIpfs","require","promisify","streamToValueWithTransformer","moduleConfig","cleanCID","module","exports","arg","send","refs","args","opts","callback","normalizeOpts","checkArgs","err","transform","res","cb","map","r","ref","Ref","Err","request","path","qs","result","local","localReadableStream","localPullStream","isArray","Array","ipfsPath","push","maxDepth"],"mappings":"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","sourcesContent":["'use strict'\n\nconst IsIpfs = require('is-ipfs')\nconst promisify = require('promisify-es6')\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer')\nconst moduleConfig = require('../utils/module-config')\nconst cleanCID = require('../utils/clean-cid')\n\nmodule.exports = (arg) => {\n  const send = moduleConfig(arg)\n\n  const refs = promisify((args, opts, callback) => {\n    if (typeof (opts) === 'function') {\n      callback = opts\n      opts = {}\n    }\n    opts = module.exports.normalizeOpts(opts)\n\n    try {\n      args = module.exports.checkArgs(args)\n    } catch (err) {\n      return callback(err)\n    }\n\n    const transform = (res, cb) => {\n      cb(null, res.map(r => ({ ref: r.Ref, err: r.Err })))\n    }\n\n    const request = {\n      args,\n      path: 'refs',\n      qs: opts\n    }\n    send(request, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      streamToValueWithTransformer(result, transform, callback)\n    })\n  })\n\n  refs.local = require('./refs-local')(arg)\n  refs.localReadableStream = require('./refs-local-readable-stream')(arg)\n  refs.localPullStream = require('./refs-local-pull-stream')(arg)\n\n  return refs\n}\n\nmodule.exports.checkArgs = (args) => {\n  const isArray = Array.isArray(args)\n  args = isArray ? args : [args]\n\n  const res = []\n  for (let arg of args) {\n    try {\n      arg = cleanCID(arg)\n    } catch (err) {\n      if (!IsIpfs.ipfsPath(arg)) {\n        throw err\n      }\n    }\n    res.push(arg)\n  }\n\n  return isArray ? res : res[0]\n}\n\nmodule.exports.normalizeOpts = (opts) => {\n  opts = opts || {}\n  if (typeof opts.maxDepth === 'number') {\n    opts['max-depth'] = opts.maxDepth\n  }\n  return opts\n}\n"]},"metadata":{},"sourceType":"script"}