{"ast":null,"code":"'use strict';\n\nvar _require = require('readable-stream'),\n    Readable = _require.Readable;\n\nvar promisify = require('promisify-es6');\n\nvar SendOneFile = require('../utils/send-one-file');\n\nfunction toStream(input) {\n  return new Readable({\n    read: function read() {\n      this.push(input);\n      this.push(null);\n    }\n  });\n}\n\nmodule.exports = function (send) {\n  var sendOneFile = SendOneFile(send, 'config/replace');\n  return promisify(function (config, callback) {\n    if (typeof config === 'object') {\n      config = toStream(Buffer.from(JSON.stringify(config)));\n    }\n\n    sendOneFile(config, {}, callback);\n  });\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/config/replace.js"],"names":["require","Readable","promisify","SendOneFile","toStream","input","read","push","module","exports","send","sendOneFile","config","callback","Buffer","from","JSON","stringify"],"mappings":"AAAA;;eAEqBA,OAAO,CAAC,iBAAD,C;IAApBC,Q,YAAAA,Q;;AACR,IAAMC,SAAS,GAAGF,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAMG,WAAW,GAAGH,OAAO,CAAC,wBAAD,CAA3B;;AAEA,SAASI,QAAT,CAAmBC,KAAnB,EAA0B;AACxB,SAAO,IAAIJ,QAAJ,CAAa;AAClBK,IAAAA,IADkB,kBACV;AACN,WAAKC,IAAL,CAAUF,KAAV;AACA,WAAKE,IAAL,CAAU,IAAV;AACD;AAJiB,GAAb,CAAP;AAMD;;AAEDC,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,MAAMC,WAAW,GAAGR,WAAW,CAACO,IAAD,EAAO,gBAAP,CAA/B;AACA,SAAOR,SAAS,CAAC,UAACU,MAAD,EAASC,QAAT,EAAsB;AACrC,QAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;AAC9BA,MAAAA,MAAM,GAAGR,QAAQ,CAACU,MAAM,CAACC,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAeL,MAAf,CAAZ,CAAD,CAAjB;AACD;;AAEDD,IAAAA,WAAW,CAACC,MAAD,EAAS,EAAT,EAAaC,QAAb,CAAX;AACD,GANe,CAAhB;AAOD,CATD","sourcesContent":["'use strict'\n\nconst { Readable } = require('readable-stream')\nconst promisify = require('promisify-es6')\nconst SendOneFile = require('../utils/send-one-file')\n\nfunction toStream (input) {\n  return new Readable({\n    read () {\n      this.push(input)\n      this.push(null)\n    }\n  })\n}\n\nmodule.exports = (send) => {\n  const sendOneFile = SendOneFile(send, 'config/replace')\n  return promisify((config, callback) => {\n    if (typeof config === 'object') {\n      config = toStream(Buffer.from(JSON.stringify(config)))\n    }\n\n    sendOneFile(config, {}, callback)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}