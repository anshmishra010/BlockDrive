{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar streamToValue = require('../utils/stream-to-value');\n\nvar transformChunk = require('./bw-util');\n\nvar transform = function transform(res, callback) {\n  return streamToValue(res, function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, transformChunk(data[0]));\n  });\n};\n\nmodule.exports = function (send) {\n  return promisify(function (opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    send.andTransform({\n      path: 'stats/bw',\n      qs: opts\n    }, transform, callback);\n  });\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/stats/bw.js"],"names":["promisify","require","streamToValue","transformChunk","transform","res","callback","err","data","module","exports","send","opts","andTransform","path","qs"],"mappings":"AAAA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAMC,aAAa,GAAGD,OAAO,CAAC,0BAAD,CAA7B;;AACA,IAAME,cAAc,GAAGF,OAAO,CAAC,WAAD,CAA9B;;AAEA,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAMC,QAAN,EAAmB;AACnC,SAAOJ,aAAa,CAACG,GAAD,EAAM,UAACE,GAAD,EAAMC,IAAN,EAAe;AACvC,QAAID,GAAJ,EAAS;AACP,aAAOD,QAAQ,CAACC,GAAD,CAAf;AACD;;AAEDD,IAAAA,QAAQ,CAAC,IAAD,EAAOH,cAAc,CAACK,IAAI,CAAC,CAAD,CAAL,CAArB,CAAR;AACD,GANmB,CAApB;AAOD,CARD;;AAUAC,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,SAAOX,SAAS,CAAC,UAACY,IAAD,EAAON,QAAP,EAAoB;AACnC,QAAI,OAAQM,IAAR,KAAkB,UAAtB,EAAkC;AAChCN,MAAAA,QAAQ,GAAGM,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAEDD,IAAAA,IAAI,CAACE,YAAL,CAAkB;AAChBC,MAAAA,IAAI,EAAE,UADU;AAEhBC,MAAAA,EAAE,EAAEH;AAFY,KAAlB,EAGGR,SAHH,EAGcE,QAHd;AAID,GAVe,CAAhB;AAWD,CAZD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst streamToValue = require('../utils/stream-to-value')\nconst transformChunk = require('./bw-util')\n\nconst transform = (res, callback) => {\n  return streamToValue(res, (err, data) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, transformChunk(data[0]))\n  })\n}\n\nmodule.exports = (send) => {\n  return promisify((opts, callback) => {\n    if (typeof (opts) === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    send.andTransform({\n      path: 'stats/bw',\n      qs: opts\n    }, transform, callback)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}