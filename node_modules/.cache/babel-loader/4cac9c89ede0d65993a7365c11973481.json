{"ast":null,"code":"// BLAKE2s hash function in pure Javascript\n// Adapted from the reference implementation in RFC7693\n// Ported to Javascript by DC - https://github.com/dcposch\nvar util = require('./util'); // Little-endian byte access.\n// Expects a Uint8Array and an index\n// Returns the little-endian uint32 at v[i..i+3]\n\n\nfunction B2S_GET32(v, i) {\n  return v[i] ^ v[i + 1] << 8 ^ v[i + 2] << 16 ^ v[i + 3] << 24;\n} // Mixing function G.\n\n\nfunction B2S_G(a, b, c, d, x, y) {\n  v[a] = v[a] + v[b] + x;\n  v[d] = ROTR32(v[d] ^ v[a], 16);\n  v[c] = v[c] + v[d];\n  v[b] = ROTR32(v[b] ^ v[c], 12);\n  v[a] = v[a] + v[b] + y;\n  v[d] = ROTR32(v[d] ^ v[a], 8);\n  v[c] = v[c] + v[d];\n  v[b] = ROTR32(v[b] ^ v[c], 7);\n} // 32-bit right rotation\n// x should be a uint32\n// y must be between 1 and 31, inclusive\n\n\nfunction ROTR32(x, y) {\n  return x >>> y ^ x << 32 - y;\n} // Initialization Vector.\n\n\nvar BLAKE2S_IV = new Uint32Array([0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19]);\nvar SIGMA = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0]); // Compression function. \"last\" flag indicates last block\n\nvar v = new Uint32Array(16);\nvar m = new Uint32Array(16);\n\nfunction blake2sCompress(ctx, last) {\n  var i = 0;\n\n  for (i = 0; i < 8; i++) {\n    // init work variables\n    v[i] = ctx.h[i];\n    v[i + 8] = BLAKE2S_IV[i];\n  }\n\n  v[12] ^= ctx.t; // low 32 bits of offset\n\n  v[13] ^= ctx.t / 0x100000000; // high 32 bits\n\n  if (last) {\n    // last block flag set ?\n    v[14] = ~v[14];\n  }\n\n  for (i = 0; i < 16; i++) {\n    // get little-endian words\n    m[i] = B2S_GET32(ctx.b, 4 * i);\n  } // ten rounds of mixing\n  // uncomment the DebugPrint calls to log the computation\n  // and match the RFC sample documentation\n  // util.debugPrint('          m[16]', m, 32)\n\n\n  for (i = 0; i < 10; i++) {\n    // util.debugPrint('   (i=' + i + ')  v[16]', v, 32)\n    B2S_G(0, 4, 8, 12, m[SIGMA[i * 16 + 0]], m[SIGMA[i * 16 + 1]]);\n    B2S_G(1, 5, 9, 13, m[SIGMA[i * 16 + 2]], m[SIGMA[i * 16 + 3]]);\n    B2S_G(2, 6, 10, 14, m[SIGMA[i * 16 + 4]], m[SIGMA[i * 16 + 5]]);\n    B2S_G(3, 7, 11, 15, m[SIGMA[i * 16 + 6]], m[SIGMA[i * 16 + 7]]);\n    B2S_G(0, 5, 10, 15, m[SIGMA[i * 16 + 8]], m[SIGMA[i * 16 + 9]]);\n    B2S_G(1, 6, 11, 12, m[SIGMA[i * 16 + 10]], m[SIGMA[i * 16 + 11]]);\n    B2S_G(2, 7, 8, 13, m[SIGMA[i * 16 + 12]], m[SIGMA[i * 16 + 13]]);\n    B2S_G(3, 4, 9, 14, m[SIGMA[i * 16 + 14]], m[SIGMA[i * 16 + 15]]);\n  } // util.debugPrint('   (i=10) v[16]', v, 32)\n\n\n  for (i = 0; i < 8; i++) {\n    ctx.h[i] ^= v[i] ^ v[i + 8];\n  } // util.debugPrint('h[8]', ctx.h, 32)\n\n} // Creates a BLAKE2s hashing context\n// Requires an output length between 1 and 32 bytes\n// Takes an optional Uint8Array key\n\n\nfunction blake2sInit(outlen, key) {\n  if (!(outlen > 0 && outlen <= 32)) {\n    throw new Error('Incorrect output length, should be in [1, 32]');\n  }\n\n  var keylen = key ? key.length : 0;\n\n  if (key && !(keylen > 0 && keylen <= 32)) {\n    throw new Error('Incorrect key length, should be in [1, 32]');\n  }\n\n  var ctx = {\n    h: new Uint32Array(BLAKE2S_IV),\n    // hash state\n    b: new Uint32Array(64),\n    // input block\n    c: 0,\n    // pointer within block\n    t: 0,\n    // input count\n    outlen: outlen // output length in bytes\n\n  };\n  ctx.h[0] ^= 0x01010000 ^ keylen << 8 ^ outlen;\n\n  if (keylen > 0) {\n    blake2sUpdate(ctx, key);\n    ctx.c = 64; // at the end\n  }\n\n  return ctx;\n} // Updates a BLAKE2s streaming hash\n// Requires hash context and Uint8Array (byte array)\n\n\nfunction blake2sUpdate(ctx, input) {\n  for (var i = 0; i < input.length; i++) {\n    if (ctx.c === 64) {\n      // buffer full ?\n      ctx.t += ctx.c; // add counters\n\n      blake2sCompress(ctx, false); // compress (not last)\n\n      ctx.c = 0; // counter to zero\n    }\n\n    ctx.b[ctx.c++] = input[i];\n  }\n} // Completes a BLAKE2s streaming hash\n// Returns a Uint8Array containing the message digest\n\n\nfunction blake2sFinal(ctx) {\n  ctx.t += ctx.c; // mark last block offset\n\n  while (ctx.c < 64) {\n    // fill up with zeros\n    ctx.b[ctx.c++] = 0;\n  }\n\n  blake2sCompress(ctx, true); // final block flag = 1\n  // little endian convert and store\n\n  var out = new Uint8Array(ctx.outlen);\n\n  for (var i = 0; i < ctx.outlen; i++) {\n    out[i] = ctx.h[i >> 2] >> 8 * (i & 3) & 0xFF;\n  }\n\n  return out;\n} // Computes the BLAKE2S hash of a string or byte array, and returns a Uint8Array\n//\n// Returns a n-byte Uint8Array\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 32 bytes\n// - outlen - optional output length in bytes, default 64\n\n\nfunction blake2s(input, key, outlen) {\n  // preprocess inputs\n  outlen = outlen || 32;\n  input = util.normalizeInput(input); // do the math\n\n  var ctx = blake2sInit(outlen, key);\n  blake2sUpdate(ctx, input);\n  return blake2sFinal(ctx);\n} // Computes the BLAKE2S hash of a string or byte array\n//\n// Returns an n-byte hash in hex, all lowercase\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 32 bytes\n// - outlen - optional output length in bytes, default 64\n\n\nfunction blake2sHex(input, key, outlen) {\n  var output = blake2s(input, key, outlen);\n  return util.toHex(output);\n}\n\nmodule.exports = {\n  blake2s: blake2s,\n  blake2sHex: blake2sHex,\n  blake2sInit: blake2sInit,\n  blake2sUpdate: blake2sUpdate,\n  blake2sFinal: blake2sFinal\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/blakejs/blake2s.js"],"names":["util","require","B2S_GET32","v","i","B2S_G","a","b","c","d","x","y","ROTR32","BLAKE2S_IV","Uint32Array","SIGMA","Uint8Array","m","blake2sCompress","ctx","last","h","t","blake2sInit","outlen","key","Error","keylen","length","blake2sUpdate","input","blake2sFinal","out","blake2s","normalizeInput","blake2sHex","output","toHex","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB,C,CAEA;AACA;AACA;;;AACA,SAASC,SAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;AACxB,SAAOD,CAAC,CAACC,CAAD,CAAD,GAAQD,CAAC,CAACC,CAAC,GAAG,CAAL,CAAD,IAAY,CAApB,GAA0BD,CAAC,CAACC,CAAC,GAAG,CAAL,CAAD,IAAY,EAAtC,GAA6CD,CAAC,CAACC,CAAC,GAAG,CAAL,CAAD,IAAY,EAAhE;AACD,C,CAED;;;AACA,SAASC,KAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4BC,CAA5B,EAA+BC,CAA/B,EAAkC;AAChCR,EAAAA,CAAC,CAACG,CAAD,CAAD,GAAOH,CAAC,CAACG,CAAD,CAAD,GAAOH,CAAC,CAACI,CAAD,CAAR,GAAcG,CAArB;AACAP,EAAAA,CAAC,CAACM,CAAD,CAAD,GAAOG,MAAM,CAACT,CAAC,CAACM,CAAD,CAAD,GAAON,CAAC,CAACG,CAAD,CAAT,EAAc,EAAd,CAAb;AACAH,EAAAA,CAAC,CAACK,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAD,GAAOL,CAAC,CAACM,CAAD,CAAf;AACAN,EAAAA,CAAC,CAACI,CAAD,CAAD,GAAOK,MAAM,CAACT,CAAC,CAACI,CAAD,CAAD,GAAOJ,CAAC,CAACK,CAAD,CAAT,EAAc,EAAd,CAAb;AACAL,EAAAA,CAAC,CAACG,CAAD,CAAD,GAAOH,CAAC,CAACG,CAAD,CAAD,GAAOH,CAAC,CAACI,CAAD,CAAR,GAAcI,CAArB;AACAR,EAAAA,CAAC,CAACM,CAAD,CAAD,GAAOG,MAAM,CAACT,CAAC,CAACM,CAAD,CAAD,GAAON,CAAC,CAACG,CAAD,CAAT,EAAc,CAAd,CAAb;AACAH,EAAAA,CAAC,CAACK,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAD,GAAOL,CAAC,CAACM,CAAD,CAAf;AACAN,EAAAA,CAAC,CAACI,CAAD,CAAD,GAAOK,MAAM,CAACT,CAAC,CAACI,CAAD,CAAD,GAAOJ,CAAC,CAACK,CAAD,CAAT,EAAc,CAAd,CAAb;AACD,C,CAED;AACA;AACA;;;AACA,SAASI,MAAT,CAAiBF,CAAjB,EAAoBC,CAApB,EAAuB;AACrB,SAAQD,CAAC,KAAKC,CAAP,GAAaD,CAAC,IAAK,KAAKC,CAA/B;AACD,C,CAED;;;AACA,IAAIE,UAAU,GAAG,IAAIC,WAAJ,CAAgB,CAC/B,UAD+B,EACnB,UADmB,EACP,UADO,EACK,UADL,EAE/B,UAF+B,EAEnB,UAFmB,EAEP,UAFO,EAEK,UAFL,CAAhB,CAAjB;AAIA,IAAIC,KAAK,GAAG,IAAIC,UAAJ,CAAe,CACzB,CADyB,EACtB,CADsB,EACnB,CADmB,EAChB,CADgB,EACb,CADa,EACV,CADU,EACP,CADO,EACJ,CADI,EACD,CADC,EACE,CADF,EACK,EADL,EACS,EADT,EACa,EADb,EACiB,EADjB,EACqB,EADrB,EACyB,EADzB,EAEzB,EAFyB,EAErB,EAFqB,EAEjB,CAFiB,EAEd,CAFc,EAEX,CAFW,EAER,EAFQ,EAEJ,EAFI,EAEA,CAFA,EAEG,CAFH,EAEM,EAFN,EAEU,CAFV,EAEa,CAFb,EAEgB,EAFhB,EAEoB,CAFpB,EAEuB,CAFvB,EAE0B,CAF1B,EAGzB,EAHyB,EAGrB,CAHqB,EAGlB,EAHkB,EAGd,CAHc,EAGX,CAHW,EAGR,CAHQ,EAGL,EAHK,EAGD,EAHC,EAGG,EAHH,EAGO,EAHP,EAGW,CAHX,EAGc,CAHd,EAGiB,CAHjB,EAGoB,CAHpB,EAGuB,CAHvB,EAG0B,CAH1B,EAIzB,CAJyB,EAItB,CAJsB,EAInB,CAJmB,EAIhB,CAJgB,EAIb,EAJa,EAIT,EAJS,EAIL,EAJK,EAID,EAJC,EAIG,CAJH,EAIM,CAJN,EAIS,CAJT,EAIY,EAJZ,EAIgB,CAJhB,EAImB,CAJnB,EAIsB,EAJtB,EAI0B,CAJ1B,EAKzB,CALyB,EAKtB,CALsB,EAKnB,CALmB,EAKhB,CALgB,EAKb,CALa,EAKV,CALU,EAKP,EALO,EAKH,EALG,EAKC,EALD,EAKK,CALL,EAKQ,EALR,EAKY,EALZ,EAKgB,CALhB,EAKmB,CALnB,EAKsB,CALtB,EAKyB,EALzB,EAMzB,CANyB,EAMtB,EANsB,EAMlB,CANkB,EAMf,EANe,EAMX,CANW,EAMR,EANQ,EAMJ,CANI,EAMD,CANC,EAME,CANF,EAMK,EANL,EAMS,CANT,EAMY,CANZ,EAMe,EANf,EAMmB,EANnB,EAMuB,CANvB,EAM0B,CAN1B,EAOzB,EAPyB,EAOrB,CAPqB,EAOlB,CAPkB,EAOf,EAPe,EAOX,EAPW,EAOP,EAPO,EAOH,CAPG,EAOA,EAPA,EAOI,CAPJ,EAOO,CAPP,EAOU,CAPV,EAOa,CAPb,EAOgB,CAPhB,EAOmB,CAPnB,EAOsB,CAPtB,EAOyB,EAPzB,EAQzB,EARyB,EAQrB,EARqB,EAQjB,CARiB,EAQd,EARc,EAQV,EARU,EAQN,CARM,EAQH,CARG,EAQA,CARA,EAQG,CARH,EAQM,CARN,EAQS,EART,EAQa,CARb,EAQgB,CARhB,EAQmB,CARnB,EAQsB,CARtB,EAQyB,EARzB,EASzB,CATyB,EAStB,EATsB,EASlB,EATkB,EASd,CATc,EASX,EATW,EASP,CATO,EASJ,CATI,EASD,CATC,EASE,EATF,EASM,CATN,EASS,EATT,EASa,CATb,EASgB,CAThB,EASmB,CATnB,EASsB,EATtB,EAS0B,CAT1B,EAUzB,EAVyB,EAUrB,CAVqB,EAUlB,CAVkB,EAUf,CAVe,EAUZ,CAVY,EAUT,CAVS,EAUN,CAVM,EAUH,CAVG,EAUA,EAVA,EAUI,EAVJ,EAUQ,CAVR,EAUW,EAVX,EAUe,CAVf,EAUkB,EAVlB,EAUsB,EAVtB,EAU0B,CAV1B,CAAf,CAAZ,C,CAYA;;AACA,IAAIb,CAAC,GAAG,IAAIW,WAAJ,CAAgB,EAAhB,CAAR;AACA,IAAIG,CAAC,GAAG,IAAIH,WAAJ,CAAgB,EAAhB,CAAR;;AACA,SAASI,eAAT,CAA0BC,GAA1B,EAA+BC,IAA/B,EAAqC;AACnC,MAAIhB,CAAC,GAAG,CAAR;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AAAE;AACxBD,IAAAA,CAAC,CAACC,CAAD,CAAD,GAAOe,GAAG,CAACE,CAAJ,CAAMjB,CAAN,CAAP;AACAD,IAAAA,CAAC,CAACC,CAAC,GAAG,CAAL,CAAD,GAAWS,UAAU,CAACT,CAAD,CAArB;AACD;;AAEDD,EAAAA,CAAC,CAAC,EAAD,CAAD,IAASgB,GAAG,CAACG,CAAb,CAPmC,CAOpB;;AACfnB,EAAAA,CAAC,CAAC,EAAD,CAAD,IAAUgB,GAAG,CAACG,CAAJ,GAAQ,WAAlB,CARmC,CAQJ;;AAC/B,MAAIF,IAAJ,EAAU;AAAE;AACVjB,IAAAA,CAAC,CAAC,EAAD,CAAD,GAAQ,CAACA,CAAC,CAAC,EAAD,CAAV;AACD;;AAED,OAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AAAE;AACzBa,IAAAA,CAAC,CAACb,CAAD,CAAD,GAAOF,SAAS,CAACiB,GAAG,CAACZ,CAAL,EAAQ,IAAIH,CAAZ,CAAhB;AACD,GAfkC,CAiBnC;AACA;AACA;AACA;;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AACvB;AACAC,IAAAA,KAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAcY,CAAC,CAACF,KAAK,CAACX,CAAC,GAAG,EAAJ,GAAS,CAAV,CAAN,CAAf,EAAoCa,CAAC,CAACF,KAAK,CAACX,CAAC,GAAG,EAAJ,GAAS,CAAV,CAAN,CAArC,CAAL;AACAC,IAAAA,KAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAcY,CAAC,CAACF,KAAK,CAACX,CAAC,GAAG,EAAJ,GAAS,CAAV,CAAN,CAAf,EAAoCa,CAAC,CAACF,KAAK,CAACX,CAAC,GAAG,EAAJ,GAAS,CAAV,CAAN,CAArC,CAAL;AACAC,IAAAA,KAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAeY,CAAC,CAACF,KAAK,CAACX,CAAC,GAAG,EAAJ,GAAS,CAAV,CAAN,CAAhB,EAAqCa,CAAC,CAACF,KAAK,CAACX,CAAC,GAAG,EAAJ,GAAS,CAAV,CAAN,CAAtC,CAAL;AACAC,IAAAA,KAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAeY,CAAC,CAACF,KAAK,CAACX,CAAC,GAAG,EAAJ,GAAS,CAAV,CAAN,CAAhB,EAAqCa,CAAC,CAACF,KAAK,CAACX,CAAC,GAAG,EAAJ,GAAS,CAAV,CAAN,CAAtC,CAAL;AACAC,IAAAA,KAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAeY,CAAC,CAACF,KAAK,CAACX,CAAC,GAAG,EAAJ,GAAS,CAAV,CAAN,CAAhB,EAAqCa,CAAC,CAACF,KAAK,CAACX,CAAC,GAAG,EAAJ,GAAS,CAAV,CAAN,CAAtC,CAAL;AACAC,IAAAA,KAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAeY,CAAC,CAACF,KAAK,CAACX,CAAC,GAAG,EAAJ,GAAS,EAAV,CAAN,CAAhB,EAAsCa,CAAC,CAACF,KAAK,CAACX,CAAC,GAAG,EAAJ,GAAS,EAAV,CAAN,CAAvC,CAAL;AACAC,IAAAA,KAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAcY,CAAC,CAACF,KAAK,CAACX,CAAC,GAAG,EAAJ,GAAS,EAAV,CAAN,CAAf,EAAqCa,CAAC,CAACF,KAAK,CAACX,CAAC,GAAG,EAAJ,GAAS,EAAV,CAAN,CAAtC,CAAL;AACAC,IAAAA,KAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAcY,CAAC,CAACF,KAAK,CAACX,CAAC,GAAG,EAAJ,GAAS,EAAV,CAAN,CAAf,EAAqCa,CAAC,CAACF,KAAK,CAACX,CAAC,GAAG,EAAJ,GAAS,EAAV,CAAN,CAAtC,CAAL;AACD,GA/BkC,CAgCnC;;;AAEA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACtBe,IAAAA,GAAG,CAACE,CAAJ,CAAMjB,CAAN,KAAYD,CAAC,CAACC,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAC,GAAG,CAAL,CAApB;AACD,GApCkC,CAqCnC;;AACD,C,CAED;AACA;AACA;;;AACA,SAASmB,WAAT,CAAsBC,MAAtB,EAA8BC,GAA9B,EAAmC;AACjC,MAAI,EAAED,MAAM,GAAG,CAAT,IAAcA,MAAM,IAAI,EAA1B,CAAJ,EAAmC;AACjC,UAAM,IAAIE,KAAJ,CAAU,+CAAV,CAAN;AACD;;AACD,MAAIC,MAAM,GAAGF,GAAG,GAAGA,GAAG,CAACG,MAAP,GAAgB,CAAhC;;AACA,MAAIH,GAAG,IAAI,EAAEE,MAAM,GAAG,CAAT,IAAcA,MAAM,IAAI,EAA1B,CAAX,EAA0C;AACxC,UAAM,IAAID,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAED,MAAIP,GAAG,GAAG;AACRE,IAAAA,CAAC,EAAE,IAAIP,WAAJ,CAAgBD,UAAhB,CADK;AACwB;AAChCN,IAAAA,CAAC,EAAE,IAAIO,WAAJ,CAAgB,EAAhB,CAFK;AAEgB;AACxBN,IAAAA,CAAC,EAAE,CAHK;AAGF;AACNc,IAAAA,CAAC,EAAE,CAJK;AAIF;AACNE,IAAAA,MAAM,EAAEA,MALA,CAKO;;AALP,GAAV;AAOAL,EAAAA,GAAG,CAACE,CAAJ,CAAM,CAAN,KAAY,aAAcM,MAAM,IAAI,CAAxB,GAA6BH,MAAzC;;AAEA,MAAIG,MAAM,GAAG,CAAb,EAAgB;AACdE,IAAAA,aAAa,CAACV,GAAD,EAAMM,GAAN,CAAb;AACAN,IAAAA,GAAG,CAACX,CAAJ,GAAQ,EAAR,CAFc,CAEH;AACZ;;AAED,SAAOW,GAAP;AACD,C,CAED;AACA;;;AACA,SAASU,aAAT,CAAwBV,GAAxB,EAA6BW,KAA7B,EAAoC;AAClC,OAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0B,KAAK,CAACF,MAA1B,EAAkCxB,CAAC,EAAnC,EAAuC;AACrC,QAAIe,GAAG,CAACX,CAAJ,KAAU,EAAd,EAAkB;AAAE;AAClBW,MAAAA,GAAG,CAACG,CAAJ,IAASH,GAAG,CAACX,CAAb,CADgB,CACD;;AACfU,MAAAA,eAAe,CAACC,GAAD,EAAM,KAAN,CAAf,CAFgB,CAEY;;AAC5BA,MAAAA,GAAG,CAACX,CAAJ,GAAQ,CAAR,CAHgB,CAGN;AACX;;AACDW,IAAAA,GAAG,CAACZ,CAAJ,CAAMY,GAAG,CAACX,CAAJ,EAAN,IAAiBsB,KAAK,CAAC1B,CAAD,CAAtB;AACD;AACF,C,CAED;AACA;;;AACA,SAAS2B,YAAT,CAAuBZ,GAAvB,EAA4B;AAC1BA,EAAAA,GAAG,CAACG,CAAJ,IAASH,GAAG,CAACX,CAAb,CAD0B,CACX;;AACf,SAAOW,GAAG,CAACX,CAAJ,GAAQ,EAAf,EAAmB;AAAE;AACnBW,IAAAA,GAAG,CAACZ,CAAJ,CAAMY,GAAG,CAACX,CAAJ,EAAN,IAAiB,CAAjB;AACD;;AACDU,EAAAA,eAAe,CAACC,GAAD,EAAM,IAAN,CAAf,CAL0B,CAKC;AAE3B;;AACA,MAAIa,GAAG,GAAG,IAAIhB,UAAJ,CAAeG,GAAG,CAACK,MAAnB,CAAV;;AACA,OAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGe,GAAG,CAACK,MAAxB,EAAgCpB,CAAC,EAAjC,EAAqC;AACnC4B,IAAAA,GAAG,CAAC5B,CAAD,CAAH,GAAUe,GAAG,CAACE,CAAJ,CAAMjB,CAAC,IAAI,CAAX,KAAkB,KAAKA,CAAC,GAAG,CAAT,CAAnB,GAAmC,IAA5C;AACD;;AACD,SAAO4B,GAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAkBH,KAAlB,EAAyBL,GAAzB,EAA8BD,MAA9B,EAAsC;AACpC;AACAA,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AACAM,EAAAA,KAAK,GAAG9B,IAAI,CAACkC,cAAL,CAAoBJ,KAApB,CAAR,CAHoC,CAKpC;;AACA,MAAIX,GAAG,GAAGI,WAAW,CAACC,MAAD,EAASC,GAAT,CAArB;AACAI,EAAAA,aAAa,CAACV,GAAD,EAAMW,KAAN,CAAb;AACA,SAAOC,YAAY,CAACZ,GAAD,CAAnB;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgB,UAAT,CAAqBL,KAArB,EAA4BL,GAA5B,EAAiCD,MAAjC,EAAyC;AACvC,MAAIY,MAAM,GAAGH,OAAO,CAACH,KAAD,EAAQL,GAAR,EAAaD,MAAb,CAApB;AACA,SAAOxB,IAAI,CAACqC,KAAL,CAAWD,MAAX,CAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiB;AACfN,EAAAA,OAAO,EAAEA,OADM;AAEfE,EAAAA,UAAU,EAAEA,UAFG;AAGfZ,EAAAA,WAAW,EAAEA,WAHE;AAIfM,EAAAA,aAAa,EAAEA,aAJA;AAKfE,EAAAA,YAAY,EAAEA;AALC,CAAjB","sourcesContent":["// BLAKE2s hash function in pure Javascript\n// Adapted from the reference implementation in RFC7693\n// Ported to Javascript by DC - https://github.com/dcposch\n\nvar util = require('./util')\n\n// Little-endian byte access.\n// Expects a Uint8Array and an index\n// Returns the little-endian uint32 at v[i..i+3]\nfunction B2S_GET32 (v, i) {\n  return v[i] ^ (v[i + 1] << 8) ^ (v[i + 2] << 16) ^ (v[i + 3] << 24)\n}\n\n// Mixing function G.\nfunction B2S_G (a, b, c, d, x, y) {\n  v[a] = v[a] + v[b] + x\n  v[d] = ROTR32(v[d] ^ v[a], 16)\n  v[c] = v[c] + v[d]\n  v[b] = ROTR32(v[b] ^ v[c], 12)\n  v[a] = v[a] + v[b] + y\n  v[d] = ROTR32(v[d] ^ v[a], 8)\n  v[c] = v[c] + v[d]\n  v[b] = ROTR32(v[b] ^ v[c], 7)\n}\n\n// 32-bit right rotation\n// x should be a uint32\n// y must be between 1 and 31, inclusive\nfunction ROTR32 (x, y) {\n  return (x >>> y) ^ (x << (32 - y))\n}\n\n// Initialization Vector.\nvar BLAKE2S_IV = new Uint32Array([\n  0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,\n  0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19])\n\nvar SIGMA = new Uint8Array([\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n  11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n  7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n  9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n  2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n  12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,\n  13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,\n  6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,\n  10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0])\n\n// Compression function. \"last\" flag indicates last block\nvar v = new Uint32Array(16)\nvar m = new Uint32Array(16)\nfunction blake2sCompress (ctx, last) {\n  var i = 0\n  for (i = 0; i < 8; i++) { // init work variables\n    v[i] = ctx.h[i]\n    v[i + 8] = BLAKE2S_IV[i]\n  }\n\n  v[12] ^= ctx.t // low 32 bits of offset\n  v[13] ^= (ctx.t / 0x100000000) // high 32 bits\n  if (last) { // last block flag set ?\n    v[14] = ~v[14]\n  }\n\n  for (i = 0; i < 16; i++) { // get little-endian words\n    m[i] = B2S_GET32(ctx.b, 4 * i)\n  }\n\n  // ten rounds of mixing\n  // uncomment the DebugPrint calls to log the computation\n  // and match the RFC sample documentation\n  // util.debugPrint('          m[16]', m, 32)\n  for (i = 0; i < 10; i++) {\n    // util.debugPrint('   (i=' + i + ')  v[16]', v, 32)\n    B2S_G(0, 4, 8, 12, m[SIGMA[i * 16 + 0]], m[SIGMA[i * 16 + 1]])\n    B2S_G(1, 5, 9, 13, m[SIGMA[i * 16 + 2]], m[SIGMA[i * 16 + 3]])\n    B2S_G(2, 6, 10, 14, m[SIGMA[i * 16 + 4]], m[SIGMA[i * 16 + 5]])\n    B2S_G(3, 7, 11, 15, m[SIGMA[i * 16 + 6]], m[SIGMA[i * 16 + 7]])\n    B2S_G(0, 5, 10, 15, m[SIGMA[i * 16 + 8]], m[SIGMA[i * 16 + 9]])\n    B2S_G(1, 6, 11, 12, m[SIGMA[i * 16 + 10]], m[SIGMA[i * 16 + 11]])\n    B2S_G(2, 7, 8, 13, m[SIGMA[i * 16 + 12]], m[SIGMA[i * 16 + 13]])\n    B2S_G(3, 4, 9, 14, m[SIGMA[i * 16 + 14]], m[SIGMA[i * 16 + 15]])\n  }\n  // util.debugPrint('   (i=10) v[16]', v, 32)\n\n  for (i = 0; i < 8; i++) {\n    ctx.h[i] ^= v[i] ^ v[i + 8]\n  }\n  // util.debugPrint('h[8]', ctx.h, 32)\n}\n\n// Creates a BLAKE2s hashing context\n// Requires an output length between 1 and 32 bytes\n// Takes an optional Uint8Array key\nfunction blake2sInit (outlen, key) {\n  if (!(outlen > 0 && outlen <= 32)) {\n    throw new Error('Incorrect output length, should be in [1, 32]')\n  }\n  var keylen = key ? key.length : 0\n  if (key && !(keylen > 0 && keylen <= 32)) {\n    throw new Error('Incorrect key length, should be in [1, 32]')\n  }\n\n  var ctx = {\n    h: new Uint32Array(BLAKE2S_IV), // hash state\n    b: new Uint32Array(64), // input block\n    c: 0, // pointer within block\n    t: 0, // input count\n    outlen: outlen // output length in bytes\n  }\n  ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen\n\n  if (keylen > 0) {\n    blake2sUpdate(ctx, key)\n    ctx.c = 64 // at the end\n  }\n\n  return ctx\n}\n\n// Updates a BLAKE2s streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2sUpdate (ctx, input) {\n  for (var i = 0; i < input.length; i++) {\n    if (ctx.c === 64) { // buffer full ?\n      ctx.t += ctx.c // add counters\n      blake2sCompress(ctx, false) // compress (not last)\n      ctx.c = 0 // counter to zero\n    }\n    ctx.b[ctx.c++] = input[i]\n  }\n}\n\n// Completes a BLAKE2s streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2sFinal (ctx) {\n  ctx.t += ctx.c // mark last block offset\n  while (ctx.c < 64) { // fill up with zeros\n    ctx.b[ctx.c++] = 0\n  }\n  blake2sCompress(ctx, true) // final block flag = 1\n\n  // little endian convert and store\n  var out = new Uint8Array(ctx.outlen)\n  for (var i = 0; i < ctx.outlen; i++) {\n    out[i] = (ctx.h[i >> 2] >> (8 * (i & 3))) & 0xFF\n  }\n  return out\n}\n\n// Computes the BLAKE2S hash of a string or byte array, and returns a Uint8Array\n//\n// Returns a n-byte Uint8Array\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 32 bytes\n// - outlen - optional output length in bytes, default 64\nfunction blake2s (input, key, outlen) {\n  // preprocess inputs\n  outlen = outlen || 32\n  input = util.normalizeInput(input)\n\n  // do the math\n  var ctx = blake2sInit(outlen, key)\n  blake2sUpdate(ctx, input)\n  return blake2sFinal(ctx)\n}\n\n// Computes the BLAKE2S hash of a string or byte array\n//\n// Returns an n-byte hash in hex, all lowercase\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 32 bytes\n// - outlen - optional output length in bytes, default 64\nfunction blake2sHex (input, key, outlen) {\n  var output = blake2s(input, key, outlen)\n  return util.toHex(output)\n}\n\nmodule.exports = {\n  blake2s: blake2s,\n  blake2sHex: blake2sHex,\n  blake2sInit: blake2sInit,\n  blake2sUpdate: blake2sUpdate,\n  blake2sFinal: blake2sFinal\n}\n"]},"metadata":{},"sourceType":"script"}