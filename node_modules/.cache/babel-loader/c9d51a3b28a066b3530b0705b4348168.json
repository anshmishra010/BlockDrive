{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar constants = require('./constants');\n\nvar MT = constants.MT;\nvar SIMPLE = constants.SIMPLE;\nvar SYMS = constants.SYMS;\n/**\n * A CBOR Simple Value that does not map onto a known constant.\n */\n\nvar Simple = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of Simple.\n   *\n   * @param {integer} value - the simple value's integer value\n   */\n  function Simple(value) {\n    _classCallCheck(this, Simple);\n\n    if (typeof value !== 'number') {\n      throw new Error('Invalid Simple type: ' + typeof value);\n    }\n\n    if (value < 0 || value > 255 || (value | 0) !== value) {\n      throw new Error('value must be a small positive integer: ' + value);\n    }\n\n    this.value = value;\n  }\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n\n\n  _createClass(Simple, [{\n    key: \"toString\",\n    value: function toString() {\n      return 'simple(' + this.value + ')';\n    }\n    /**\n     * Debug string for simple value\n     *\n     * @returns {string} simple(value)\n     */\n\n  }, {\n    key: \"inspect\",\n    value: function inspect() {\n      return 'simple(' + this.value + ')';\n    }\n    /**\n     * Push the simple value onto the CBOR stream\n     *\n     * @param {cbor.Encoder} gen The generator to push onto\n     * @returns {number}\n     */\n\n  }, {\n    key: \"encodeCBOR\",\n    value: function encodeCBOR(gen) {\n      return gen._pushInt(this.value, MT.SIMPLE_FLOAT);\n    }\n    /**\n     * Is the given object a Simple?\n     *\n     * @param {any} obj - object to test\n     * @returns {bool} - is it Simple?\n     */\n\n  }], [{\n    key: \"isSimple\",\n    value: function isSimple(obj) {\n      return obj instanceof Simple;\n    }\n    /**\n     * Decode from the CBOR additional information into a JavaScript value.\n     * If the CBOR item has no parent, return a \"safe\" symbol instead of\n     * `null` or `undefined`, so that the value can be passed through a\n     * stream in object mode.\n     *\n     * @param {Number} val - the CBOR additional info to convert\n     * @param {bool} hasParent - Does the CBOR item have a parent?\n     * @returns {(null|undefined|Boolean|Symbol)} - the decoded value\n     */\n\n  }, {\n    key: \"decode\",\n    value: function decode(val, hasParent) {\n      if (hasParent == null) {\n        hasParent = true;\n      }\n\n      switch (val) {\n        case SIMPLE.FALSE:\n          return false;\n\n        case SIMPLE.TRUE:\n          return true;\n\n        case SIMPLE.NULL:\n          if (hasParent) {\n            return null;\n          } else {\n            return SYMS.NULL;\n          }\n\n        case SIMPLE.UNDEFINED:\n          if (hasParent) {\n            return undefined;\n          } else {\n            return SYMS.UNDEFINED;\n          }\n\n        case -1:\n          if (!hasParent) {\n            throw new Error('Invalid BREAK');\n          }\n\n          return SYMS.BREAK;\n\n        default:\n          return new Simple(val);\n      }\n    }\n  }]);\n\n  return Simple;\n}();\n\nmodule.exports = Simple;","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/borc/src/simple.js"],"names":["constants","require","MT","SIMPLE","SYMS","Simple","value","Error","gen","_pushInt","SIMPLE_FLOAT","obj","val","hasParent","FALSE","TRUE","NULL","UNDEFINED","undefined","BREAK","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAMC,EAAE,GAAGF,SAAS,CAACE,EAArB;AACA,IAAMC,MAAM,GAAGH,SAAS,CAACG,MAAzB;AACA,IAAMC,IAAI,GAAGJ,SAAS,CAACI,IAAvB;AAEA;AACA;AACA;;IACMC,M;AACJ;AACF;AACA;AACA;AACA;AACE,kBAAaC,KAAb,EAAoB;AAAA;;AAClB,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,0BAA2B,OAAOD,KAA5C,CAAN;AACD;;AACD,QAAKA,KAAK,GAAG,CAAT,IAAgBA,KAAK,GAAG,GAAxB,IAAiC,CAACA,KAAK,GAAG,CAAT,MAAgBA,KAArD,EAA6D;AAC3D,YAAM,IAAIC,KAAJ,CAAU,6CAA6CD,KAAvD,CAAN;AACD;;AACD,SAAKA,KAAL,GAAaA,KAAb;AACD;AAED;AACF;AACA;AACA;AACA;;;;;+BACc;AACV,aAAO,YAAY,KAAKA,KAAjB,GAAyB,GAAhC;AACD;AAED;AACF;AACA;AACA;AACA;;;;8BACa;AACT,aAAO,YAAY,KAAKA,KAAjB,GAAyB,GAAhC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;+BACcE,G,EAAK;AACf,aAAOA,GAAG,CAACC,QAAJ,CAAa,KAAKH,KAAlB,EAAyBJ,EAAE,CAACQ,YAA5B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;6BACmBC,G,EAAK;AACpB,aAAOA,GAAG,YAAYN,MAAtB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;2BACiBO,G,EAAKC,S,EAAW;AAC7B,UAAIA,SAAS,IAAI,IAAjB,EAAuB;AACrBA,QAAAA,SAAS,GAAG,IAAZ;AACD;;AACD,cAAQD,GAAR;AACE,aAAKT,MAAM,CAACW,KAAZ;AACE,iBAAO,KAAP;;AACF,aAAKX,MAAM,CAACY,IAAZ;AACE,iBAAO,IAAP;;AACF,aAAKZ,MAAM,CAACa,IAAZ;AACE,cAAIH,SAAJ,EAAe;AACb,mBAAO,IAAP;AACD,WAFD,MAEO;AACL,mBAAOT,IAAI,CAACY,IAAZ;AACD;;AACH,aAAKb,MAAM,CAACc,SAAZ;AACE,cAAIJ,SAAJ,EAAe;AACb,mBAAOK,SAAP;AACD,WAFD,MAEO;AACL,mBAAOd,IAAI,CAACa,SAAZ;AACD;;AACH,aAAK,CAAC,CAAN;AACE,cAAI,CAACJ,SAAL,EAAgB;AACd,kBAAM,IAAIN,KAAJ,CAAU,eAAV,CAAN;AACD;;AACD,iBAAOH,IAAI,CAACe,KAAZ;;AACF;AACE,iBAAO,IAAId,MAAJ,CAAWO,GAAX,CAAP;AAvBJ;AAyBD;;;;;;AAGHQ,MAAM,CAACC,OAAP,GAAiBhB,MAAjB","sourcesContent":["'use strict'\n\nconst constants = require('./constants')\nconst MT = constants.MT\nconst SIMPLE = constants.SIMPLE\nconst SYMS = constants.SYMS\n\n/**\n * A CBOR Simple Value that does not map onto a known constant.\n */\nclass Simple {\n  /**\n   * Creates an instance of Simple.\n   *\n   * @param {integer} value - the simple value's integer value\n   */\n  constructor (value) {\n    if (typeof value !== 'number') {\n      throw new Error('Invalid Simple type: ' + (typeof value))\n    }\n    if ((value < 0) || (value > 255) || ((value | 0) !== value)) {\n      throw new Error('value must be a small positive integer: ' + value)\n    }\n    this.value = value\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  toString () {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  inspect () {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n  encodeCBOR (gen) {\n    return gen._pushInt(this.value, MT.SIMPLE_FLOAT)\n  }\n\n  /**\n   * Is the given object a Simple?\n   *\n   * @param {any} obj - object to test\n   * @returns {bool} - is it Simple?\n   */\n  static isSimple (obj) {\n    return obj instanceof Simple\n  }\n\n  /**\n   * Decode from the CBOR additional information into a JavaScript value.\n   * If the CBOR item has no parent, return a \"safe\" symbol instead of\n   * `null` or `undefined`, so that the value can be passed through a\n   * stream in object mode.\n   *\n   * @param {Number} val - the CBOR additional info to convert\n   * @param {bool} hasParent - Does the CBOR item have a parent?\n   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value\n   */\n  static decode (val, hasParent) {\n    if (hasParent == null) {\n      hasParent = true\n    }\n    switch (val) {\n      case SIMPLE.FALSE:\n        return false\n      case SIMPLE.TRUE:\n        return true\n      case SIMPLE.NULL:\n        if (hasParent) {\n          return null\n        } else {\n          return SYMS.NULL\n        }\n      case SIMPLE.UNDEFINED:\n        if (hasParent) {\n          return undefined\n        } else {\n          return SYMS.UNDEFINED\n        }\n      case -1:\n        if (!hasParent) {\n          throw new Error('Invalid BREAK')\n        }\n        return SYMS.BREAK\n      default:\n        return new Simple(val)\n    }\n  }\n}\n\nmodule.exports = Simple\n"]},"metadata":{},"sourceType":"script"}