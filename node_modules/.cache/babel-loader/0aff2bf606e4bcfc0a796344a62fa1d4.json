{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar crypto = self.crypto || self.msCrypto;\n\nmodule.exports = function (algorithm) {\n  if (typeof self === 'undefined' || !self.crypto && !self.msCrypto) {\n    throw new Error('Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context');\n  }\n\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var d;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = algorithm;\n              _context.next = _context.t0 === 'sha1' ? 3 : _context.t0 === 'sha2-256' ? 8 : _context.t0 === 'sha2-512' ? 13 : _context.t0 === 'dbl-sha2-256' ? 18 : 26;\n              break;\n\n            case 3:\n              _context.t1 = Buffer;\n              _context.next = 6;\n              return crypto.subtle.digest({\n                name: 'SHA-1'\n              }, data);\n\n            case 6:\n              _context.t2 = _context.sent;\n              return _context.abrupt(\"return\", _context.t1.from.call(_context.t1, _context.t2));\n\n            case 8:\n              _context.t3 = Buffer;\n              _context.next = 11;\n              return crypto.subtle.digest({\n                name: 'SHA-256'\n              }, data);\n\n            case 11:\n              _context.t4 = _context.sent;\n              return _context.abrupt(\"return\", _context.t3.from.call(_context.t3, _context.t4));\n\n            case 13:\n              _context.t5 = Buffer;\n              _context.next = 16;\n              return crypto.subtle.digest({\n                name: 'SHA-512'\n              }, data);\n\n            case 16:\n              _context.t6 = _context.sent;\n              return _context.abrupt(\"return\", _context.t5.from.call(_context.t5, _context.t6));\n\n            case 18:\n              _context.next = 20;\n              return crypto.subtle.digest({\n                name: 'SHA-256'\n              }, data);\n\n            case 20:\n              d = _context.sent;\n              _context.t7 = Buffer;\n              _context.next = 24;\n              return crypto.subtle.digest({\n                name: 'SHA-256'\n              }, d);\n\n            case 24:\n              _context.t8 = _context.sent;\n              return _context.abrupt(\"return\", _context.t7.from.call(_context.t7, _context.t8));\n\n            case 26:\n              throw new Error(\"\".concat(algorithm, \" is not a supported algorithm\"));\n\n            case 27:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipld-dag-pb/node_modules/multihashing-async/src/sha.browser.js"],"names":["require","Buffer","crypto","self","msCrypto","module","exports","algorithm","Error","data","subtle","digest","name","from","d"],"mappings":"AAAA;;;;;;eAEmBA,OAAO,CAAC,QAAD,C;IAAlBC,M,YAAAA,M;;AAER,IAAMC,MAAM,GAAGC,IAAI,CAACD,MAAL,IAAeC,IAAI,CAACC,QAAnC;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAACC,SAAD,EAAe;AAC9B,MAAI,OAAOJ,IAAP,KAAgB,WAAhB,IAAgC,CAACA,IAAI,CAACD,MAAN,IAAgB,CAACC,IAAI,CAACC,QAA1D,EAAqE;AACnE,UAAM,IAAII,KAAJ,CACJ,2IADI,CAAN;AAGD;;AAED;AAAA,wEAAO,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACGF,SADH;AAAA,8CAEE,MAFF,uBAIE,UAJF,uBAME,UANF,wBAQE,cARF;AAAA;;AAAA;AAAA,4BAGMN,MAHN;AAAA;AAAA,qBAGwBC,MAAM,CAACQ,MAAP,CAAcC,MAAd,CAAqB;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eAArB,EAAwCH,IAAxC,CAHxB;;AAAA;AAAA;AAAA,2DAGaI,IAHb;;AAAA;AAAA,4BAKMZ,MALN;AAAA;AAAA,qBAKwBC,MAAM,CAACQ,MAAP,CAAcC,MAAd,CAAqB;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eAArB,EAA0CH,IAA1C,CALxB;;AAAA;AAAA;AAAA,2DAKaI,IALb;;AAAA;AAAA,4BAOMZ,MAPN;AAAA;AAAA,qBAOwBC,MAAM,CAACQ,MAAP,CAAcC,MAAd,CAAqB;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eAArB,EAA0CH,IAA1C,CAPxB;;AAAA;AAAA;AAAA,2DAOaI,IAPb;;AAAA;AAAA;AAAA,qBASeX,MAAM,CAACQ,MAAP,CAAcC,MAAd,CAAqB;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eAArB,EAA0CH,IAA1C,CATf;;AAAA;AASKK,cAAAA,CATL;AAAA,4BAUMb,MAVN;AAAA;AAAA,qBAUwBC,MAAM,CAACQ,MAAP,CAAcC,MAAd,CAAqB;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eAArB,EAA0CE,CAA1C,CAVxB;;AAAA;AAAA;AAAA,2DAUaD,IAVb;;AAAA;AAAA,oBAaK,IAAIL,KAAJ,WAAaD,SAAb,mCAbL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAgBD,CAvBD","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\n\nconst crypto = self.crypto || self.msCrypto\n\nmodule.exports = (algorithm) => {\n  if (typeof self === 'undefined' || (!self.crypto && !self.msCrypto)) {\n    throw new Error(\n      'Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context'\n    )\n  }\n\n  return async (data) => {\n    switch (algorithm) {\n      case 'sha1':\n        return Buffer.from(await crypto.subtle.digest({ name: 'SHA-1' }, data))\n      case 'sha2-256':\n        return Buffer.from(await crypto.subtle.digest({ name: 'SHA-256' }, data))\n      case 'sha2-512':\n        return Buffer.from(await crypto.subtle.digest({ name: 'SHA-512' }, data))\n      case 'dbl-sha2-256': {\n        const d = await crypto.subtle.digest({ name: 'SHA-256' }, data)\n        return Buffer.from(await crypto.subtle.digest({ name: 'SHA-256' }, d))\n      }\n      default:\n        throw new Error(`${algorithm} is not a supported algorithm`)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}