{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer');\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nmodule.exports = function (send) {\n  return promisify(function (peerId, opts, callback) {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    var handleResult = function handleResult(res, callback) {\n      var peerIds = res.map(function (r) {\n        return new PeerInfo(PeerId.createFromB58String(r.ID));\n      });\n      callback(null, peerIds);\n    };\n\n    send({\n      path: 'dht/query',\n      args: peerId,\n      qs: opts\n    }, function (err, result) {\n      if (err) {\n        return callback(err);\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback);\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/dht/query.js"],"names":["promisify","require","streamToValueWithTransformer","PeerId","PeerInfo","module","exports","send","peerId","opts","callback","handleResult","res","peerIds","map","r","createFromB58String","ID","path","args","qs","err","result"],"mappings":"AAAA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAMC,4BAA4B,GAAGD,OAAO,CAAC,2CAAD,CAA5C;;AAEA,IAAME,MAAM,GAAGF,OAAO,CAAC,SAAD,CAAtB;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAxB;;AAEAI,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,SAAOP,SAAS,CAAC,UAACQ,MAAD,EAASC,IAAT,EAAeC,QAAf,EAA4B;AAC3C,QAAI,OAAOD,IAAP,KAAgB,UAAhB,IAA8B,CAACC,QAAnC,EAA6C;AAC3CA,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD,KAJ0C,CAM3C;AACA;;;AACA,QAAI,OAAOA,IAAP,KAAgB,UAAhB,IAA8B,OAAOC,QAAP,KAAoB,UAAtD,EAAkE;AAChEA,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,QAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAMF,QAAN,EAAmB;AACtC,UAAMG,OAAO,GAAGD,GAAG,CAACE,GAAJ,CAAQ,UAACC,CAAD;AAAA,eAAQ,IAAIX,QAAJ,CAAaD,MAAM,CAACa,mBAAP,CAA2BD,CAAC,CAACE,EAA7B,CAAb,CAAR;AAAA,OAAR,CAAhB;AAEAP,MAAAA,QAAQ,CAAC,IAAD,EAAOG,OAAP,CAAR;AACD,KAJD;;AAMAN,IAAAA,IAAI,CAAC;AACHW,MAAAA,IAAI,EAAE,WADH;AAEHC,MAAAA,IAAI,EAAEX,MAFH;AAGHY,MAAAA,EAAE,EAAEX;AAHD,KAAD,EAID,UAACY,GAAD,EAAMC,MAAN,EAAiB;AAClB,UAAID,GAAJ,EAAS;AACP,eAAOX,QAAQ,CAACW,GAAD,CAAf;AACD;;AAEDnB,MAAAA,4BAA4B,CAACoB,MAAD,EAASX,YAAT,EAAuBD,QAAvB,CAA5B;AACD,KAVG,CAAJ;AAWD,GA9Be,CAAhB;AA+BD,CAhCD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer')\n\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\n\nmodule.exports = (send) => {\n  return promisify((peerId, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts\n      opts = {}\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    const handleResult = (res, callback) => {\n      const peerIds = res.map((r) => (new PeerInfo(PeerId.createFromB58String(r.ID))))\n\n      callback(null, peerIds)\n    }\n\n    send({\n      path: 'dht/query',\n      args: peerId,\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback)\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}