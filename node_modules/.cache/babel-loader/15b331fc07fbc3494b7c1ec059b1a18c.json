{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar blake = require('blakejs');\n\nvar minB = 0xb201;\nvar minS = 0xb241;\nvar blake2b = {\n  init: blake.blake2bInit,\n  update: blake.blake2bUpdate,\n  digest: blake.blake2bFinal\n};\nvar blake2s = {\n  init: blake.blake2sInit,\n  update: blake.blake2sUpdate,\n  digest: blake.blake2sFinal\n}; // Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\n// eslint-disable-next-line\n\nvar makeB2Hash = function makeB2Hash(size, hf) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var ctx;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              ctx = hf.init(size, null);\n              hf.update(ctx, data);\n              return _context.abrupt(\"return\", Buffer.from(hf.digest(ctx)));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nmodule.exports = function (table) {\n  for (var i = 0; i < 64; i++) {\n    table[minB + i] = makeB2Hash(i + 1, blake2b);\n  }\n\n  for (var _i = 0; _i < 32; _i++) {\n    table[minS + _i] = makeB2Hash(_i + 1, blake2s);\n  }\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/multihashing-async/src/blake.js"],"names":["require","Buffer","blake","minB","minS","blake2b","init","blake2bInit","update","blake2bUpdate","digest","blake2bFinal","blake2s","blake2sInit","blake2sUpdate","blake2sFinal","makeB2Hash","size","hf","data","ctx","from","module","exports","table","i"],"mappings":"AAAA;;;;;;eAEmBA,OAAO,CAAC,QAAD,C;IAAlBC,M,YAAAA,M;;AACR,IAAMC,KAAK,GAAGF,OAAO,CAAC,SAAD,CAArB;;AAEA,IAAMG,IAAI,GAAG,MAAb;AACA,IAAMC,IAAI,GAAG,MAAb;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAEJ,KAAK,CAACK,WADE;AAEdC,EAAAA,MAAM,EAAEN,KAAK,CAACO,aAFA;AAGdC,EAAAA,MAAM,EAAER,KAAK,CAACS;AAHA,CAAhB;AAMA,IAAMC,OAAO,GAAG;AACdN,EAAAA,IAAI,EAAEJ,KAAK,CAACW,WADE;AAEdL,EAAAA,MAAM,EAAEN,KAAK,CAACY,aAFA;AAGdJ,EAAAA,MAAM,EAAER,KAAK,CAACa;AAHA,CAAhB,C,CAMA;AACA;AACA;AACA;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOC,EAAP;AAAA;AAAA,wEAAc,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBC,cAAAA,GADyB,GACnBF,EAAE,CAACZ,IAAH,CAAQW,IAAR,EAAc,IAAd,CADmB;AAE/BC,cAAAA,EAAE,CAACV,MAAH,CAAUY,GAAV,EAAeD,IAAf;AAF+B,+CAGxBlB,MAAM,CAACoB,IAAP,CAAYH,EAAE,CAACR,MAAH,CAAUU,GAAV,CAAZ,CAHwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAd;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAMAE,MAAM,CAACC,OAAP,GAAiB,UAACC,KAAD,EAAW;AAC1B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BD,IAAAA,KAAK,CAACrB,IAAI,GAAGsB,CAAR,CAAL,GAAkBT,UAAU,CAACS,CAAC,GAAG,CAAL,EAAQpB,OAAR,CAA5B;AACD;;AACD,OAAK,IAAIoB,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG,EAApB,EAAwBA,EAAC,EAAzB,EAA6B;AAC3BD,IAAAA,KAAK,CAACpB,IAAI,GAAGqB,EAAR,CAAL,GAAkBT,UAAU,CAACS,EAAC,GAAG,CAAL,EAAQb,OAAR,CAA5B;AACD;AACF,CAPD","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst blake = require('blakejs')\n\nconst minB = 0xb201\nconst minS = 0xb241\n\nconst blake2b = {\n  init: blake.blake2bInit,\n  update: blake.blake2bUpdate,\n  digest: blake.blake2bFinal\n}\n\nconst blake2s = {\n  init: blake.blake2sInit,\n  update: blake.blake2sUpdate,\n  digest: blake.blake2sFinal\n}\n\n// Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\n// eslint-disable-next-line\nconst makeB2Hash = (size, hf) => async (data) => {\n  const ctx = hf.init(size, null)\n  hf.update(ctx, data)\n  return Buffer.from(hf.digest(ctx))\n}\n\nmodule.exports = (table) => {\n  for (let i = 0; i < 64; i++) {\n    table[minB + i] = makeB2Hash(i + 1, blake2b)\n  }\n  for (let i = 0; i < 32; i++) {\n    table[minS + i] = makeB2Hash(i + 1, blake2s)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}