{"ast":null,"code":"/* global self */\n'use strict';\n\nvar nodeify = require('nodeify');\n\nvar webCrypto = getWebCrypto();\n\nfunction getWebCrypto() {\n  if (self.crypto) {\n    return self.crypto.subtle || self.crypto.webkitSubtle;\n  }\n\n  if (self.msCrypto) {\n    return self.msCrypto.subtle;\n  }\n}\n\nfunction webCryptoHash(type) {\n  if (!webCrypto) {\n    throw new Error('Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context');\n  }\n\n  return function (data, callback) {\n    var res = webCrypto.digest({\n      name: type\n    }, data);\n\n    if (typeof res.then !== 'function') {\n      // IE11\n      res.onerror = function () {\n        callback(new Error(\"hashing data using \".concat(type)));\n      };\n\n      res.oncomplete = function (e) {\n        callback(null, e.target.result);\n      };\n\n      return;\n    }\n\n    nodeify(res.then(function (raw) {\n      return Buffer.from(new Uint8Array(raw));\n    }), callback);\n  };\n}\n\nfunction sha1(buf, callback) {\n  webCryptoHash('SHA-1')(buf, callback);\n}\n\nfunction sha2256(buf, callback) {\n  webCryptoHash('SHA-256')(buf, callback);\n}\n\nfunction sha2512(buf, callback) {\n  webCryptoHash('SHA-512')(buf, callback);\n}\n\nmodule.exports = {\n  sha1: sha1,\n  sha2256: sha2256,\n  sha2512: sha2512\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/libp2p-crypto-secp256k1/node_modules/multihashing-async/src/crypto-sha1-2-browser.js"],"names":["nodeify","require","webCrypto","getWebCrypto","self","crypto","subtle","webkitSubtle","msCrypto","webCryptoHash","type","Error","data","callback","res","digest","name","then","onerror","oncomplete","e","target","result","raw","Buffer","from","Uint8Array","sha1","buf","sha2256","sha2512","module","exports"],"mappings":"AAAA;AAEA;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEA,IAAMC,SAAS,GAAGC,YAAY,EAA9B;;AAEA,SAASA,YAAT,GAAyB;AACvB,MAAIC,IAAI,CAACC,MAAT,EAAiB;AACf,WAAOD,IAAI,CAACC,MAAL,CAAYC,MAAZ,IAAsBF,IAAI,CAACC,MAAL,CAAYE,YAAzC;AACD;;AAED,MAAIH,IAAI,CAACI,QAAT,EAAmB;AACjB,WAAOJ,IAAI,CAACI,QAAL,CAAcF,MAArB;AACD;AACF;;AAED,SAASG,aAAT,CAAwBC,IAAxB,EAA8B;AAC5B,MAAI,CAACR,SAAL,EAAgB;AACd,UAAM,IAAIS,KAAJ,CAAU,2IAAV,CAAN;AACD;;AAED,SAAO,UAACC,IAAD,EAAOC,QAAP,EAAoB;AACzB,QAAMC,GAAG,GAAGZ,SAAS,CAACa,MAAV,CAAiB;AAAEC,MAAAA,IAAI,EAAEN;AAAR,KAAjB,EAAiCE,IAAjC,CAAZ;;AAEA,QAAI,OAAOE,GAAG,CAACG,IAAX,KAAoB,UAAxB,EAAoC;AAAE;AACpCH,MAAAA,GAAG,CAACI,OAAJ,GAAc,YAAM;AAClBL,QAAAA,QAAQ,CAAC,IAAIF,KAAJ,8BAAgCD,IAAhC,EAAD,CAAR;AACD,OAFD;;AAGAI,MAAAA,GAAG,CAACK,UAAJ,GAAiB,UAACC,CAAD,EAAO;AACtBP,QAAAA,QAAQ,CAAC,IAAD,EAAOO,CAAC,CAACC,MAAF,CAASC,MAAhB,CAAR;AACD,OAFD;;AAGA;AACD;;AAEDtB,IAAAA,OAAO,CACLc,GAAG,CAACG,IAAJ,CAAS,UAACM,GAAD;AAAA,aAASC,MAAM,CAACC,IAAP,CAAY,IAAIC,UAAJ,CAAeH,GAAf,CAAZ,CAAT;AAAA,KAAT,CADK,EAELV,QAFK,CAAP;AAID,GAjBD;AAkBD;;AAED,SAASc,IAAT,CAAeC,GAAf,EAAoBf,QAApB,EAA8B;AAC5BJ,EAAAA,aAAa,CAAC,OAAD,CAAb,CAAuBmB,GAAvB,EAA4Bf,QAA5B;AACD;;AAED,SAASgB,OAAT,CAAkBD,GAAlB,EAAuBf,QAAvB,EAAiC;AAC/BJ,EAAAA,aAAa,CAAC,SAAD,CAAb,CAAyBmB,GAAzB,EAA8Bf,QAA9B;AACD;;AAED,SAASiB,OAAT,CAAkBF,GAAlB,EAAuBf,QAAvB,EAAiC;AAC/BJ,EAAAA,aAAa,CAAC,SAAD,CAAb,CAAyBmB,GAAzB,EAA8Bf,QAA9B;AACD;;AAEDkB,MAAM,CAACC,OAAP,GAAiB;AACfL,EAAAA,IAAI,EAAEA,IADS;AAEfE,EAAAA,OAAO,EAAEA,OAFM;AAGfC,EAAAA,OAAO,EAAEA;AAHM,CAAjB","sourcesContent":["/* global self */\n\n'use strict'\n\nconst nodeify = require('nodeify')\n\nconst webCrypto = getWebCrypto()\n\nfunction getWebCrypto () {\n  if (self.crypto) {\n    return self.crypto.subtle || self.crypto.webkitSubtle\n  }\n\n  if (self.msCrypto) {\n    return self.msCrypto.subtle\n  }\n}\n\nfunction webCryptoHash (type) {\n  if (!webCrypto) {\n    throw new Error('Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context')\n  }\n\n  return (data, callback) => {\n    const res = webCrypto.digest({ name: type }, data)\n\n    if (typeof res.then !== 'function') { // IE11\n      res.onerror = () => {\n        callback(new Error(`hashing data using ${type}`))\n      }\n      res.oncomplete = (e) => {\n        callback(null, e.target.result)\n      }\n      return\n    }\n\n    nodeify(\n      res.then((raw) => Buffer.from(new Uint8Array(raw))),\n      callback\n    )\n  }\n}\n\nfunction sha1 (buf, callback) {\n  webCryptoHash('SHA-1')(buf, callback)\n}\n\nfunction sha2256 (buf, callback) {\n  webCryptoHash('SHA-256')(buf, callback)\n}\n\nfunction sha2512 (buf, callback) {\n  webCryptoHash('SHA-512')(buf, callback)\n}\n\nmodule.exports = {\n  sha1: sha1,\n  sha2256: sha2256,\n  sha2512: sha2512\n}\n"]},"metadata":{},"sourceType":"script"}