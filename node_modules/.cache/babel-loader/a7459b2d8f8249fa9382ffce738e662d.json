{"ast":null,"code":"'use strict';\n\nvar BN = require('asn1.js').bignum; // Convert a BN.js instance to a base64 encoded string without padding\n// Adapted from https://tools.ietf.org/html/draft-ietf-jose-json-web-signature-41#appendix-C\n\n\nexports.toBase64 = function toBase64(bn, len) {\n  // if len is defined then the bytes are leading-0 padded to the length\n  var s = bn.toArrayLike(Buffer, 'be', len).toString('base64');\n  return s.replace(/(=*)$/, '') // Remove any trailing '='s\n  .replace(/\\+/g, '-') // 62nd char of encoding\n  .replace(/\\//g, '_'); // 63rd char of encoding\n}; // Convert a base64 encoded string to a BN.js instance\n\n\nexports.toBn = function toBn(str) {\n  return new BN(Buffer.from(str, 'base64'));\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/libp2p-crypto/src/util.js"],"names":["BN","require","bignum","exports","toBase64","bn","len","s","toArrayLike","Buffer","toString","replace","toBn","str","from"],"mappings":"AAAA;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBC,MAA9B,C,CAEA;AACA;;;AACAC,OAAO,CAACC,QAAR,GAAmB,SAASA,QAAT,CAAmBC,EAAnB,EAAuBC,GAAvB,EAA4B;AAC7C;AACA,MAAMC,CAAC,GAAGF,EAAE,CAACG,WAAH,CAAeC,MAAf,EAAuB,IAAvB,EAA6BH,GAA7B,EAAkCI,QAAlC,CAA2C,QAA3C,CAAV;AAEA,SAAOH,CAAC,CACLI,OADI,CACI,OADJ,EACa,EADb,EACiB;AADjB,GAEJA,OAFI,CAEI,KAFJ,EAEW,GAFX,EAEgB;AAFhB,GAGJA,OAHI,CAGI,KAHJ,EAGW,GAHX,CAAP,CAJ6C,CAOtB;AACxB,CARD,C,CAUA;;;AACAR,OAAO,CAACS,IAAR,GAAe,SAASA,IAAT,CAAeC,GAAf,EAAoB;AACjC,SAAO,IAAIb,EAAJ,CAAOS,MAAM,CAACK,IAAP,CAAYD,GAAZ,EAAiB,QAAjB,CAAP,CAAP;AACD,CAFD","sourcesContent":["'use strict'\n\nconst BN = require('asn1.js').bignum\n\n// Convert a BN.js instance to a base64 encoded string without padding\n// Adapted from https://tools.ietf.org/html/draft-ietf-jose-json-web-signature-41#appendix-C\nexports.toBase64 = function toBase64 (bn, len) {\n  // if len is defined then the bytes are leading-0 padded to the length\n  const s = bn.toArrayLike(Buffer, 'be', len).toString('base64')\n\n  return s\n    .replace(/(=*)$/, '') // Remove any trailing '='s\n    .replace(/\\+/g, '-') // 62nd char of encoding\n    .replace(/\\//g, '_') // 63rd char of encoding\n}\n\n// Convert a base64 encoded string to a BN.js instance\nexports.toBn = function toBn (str) {\n  return new BN(Buffer.from(str, 'base64'))\n}\n"]},"metadata":{},"sourceType":"script"}