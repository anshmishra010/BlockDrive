{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar Transform = require('readable-stream').Transform;\n\nvar isNode = require('detect-node');\n\nvar PADDING = '--';\nvar NEW_LINE = '\\r\\n';\nvar NEW_LINE_BUFFER = Buffer.from(NEW_LINE);\n\nvar Multipart = /*#__PURE__*/function (_Transform) {\n  _inherits(Multipart, _Transform);\n\n  var _super = _createSuper(Multipart);\n\n  function Multipart(options) {\n    var _this;\n\n    _classCallCheck(this, Multipart);\n\n    _this = _super.call(this, Object.assign({}, options, {\n      objectMode: true,\n      highWaterMark: 1\n    }));\n    _this._boundary = _this._generateBoundary();\n    _this._files = [];\n    _this._draining = false;\n    return _this;\n  }\n\n  _createClass(Multipart, [{\n    key: \"_flush\",\n    value: function _flush() {\n      this.push(Buffer.from(PADDING + this._boundary + PADDING + NEW_LINE));\n      this.push(null);\n    }\n  }, {\n    key: \"_generateBoundary\",\n    value: function _generateBoundary() {\n      var boundary = '--------------------------';\n\n      for (var i = 0; i < 24; i++) {\n        boundary += Math.floor(Math.random() * 10).toString(16);\n      }\n\n      return boundary;\n    }\n  }, {\n    key: \"_transform\",\n    value: function _transform(file, encoding, callback) {\n      if (Buffer.isBuffer(file)) {\n        this.push(file);\n        return callback(); // early\n      } // not a buffer, must be a file\n\n\n      this._files.push(file);\n\n      this._maybeDrain(callback);\n    }\n  }, {\n    key: \"_maybeDrain\",\n    value: function _maybeDrain(callback) {\n      var _this2 = this;\n\n      if (!this._draining) {\n        if (this._files.length) {\n          this._draining = true;\n\n          var file = this._files.shift();\n\n          this._pushFile(file, function (err) {\n            _this2._draining = false;\n\n            if (err) {\n              _this2.emit('error', err);\n            } else {\n              _this2._maybeDrain(callback);\n            }\n          });\n        } else {\n          this.emit('drained all files');\n          callback();\n        }\n      } else {\n        this.once('drained all files', callback);\n      }\n    }\n  }, {\n    key: \"_pushFile\",\n    value: function _pushFile(file, callback) {\n      var _this3 = this;\n\n      var leading = this._leading(file.headers || {});\n\n      this.push(leading);\n      var content = file.content || Buffer.alloc(0);\n\n      if (Buffer.isBuffer(content)) {\n        this.push(content);\n        this.push(NEW_LINE_BUFFER);\n        return callback(); // early\n      } // From now on we assume content is a stream\n\n\n      content.once('error', this.emit.bind(this, 'error'));\n      content.once('end', function () {\n        _this3.push(NEW_LINE_BUFFER);\n\n        callback(); // TODO: backpressure!!! wait once self is drained so we can proceed\n        // This does not work\n        // this.once('drain', () => {\n        //   callback()\n        // })\n      });\n      content.on('data', function (data) {\n        var drained = _this3.push(data); // Only do the drain dance on Node.js.\n        // In browserland, the underlying stream\n        // does NOT drain because the request is only sent\n        // once this stream ends.\n\n\n        if (!drained && isNode) {\n          content.pause();\n\n          _this3.once('drain', function () {\n            return content.resume();\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_leading\",\n    value: function _leading(headers) {\n      var leading = [PADDING + this._boundary];\n      Object.keys(headers).forEach(function (header) {\n        leading.push(header + ': ' + headers[header]);\n      });\n      leading.push('');\n      leading.push('');\n      var leadingStr = leading.join(NEW_LINE);\n      return Buffer.from(leadingStr);\n    }\n  }]);\n\n  return Multipart;\n}(Transform);\n\nmodule.exports = Multipart;","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/utils/multipart.js"],"names":["Transform","require","isNode","PADDING","NEW_LINE","NEW_LINE_BUFFER","Buffer","from","Multipart","options","Object","assign","objectMode","highWaterMark","_boundary","_generateBoundary","_files","_draining","push","boundary","i","Math","floor","random","toString","file","encoding","callback","isBuffer","_maybeDrain","length","shift","_pushFile","err","emit","once","leading","_leading","headers","content","alloc","bind","on","data","drained","pause","resume","keys","forEach","header","leadingStr","join","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Transform = require('readable-stream').Transform\nconst isNode = require('detect-node')\n\nconst PADDING = '--'\nconst NEW_LINE = '\\r\\n'\nconst NEW_LINE_BUFFER = Buffer.from(NEW_LINE)\n\nclass Multipart extends Transform {\n  constructor (options) {\n    super(Object.assign({}, options, { objectMode: true, highWaterMark: 1 }))\n\n    this._boundary = this._generateBoundary()\n    this._files = []\n    this._draining = false\n  }\n\n  _flush () {\n    this.push(Buffer.from(PADDING + this._boundary + PADDING + NEW_LINE))\n    this.push(null)\n  }\n\n  _generateBoundary () {\n    var boundary = '--------------------------'\n    for (var i = 0; i < 24; i++) {\n      boundary += Math.floor(Math.random() * 10).toString(16)\n    }\n\n    return boundary\n  }\n\n  _transform (file, encoding, callback) {\n    if (Buffer.isBuffer(file)) {\n      this.push(file)\n      return callback() // early\n    }\n    // not a buffer, must be a file\n    this._files.push(file)\n    this._maybeDrain(callback)\n  }\n\n  _maybeDrain (callback) {\n    if (!this._draining) {\n      if (this._files.length) {\n        this._draining = true\n        const file = this._files.shift()\n        this._pushFile(file, (err) => {\n          this._draining = false\n          if (err) {\n            this.emit('error', err)\n          } else {\n            this._maybeDrain(callback)\n          }\n        })\n      } else {\n        this.emit('drained all files')\n        callback()\n      }\n    } else {\n      this.once('drained all files', callback)\n    }\n  }\n\n  _pushFile (file, callback) {\n    const leading = this._leading(file.headers || {})\n\n    this.push(leading)\n\n    let content = file.content || Buffer.alloc(0)\n\n    if (Buffer.isBuffer(content)) {\n      this.push(content)\n      this.push(NEW_LINE_BUFFER)\n      return callback() // early\n    }\n\n    // From now on we assume content is a stream\n    content.once('error', this.emit.bind(this, 'error'))\n\n    content.once('end', () => {\n      this.push(NEW_LINE_BUFFER)\n      callback()\n\n      // TODO: backpressure!!! wait once self is drained so we can proceed\n      // This does not work\n      // this.once('drain', () => {\n      //   callback()\n      // })\n    })\n\n    content.on('data', (data) => {\n      const drained = this.push(data)\n      // Only do the drain dance on Node.js.\n      // In browserland, the underlying stream\n      // does NOT drain because the request is only sent\n      // once this stream ends.\n      if (!drained && isNode) {\n        content.pause()\n        this.once('drain', () => content.resume())\n      }\n    })\n  }\n\n  _leading (headers) {\n    var leading = [PADDING + this._boundary]\n\n    Object.keys(headers).forEach((header) => {\n      leading.push(header + ': ' + headers[header])\n    })\n\n    leading.push('')\n    leading.push('')\n\n    const leadingStr = leading.join(NEW_LINE)\n\n    return Buffer.from(leadingStr)\n  }\n}\n\nmodule.exports = Multipart\n"]},"metadata":{},"sourceType":"script"}