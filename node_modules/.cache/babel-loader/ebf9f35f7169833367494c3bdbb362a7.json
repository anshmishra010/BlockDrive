{"ast":null,"code":"/* jshint -W086: true */\n// +----------------------------------------------------------------------+\n// | murmurHash3js.js v3.0.1 // https://github.com/pid/murmurHash3js\n// | A javascript implementation of MurmurHash3's x86 hashing algorithms. |\n// |----------------------------------------------------------------------|\n// | Copyright (c) 2012-2015 Karan Lyons                                       |\n// | https://github.com/karanlyons/murmurHash3.js/blob/c1778f75792abef7bdd74bc85d2d4e1a3d25cfe9/murmurHash3.js |\n// | Freely distributable under the MIT license.                          |\n// +----------------------------------------------------------------------+\n;\n\n(function (root, undefined) {\n  'use strict'; // Create a local object that'll be exported or referenced globally.\n\n  var library = {\n    'version': '3.0.1',\n    'x86': {},\n    'x64': {}\n  }; // PRIVATE FUNCTIONS\n  // -----------------\n\n  function _x86Multiply(m, n) {\n    //\n    // Given two 32bit ints, returns the two multiplied together as a\n    // 32bit int.\n    //\n    return (m & 0xffff) * n + (((m >>> 16) * n & 0xffff) << 16);\n  }\n\n  function _x86Rotl(m, n) {\n    //\n    // Given a 32bit int and an int representing a number of bit positions,\n    // returns the 32bit int rotated left by that number of positions.\n    //\n    return m << n | m >>> 32 - n;\n  }\n\n  function _x86Fmix(h) {\n    //\n    // Given a block, returns murmurHash3's final x86 mix of that block.\n    //\n    h ^= h >>> 16;\n    h = _x86Multiply(h, 0x85ebca6b);\n    h ^= h >>> 13;\n    h = _x86Multiply(h, 0xc2b2ae35);\n    h ^= h >>> 16;\n    return h;\n  }\n\n  function _x64Add(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // added together as a 64bit int (as an array of two 32bit ints).\n    //\n    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n    var o = [0, 0, 0, 0];\n    o[3] += m[3] + n[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= 0xffff;\n    o[2] += m[2] + n[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n    o[1] += m[1] + n[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n    o[0] += m[0] + n[0];\n    o[0] &= 0xffff;\n    return [o[0] << 16 | o[1], o[2] << 16 | o[3]];\n  }\n\n  function _x64Multiply(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // multiplied together as a 64bit int (as an array of two 32bit ints).\n    //\n    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n    var o = [0, 0, 0, 0];\n    o[3] += m[3] * n[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= 0xffff;\n    o[2] += m[2] * n[3];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n    o[2] += m[3] * n[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n    o[1] += m[1] * n[3];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n    o[1] += m[2] * n[2];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n    o[1] += m[3] * n[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n    o[0] += m[0] * n[3] + m[1] * n[2] + m[2] * n[1] + m[3] * n[0];\n    o[0] &= 0xffff;\n    return [o[0] << 16 | o[1], o[2] << 16 | o[3]];\n  }\n\n  function _x64Rotl(m, n) {\n    //\n    // Given a 64bit int (as an array of two 32bit ints) and an int\n    // representing a number of bit positions, returns the 64bit int (as an\n    // array of two 32bit ints) rotated left by that number of positions.\n    //\n    n %= 64;\n\n    if (n === 32) {\n      return [m[1], m[0]];\n    } else if (n < 32) {\n      return [m[0] << n | m[1] >>> 32 - n, m[1] << n | m[0] >>> 32 - n];\n    } else {\n      n -= 32;\n      return [m[1] << n | m[0] >>> 32 - n, m[0] << n | m[1] >>> 32 - n];\n    }\n  }\n\n  function _x64LeftShift(m, n) {\n    //\n    // Given a 64bit int (as an array of two 32bit ints) and an int\n    // representing a number of bit positions, returns the 64bit int (as an\n    // array of two 32bit ints) shifted left by that number of positions.\n    //\n    n %= 64;\n\n    if (n === 0) {\n      return m;\n    } else if (n < 32) {\n      return [m[0] << n | m[1] >>> 32 - n, m[1] << n];\n    } else {\n      return [m[1] << n - 32, 0];\n    }\n  }\n\n  function _x64Xor(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // xored together as a 64bit int (as an array of two 32bit ints).\n    //\n    return [m[0] ^ n[0], m[1] ^ n[1]];\n  }\n\n  function _x64Fmix(h) {\n    //\n    // Given a block, returns murmurHash3's final x64 mix of that block.\n    // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the\n    // only place where we need to right shift 64bit ints.)\n    //\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n    h = _x64Multiply(h, [0xff51afd7, 0xed558ccd]);\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n    h = _x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n    return h;\n  } // PUBLIC FUNCTIONS\n  // ----------------\n\n\n  library.x86.hash32 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 32 bit hash\n    // using the x86 flavor of MurmurHash3, as an unsigned int.\n    //\n    key = key || '';\n    seed = seed || 0;\n    var remainder = key.length % 4;\n    var bytes = key.length - remainder;\n    var h1 = seed;\n    var k1 = 0;\n    var c1 = 0xcc9e2d51;\n    var c2 = 0x1b873593;\n\n    for (var i = 0; i < bytes; i = i + 4) {\n      k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(i + 1) & 0xff) << 8 | (key.charCodeAt(i + 2) & 0xff) << 16 | (key.charCodeAt(i + 3) & 0xff) << 24;\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n      h1 ^= k1;\n      h1 = _x86Rotl(h1, 13);\n      h1 = _x86Multiply(h1, 5) + 0xe6546b64;\n    }\n\n    k1 = 0;\n\n    switch (remainder) {\n      case 3:\n        k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n\n      case 2:\n        k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n\n      case 1:\n        k1 ^= key.charCodeAt(i) & 0xff;\n        k1 = _x86Multiply(k1, c1);\n        k1 = _x86Rotl(k1, 15);\n        k1 = _x86Multiply(k1, c2);\n        h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n    h1 = _x86Fmix(h1);\n    return h1 >>> 0;\n  };\n\n  library.x86.hash128 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 128 bit\n    // hash using the x86 flavor of MurmurHash3, as an unsigned hex.\n    //\n    key = key || '';\n    seed = seed || 0;\n    var remainder = key.length % 16;\n    var bytes = key.length - remainder;\n    var h1 = seed;\n    var h2 = seed;\n    var h3 = seed;\n    var h4 = seed;\n    var k1 = 0;\n    var k2 = 0;\n    var k3 = 0;\n    var k4 = 0;\n    var c1 = 0x239b961b;\n    var c2 = 0xab0e9789;\n    var c3 = 0x38b34ae5;\n    var c4 = 0xa1e38b93;\n\n    for (var i = 0; i < bytes; i = i + 16) {\n      k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(i + 1) & 0xff) << 8 | (key.charCodeAt(i + 2) & 0xff) << 16 | (key.charCodeAt(i + 3) & 0xff) << 24;\n      k2 = key.charCodeAt(i + 4) & 0xff | (key.charCodeAt(i + 5) & 0xff) << 8 | (key.charCodeAt(i + 6) & 0xff) << 16 | (key.charCodeAt(i + 7) & 0xff) << 24;\n      k3 = key.charCodeAt(i + 8) & 0xff | (key.charCodeAt(i + 9) & 0xff) << 8 | (key.charCodeAt(i + 10) & 0xff) << 16 | (key.charCodeAt(i + 11) & 0xff) << 24;\n      k4 = key.charCodeAt(i + 12) & 0xff | (key.charCodeAt(i + 13) & 0xff) << 8 | (key.charCodeAt(i + 14) & 0xff) << 16 | (key.charCodeAt(i + 15) & 0xff) << 24;\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n      h1 ^= k1;\n      h1 = _x86Rotl(h1, 19);\n      h1 += h2;\n      h1 = _x86Multiply(h1, 5) + 0x561ccd1b;\n      k2 = _x86Multiply(k2, c2);\n      k2 = _x86Rotl(k2, 16);\n      k2 = _x86Multiply(k2, c3);\n      h2 ^= k2;\n      h2 = _x86Rotl(h2, 17);\n      h2 += h3;\n      h2 = _x86Multiply(h2, 5) + 0x0bcaa747;\n      k3 = _x86Multiply(k3, c3);\n      k3 = _x86Rotl(k3, 17);\n      k3 = _x86Multiply(k3, c4);\n      h3 ^= k3;\n      h3 = _x86Rotl(h3, 15);\n      h3 += h4;\n      h3 = _x86Multiply(h3, 5) + 0x96cd1c35;\n      k4 = _x86Multiply(k4, c4);\n      k4 = _x86Rotl(k4, 18);\n      k4 = _x86Multiply(k4, c1);\n      h4 ^= k4;\n      h4 = _x86Rotl(h4, 13);\n      h4 += h1;\n      h4 = _x86Multiply(h4, 5) + 0x32ac3b17;\n    }\n\n    k1 = 0;\n    k2 = 0;\n    k3 = 0;\n    k4 = 0;\n\n    switch (remainder) {\n      case 15:\n        k4 ^= key.charCodeAt(i + 14) << 16;\n\n      case 14:\n        k4 ^= key.charCodeAt(i + 13) << 8;\n\n      case 13:\n        k4 ^= key.charCodeAt(i + 12);\n        k4 = _x86Multiply(k4, c4);\n        k4 = _x86Rotl(k4, 18);\n        k4 = _x86Multiply(k4, c1);\n        h4 ^= k4;\n\n      case 12:\n        k3 ^= key.charCodeAt(i + 11) << 24;\n\n      case 11:\n        k3 ^= key.charCodeAt(i + 10) << 16;\n\n      case 10:\n        k3 ^= key.charCodeAt(i + 9) << 8;\n\n      case 9:\n        k3 ^= key.charCodeAt(i + 8);\n        k3 = _x86Multiply(k3, c3);\n        k3 = _x86Rotl(k3, 17);\n        k3 = _x86Multiply(k3, c4);\n        h3 ^= k3;\n\n      case 8:\n        k2 ^= key.charCodeAt(i + 7) << 24;\n\n      case 7:\n        k2 ^= key.charCodeAt(i + 6) << 16;\n\n      case 6:\n        k2 ^= key.charCodeAt(i + 5) << 8;\n\n      case 5:\n        k2 ^= key.charCodeAt(i + 4);\n        k2 = _x86Multiply(k2, c2);\n        k2 = _x86Rotl(k2, 16);\n        k2 = _x86Multiply(k2, c3);\n        h2 ^= k2;\n\n      case 4:\n        k1 ^= key.charCodeAt(i + 3) << 24;\n\n      case 3:\n        k1 ^= key.charCodeAt(i + 2) << 16;\n\n      case 2:\n        k1 ^= key.charCodeAt(i + 1) << 8;\n\n      case 1:\n        k1 ^= key.charCodeAt(i);\n        k1 = _x86Multiply(k1, c1);\n        k1 = _x86Rotl(k1, 15);\n        k1 = _x86Multiply(k1, c2);\n        h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n    h2 ^= key.length;\n    h3 ^= key.length;\n    h4 ^= key.length;\n    h1 += h2;\n    h1 += h3;\n    h1 += h4;\n    h2 += h1;\n    h3 += h1;\n    h4 += h1;\n    h1 = _x86Fmix(h1);\n    h2 = _x86Fmix(h2);\n    h3 = _x86Fmix(h3);\n    h4 = _x86Fmix(h4);\n    h1 += h2;\n    h1 += h3;\n    h1 += h4;\n    h2 += h1;\n    h3 += h1;\n    h4 += h1;\n    return (\"00000000\" + (h1 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h3 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h4 >>> 0).toString(16)).slice(-8);\n  };\n\n  library.x64.hash128 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 128 bit\n    // hash using the x64 flavor of MurmurHash3, as an unsigned hex.\n    //\n    key = key || '';\n    seed = seed || 0;\n    var remainder = key.length % 16;\n    var bytes = key.length - remainder;\n    var h1 = [0, seed];\n    var h2 = [0, seed];\n    var k1 = [0, 0];\n    var k2 = [0, 0];\n    var c1 = [0x87c37b91, 0x114253d5];\n    var c2 = [0x4cf5ad43, 0x2745937f];\n\n    for (var i = 0; i < bytes; i = i + 16) {\n      k1 = [key.charCodeAt(i + 4) & 0xff | (key.charCodeAt(i + 5) & 0xff) << 8 | (key.charCodeAt(i + 6) & 0xff) << 16 | (key.charCodeAt(i + 7) & 0xff) << 24, key.charCodeAt(i) & 0xff | (key.charCodeAt(i + 1) & 0xff) << 8 | (key.charCodeAt(i + 2) & 0xff) << 16 | (key.charCodeAt(i + 3) & 0xff) << 24];\n      k2 = [key.charCodeAt(i + 12) & 0xff | (key.charCodeAt(i + 13) & 0xff) << 8 | (key.charCodeAt(i + 14) & 0xff) << 16 | (key.charCodeAt(i + 15) & 0xff) << 24, key.charCodeAt(i + 8) & 0xff | (key.charCodeAt(i + 9) & 0xff) << 8 | (key.charCodeAt(i + 10) & 0xff) << 16 | (key.charCodeAt(i + 11) & 0xff) << 24];\n      k1 = _x64Multiply(k1, c1);\n      k1 = _x64Rotl(k1, 31);\n      k1 = _x64Multiply(k1, c2);\n      h1 = _x64Xor(h1, k1);\n      h1 = _x64Rotl(h1, 27);\n      h1 = _x64Add(h1, h2);\n      h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 0x52dce729]);\n      k2 = _x64Multiply(k2, c2);\n      k2 = _x64Rotl(k2, 33);\n      k2 = _x64Multiply(k2, c1);\n      h2 = _x64Xor(h2, k2);\n      h2 = _x64Rotl(h2, 31);\n      h2 = _x64Add(h2, h1);\n      h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);\n    }\n\n    k1 = [0, 0];\n    k2 = [0, 0];\n\n    switch (remainder) {\n      case 15:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 14)], 48));\n\n      case 14:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 13)], 40));\n\n      case 13:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 12)], 32));\n\n      case 12:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 11)], 24));\n\n      case 11:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 10)], 16));\n\n      case 10:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 9)], 8));\n\n      case 9:\n        k2 = _x64Xor(k2, [0, key.charCodeAt(i + 8)]);\n        k2 = _x64Multiply(k2, c2);\n        k2 = _x64Rotl(k2, 33);\n        k2 = _x64Multiply(k2, c1);\n        h2 = _x64Xor(h2, k2);\n\n      case 8:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 7)], 56));\n\n      case 7:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 6)], 48));\n\n      case 6:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 5)], 40));\n\n      case 5:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 4)], 32));\n\n      case 4:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 3)], 24));\n\n      case 3:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 2)], 16));\n\n      case 2:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 1)], 8));\n\n      case 1:\n        k1 = _x64Xor(k1, [0, key.charCodeAt(i)]);\n        k1 = _x64Multiply(k1, c1);\n        k1 = _x64Rotl(k1, 31);\n        k1 = _x64Multiply(k1, c2);\n        h1 = _x64Xor(h1, k1);\n    }\n\n    h1 = _x64Xor(h1, [0, key.length]);\n    h2 = _x64Xor(h2, [0, key.length]);\n    h1 = _x64Add(h1, h2);\n    h2 = _x64Add(h2, h1);\n    h1 = _x64Fmix(h1);\n    h2 = _x64Fmix(h2);\n    h1 = _x64Add(h1, h2);\n    h2 = _x64Add(h2, h1);\n    return (\"00000000\" + (h1[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h1[1] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[1] >>> 0).toString(16)).slice(-8);\n  }; // INITIALIZATION\n  // --------------\n  // Export murmurHash3 for CommonJS, either as an AMD module or just as part\n  // of the global object.\n\n\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = library;\n    }\n\n    exports.murmurHash3 = library;\n  } else if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return library;\n    });\n  } else {\n    // Use murmurHash3.noConflict to restore `murmurHash3` back to its\n    // original value. Returns a reference to the library object, to allow\n    // it to be used under a different name.\n    library._murmurHash3 = root.murmurHash3;\n\n    library.noConflict = function () {\n      root.murmurHash3 = library._murmurHash3;\n      library._murmurHash3 = undefined;\n      library.noConflict = undefined;\n      return library;\n    };\n\n    root.murmurHash3 = library;\n  }\n})(this);","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/murmurhash3js/lib/murmurHash3js.js"],"names":["root","undefined","library","_x86Multiply","m","n","_x86Rotl","_x86Fmix","h","_x64Add","o","_x64Multiply","_x64Rotl","_x64LeftShift","_x64Xor","_x64Fmix","x86","hash32","key","seed","remainder","length","bytes","h1","k1","c1","c2","i","charCodeAt","hash128","h2","h3","h4","k2","k3","k4","c3","c4","toString","slice","x64","exports","module","murmurHash3","define","amd","_murmurHash3","noConflict"],"mappings":"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","sourcesContent":["/* jshint -W086: true */\n// +----------------------------------------------------------------------+\n// | murmurHash3js.js v3.0.1 // https://github.com/pid/murmurHash3js\n// | A javascript implementation of MurmurHash3's x86 hashing algorithms. |\n// |----------------------------------------------------------------------|\n// | Copyright (c) 2012-2015 Karan Lyons                                       |\n// | https://github.com/karanlyons/murmurHash3.js/blob/c1778f75792abef7bdd74bc85d2d4e1a3d25cfe9/murmurHash3.js |\n// | Freely distributable under the MIT license.                          |\n// +----------------------------------------------------------------------+\n\n;(function (root, undefined) {\n    'use strict';\n\n    // Create a local object that'll be exported or referenced globally.\n    var library = {\n        'version': '3.0.1',\n        'x86': {},\n        'x64': {}\n    };\n\n    // PRIVATE FUNCTIONS\n    // -----------------\n\n    function _x86Multiply(m, n) {\n        //\n        // Given two 32bit ints, returns the two multiplied together as a\n        // 32bit int.\n        //\n\n        return ((m & 0xffff) * n) + ((((m >>> 16) * n) & 0xffff) << 16);\n    }\n\n    function _x86Rotl(m, n) {\n        //\n        // Given a 32bit int and an int representing a number of bit positions,\n        // returns the 32bit int rotated left by that number of positions.\n        //\n\n        return (m << n) | (m >>> (32 - n));\n    }\n\n    function _x86Fmix(h) {\n        //\n        // Given a block, returns murmurHash3's final x86 mix of that block.\n        //\n\n        h ^= h >>> 16;\n        h = _x86Multiply(h, 0x85ebca6b);\n        h ^= h >>> 13;\n        h = _x86Multiply(h, 0xc2b2ae35);\n        h ^= h >>> 16;\n\n        return h;\n    }\n\n    function _x64Add(m, n) {\n        //\n        // Given two 64bit ints (as an array of two 32bit ints) returns the two\n        // added together as a 64bit int (as an array of two 32bit ints).\n        //\n\n        m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n        n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n        var o = [0, 0, 0, 0];\n\n        o[3] += m[3] + n[3];\n        o[2] += o[3] >>> 16;\n        o[3] &= 0xffff;\n\n        o[2] += m[2] + n[2];\n        o[1] += o[2] >>> 16;\n        o[2] &= 0xffff;\n\n        o[1] += m[1] + n[1];\n        o[0] += o[1] >>> 16;\n        o[1] &= 0xffff;\n\n        o[0] += m[0] + n[0];\n        o[0] &= 0xffff;\n\n        return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n    }\n\n    function _x64Multiply(m, n) {\n        //\n        // Given two 64bit ints (as an array of two 32bit ints) returns the two\n        // multiplied together as a 64bit int (as an array of two 32bit ints).\n        //\n\n        m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n        n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n        var o = [0, 0, 0, 0];\n\n        o[3] += m[3] * n[3];\n        o[2] += o[3] >>> 16;\n        o[3] &= 0xffff;\n\n        o[2] += m[2] * n[3];\n        o[1] += o[2] >>> 16;\n        o[2] &= 0xffff;\n\n        o[2] += m[3] * n[2];\n        o[1] += o[2] >>> 16;\n        o[2] &= 0xffff;\n\n        o[1] += m[1] * n[3];\n        o[0] += o[1] >>> 16;\n        o[1] &= 0xffff;\n\n        o[1] += m[2] * n[2];\n        o[0] += o[1] >>> 16;\n        o[1] &= 0xffff;\n\n        o[1] += m[3] * n[1];\n        o[0] += o[1] >>> 16;\n        o[1] &= 0xffff;\n\n        o[0] += (m[0] * n[3]) + (m[1] * n[2]) + (m[2] * n[1]) + (m[3] * n[0]);\n        o[0] &= 0xffff;\n\n        return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n    }\n\n    function _x64Rotl(m, n) {\n        //\n        // Given a 64bit int (as an array of two 32bit ints) and an int\n        // representing a number of bit positions, returns the 64bit int (as an\n        // array of two 32bit ints) rotated left by that number of positions.\n        //\n\n        n %= 64;\n\n        if (n === 32) {\n            return [m[1], m[0]];\n        } else if (n < 32) {\n            return [(m[0] << n) | (m[1] >>> (32 - n)), (m[1] << n) | (m[0] >>> (32 - n))];\n        } else {\n            n -= 32;\n            return [(m[1] << n) | (m[0] >>> (32 - n)), (m[0] << n) | (m[1] >>> (32 - n))];\n        }\n    }\n\n    function _x64LeftShift(m, n) {\n        //\n        // Given a 64bit int (as an array of two 32bit ints) and an int\n        // representing a number of bit positions, returns the 64bit int (as an\n        // array of two 32bit ints) shifted left by that number of positions.\n        //\n\n        n %= 64;\n\n        if (n === 0) {\n            return m;\n        } else if (n < 32) {\n            return [(m[0] << n) | (m[1] >>> (32 - n)), m[1] << n];\n        } else {\n            return [m[1] << (n - 32), 0];\n        }\n    }\n\n    function _x64Xor(m, n) {\n        //\n        // Given two 64bit ints (as an array of two 32bit ints) returns the two\n        // xored together as a 64bit int (as an array of two 32bit ints).\n        //\n\n        return [m[0] ^ n[0], m[1] ^ n[1]];\n    }\n\n    function _x64Fmix(h) {\n        //\n        // Given a block, returns murmurHash3's final x64 mix of that block.\n        // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the\n        // only place where we need to right shift 64bit ints.)\n        //\n\n        h = _x64Xor(h, [0, h[0] >>> 1]);\n        h = _x64Multiply(h, [0xff51afd7, 0xed558ccd]);\n        h = _x64Xor(h, [0, h[0] >>> 1]);\n        h = _x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);\n        h = _x64Xor(h, [0, h[0] >>> 1]);\n\n        return h;\n    }\n\n    // PUBLIC FUNCTIONS\n    // ----------------\n\n    library.x86.hash32 = function (key, seed) {\n        //\n        // Given a string and an optional seed as an int, returns a 32 bit hash\n        // using the x86 flavor of MurmurHash3, as an unsigned int.\n        //\n\n        key = key || '';\n        seed = seed || 0;\n\n        var remainder = key.length % 4;\n        var bytes = key.length - remainder;\n\n        var h1 = seed;\n\n        var k1 = 0;\n\n        var c1 = 0xcc9e2d51;\n        var c2 = 0x1b873593;\n\n        for (var i = 0; i < bytes; i = i + 4) {\n            k1 = ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24);\n\n            k1 = _x86Multiply(k1, c1);\n            k1 = _x86Rotl(k1, 15);\n            k1 = _x86Multiply(k1, c2);\n\n            h1 ^= k1;\n            h1 = _x86Rotl(h1, 13);\n            h1 = _x86Multiply(h1, 5) + 0xe6546b64;\n        }\n\n        k1 = 0;\n\n        switch (remainder) {\n            case 3:\n                k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n\n            case 2:\n                k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n\n            case 1:\n                k1 ^= (key.charCodeAt(i) & 0xff);\n                k1 = _x86Multiply(k1, c1);\n                k1 = _x86Rotl(k1, 15);\n                k1 = _x86Multiply(k1, c2);\n                h1 ^= k1;\n        }\n\n        h1 ^= key.length;\n        h1 = _x86Fmix(h1);\n\n        return h1 >>> 0;\n    };\n\n    library.x86.hash128 = function (key, seed) {\n        //\n        // Given a string and an optional seed as an int, returns a 128 bit\n        // hash using the x86 flavor of MurmurHash3, as an unsigned hex.\n        //\n\n        key = key || '';\n        seed = seed || 0;\n\n        var remainder = key.length % 16;\n        var bytes = key.length - remainder;\n\n        var h1 = seed;\n        var h2 = seed;\n        var h3 = seed;\n        var h4 = seed;\n\n        var k1 = 0;\n        var k2 = 0;\n        var k3 = 0;\n        var k4 = 0;\n\n        var c1 = 0x239b961b;\n        var c2 = 0xab0e9789;\n        var c3 = 0x38b34ae5;\n        var c4 = 0xa1e38b93;\n\n        for (var i = 0; i < bytes; i = i + 16) {\n            k1 = ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24);\n            k2 = ((key.charCodeAt(i + 4) & 0xff)) | ((key.charCodeAt(i + 5) & 0xff) << 8) | ((key.charCodeAt(i + 6) & 0xff) << 16) | ((key.charCodeAt(i + 7) & 0xff) << 24);\n            k3 = ((key.charCodeAt(i + 8) & 0xff)) | ((key.charCodeAt(i + 9) & 0xff) << 8) | ((key.charCodeAt(i + 10) & 0xff) << 16) | ((key.charCodeAt(i + 11) & 0xff) << 24);\n            k4 = ((key.charCodeAt(i + 12) & 0xff)) | ((key.charCodeAt(i + 13) & 0xff) << 8) | ((key.charCodeAt(i + 14) & 0xff) << 16) | ((key.charCodeAt(i + 15) & 0xff) << 24);\n\n            k1 = _x86Multiply(k1, c1);\n            k1 = _x86Rotl(k1, 15);\n            k1 = _x86Multiply(k1, c2);\n            h1 ^= k1;\n\n            h1 = _x86Rotl(h1, 19);\n            h1 += h2;\n            h1 = _x86Multiply(h1, 5) + 0x561ccd1b;\n\n            k2 = _x86Multiply(k2, c2);\n            k2 = _x86Rotl(k2, 16);\n            k2 = _x86Multiply(k2, c3);\n            h2 ^= k2;\n\n            h2 = _x86Rotl(h2, 17);\n            h2 += h3;\n            h2 = _x86Multiply(h2, 5) + 0x0bcaa747;\n\n            k3 = _x86Multiply(k3, c3);\n            k3 = _x86Rotl(k3, 17);\n            k3 = _x86Multiply(k3, c4);\n            h3 ^= k3;\n\n            h3 = _x86Rotl(h3, 15);\n            h3 += h4;\n            h3 = _x86Multiply(h3, 5) + 0x96cd1c35;\n\n            k4 = _x86Multiply(k4, c4);\n            k4 = _x86Rotl(k4, 18);\n            k4 = _x86Multiply(k4, c1);\n            h4 ^= k4;\n\n            h4 = _x86Rotl(h4, 13);\n            h4 += h1;\n            h4 = _x86Multiply(h4, 5) + 0x32ac3b17;\n        }\n\n        k1 = 0;\n        k2 = 0;\n        k3 = 0;\n        k4 = 0;\n\n        switch (remainder) {\n            case 15:\n                k4 ^= key.charCodeAt(i + 14) << 16;\n\n            case 14:\n                k4 ^= key.charCodeAt(i + 13) << 8;\n\n            case 13:\n                k4 ^= key.charCodeAt(i + 12);\n                k4 = _x86Multiply(k4, c4);\n                k4 = _x86Rotl(k4, 18);\n                k4 = _x86Multiply(k4, c1);\n                h4 ^= k4;\n\n            case 12:\n                k3 ^= key.charCodeAt(i + 11) << 24;\n\n            case 11:\n                k3 ^= key.charCodeAt(i + 10) << 16;\n\n            case 10:\n                k3 ^= key.charCodeAt(i + 9) << 8;\n\n            case 9:\n                k3 ^= key.charCodeAt(i + 8);\n                k3 = _x86Multiply(k3, c3);\n                k3 = _x86Rotl(k3, 17);\n                k3 = _x86Multiply(k3, c4);\n                h3 ^= k3;\n\n            case 8:\n                k2 ^= key.charCodeAt(i + 7) << 24;\n\n            case 7:\n                k2 ^= key.charCodeAt(i + 6) << 16;\n\n            case 6:\n                k2 ^= key.charCodeAt(i + 5) << 8;\n\n            case 5:\n                k2 ^= key.charCodeAt(i + 4);\n                k2 = _x86Multiply(k2, c2);\n                k2 = _x86Rotl(k2, 16);\n                k2 = _x86Multiply(k2, c3);\n                h2 ^= k2;\n\n            case 4:\n                k1 ^= key.charCodeAt(i + 3) << 24;\n\n            case 3:\n                k1 ^= key.charCodeAt(i + 2) << 16;\n\n            case 2:\n                k1 ^= key.charCodeAt(i + 1) << 8;\n\n            case 1:\n                k1 ^= key.charCodeAt(i);\n                k1 = _x86Multiply(k1, c1);\n                k1 = _x86Rotl(k1, 15);\n                k1 = _x86Multiply(k1, c2);\n                h1 ^= k1;\n        }\n\n        h1 ^= key.length;\n        h2 ^= key.length;\n        h3 ^= key.length;\n        h4 ^= key.length;\n\n        h1 += h2;\n        h1 += h3;\n        h1 += h4;\n        h2 += h1;\n        h3 += h1;\n        h4 += h1;\n\n        h1 = _x86Fmix(h1);\n        h2 = _x86Fmix(h2);\n        h3 = _x86Fmix(h3);\n        h4 = _x86Fmix(h4);\n\n        h1 += h2;\n        h1 += h3;\n        h1 += h4;\n        h2 += h1;\n        h3 += h1;\n        h4 += h1;\n\n        return (\"00000000\" + (h1 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h3 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h4 >>> 0).toString(16)).slice(-8);\n    };\n\n    library.x64.hash128 = function (key, seed) {\n        //\n        // Given a string and an optional seed as an int, returns a 128 bit\n        // hash using the x64 flavor of MurmurHash3, as an unsigned hex.\n        //\n\n        key = key || '';\n        seed = seed || 0;\n\n        var remainder = key.length % 16;\n        var bytes = key.length - remainder;\n\n        var h1 = [0, seed];\n        var h2 = [0, seed];\n\n        var k1 = [0, 0];\n        var k2 = [0, 0];\n\n        var c1 = [0x87c37b91, 0x114253d5];\n        var c2 = [0x4cf5ad43, 0x2745937f];\n\n        for (var i = 0; i < bytes; i = i + 16) {\n            k1 = [((key.charCodeAt(i + 4) & 0xff)) | ((key.charCodeAt(i + 5) & 0xff) << 8) | ((key.charCodeAt(i + 6) & 0xff) << 16) | ((key.charCodeAt(i + 7) & 0xff) << 24), ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) &\n                0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24)];\n            k2 = [((key.charCodeAt(i + 12) & 0xff)) | ((key.charCodeAt(i + 13) & 0xff) << 8) | ((key.charCodeAt(i + 14) & 0xff) << 16) | ((key.charCodeAt(i + 15) & 0xff) << 24), ((key.charCodeAt(i + 8) & 0xff)) | ((key.charCodeAt(i +\n                9) & 0xff) << 8) | ((key.charCodeAt(i + 10) & 0xff) << 16) | ((key.charCodeAt(i + 11) & 0xff) << 24)];\n\n            k1 = _x64Multiply(k1, c1);\n            k1 = _x64Rotl(k1, 31);\n            k1 = _x64Multiply(k1, c2);\n            h1 = _x64Xor(h1, k1);\n\n            h1 = _x64Rotl(h1, 27);\n            h1 = _x64Add(h1, h2);\n            h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 0x52dce729]);\n\n            k2 = _x64Multiply(k2, c2);\n            k2 = _x64Rotl(k2, 33);\n            k2 = _x64Multiply(k2, c1);\n            h2 = _x64Xor(h2, k2);\n\n            h2 = _x64Rotl(h2, 31);\n            h2 = _x64Add(h2, h1);\n            h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);\n        }\n\n        k1 = [0, 0];\n        k2 = [0, 0];\n\n        switch (remainder) {\n            case 15:\n                k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 14)], 48));\n\n            case 14:\n                k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 13)], 40));\n\n            case 13:\n                k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 12)], 32));\n\n            case 12:\n                k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 11)], 24));\n\n            case 11:\n                k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 10)], 16));\n\n            case 10:\n                k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 9)], 8));\n\n            case 9:\n                k2 = _x64Xor(k2, [0, key.charCodeAt(i + 8)]);\n                k2 = _x64Multiply(k2, c2);\n                k2 = _x64Rotl(k2, 33);\n                k2 = _x64Multiply(k2, c1);\n                h2 = _x64Xor(h2, k2);\n\n            case 8:\n                k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 7)], 56));\n\n            case 7:\n                k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 6)], 48));\n\n            case 6:\n                k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 5)], 40));\n\n            case 5:\n                k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 4)], 32));\n\n            case 4:\n                k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 3)], 24));\n\n            case 3:\n                k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 2)], 16));\n\n            case 2:\n                k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 1)], 8));\n\n            case 1:\n                k1 = _x64Xor(k1, [0, key.charCodeAt(i)]);\n                k1 = _x64Multiply(k1, c1);\n                k1 = _x64Rotl(k1, 31);\n                k1 = _x64Multiply(k1, c2);\n                h1 = _x64Xor(h1, k1);\n        }\n\n        h1 = _x64Xor(h1, [0, key.length]);\n        h2 = _x64Xor(h2, [0, key.length]);\n\n        h1 = _x64Add(h1, h2);\n        h2 = _x64Add(h2, h1);\n\n        h1 = _x64Fmix(h1);\n        h2 = _x64Fmix(h2);\n\n        h1 = _x64Add(h1, h2);\n        h2 = _x64Add(h2, h1);\n\n        return (\"00000000\" + (h1[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h1[1] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[1] >>> 0).toString(16)).slice(-8);\n    };\n\n    // INITIALIZATION\n    // --------------\n\n    // Export murmurHash3 for CommonJS, either as an AMD module or just as part\n    // of the global object.\n    if (typeof exports !== 'undefined') {\n\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = library;\n        }\n\n        exports.murmurHash3 = library;\n\n    } else if (typeof define === 'function' && define.amd) {\n\n        define([], function () {\n            return library;\n        });\n    } else {\n\n        // Use murmurHash3.noConflict to restore `murmurHash3` back to its\n        // original value. Returns a reference to the library object, to allow\n        // it to be used under a different name.\n        library._murmurHash3 = root.murmurHash3;\n\n        library.noConflict = function () {\n            root.murmurHash3 = library._murmurHash3;\n            library._murmurHash3 = undefined;\n            library.noConflict = undefined;\n\n            return library;\n        };\n\n        root.murmurHash3 = library;\n    }\n})(this);\n"]},"metadata":{},"sourceType":"script"}