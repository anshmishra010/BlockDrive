{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nmodule.exports = function (send) {\n  return promisify(function (subsystem, level, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    if (typeof subsystem !== 'string') {\n      return callback(new Error('Invalid subsystem type'));\n    }\n\n    if (typeof level !== 'string') {\n      return callback(new Error('Invalid level type'));\n    }\n\n    send({\n      path: 'log/level',\n      args: [subsystem, level],\n      qs: opts,\n      files: undefined,\n      buffer: true\n    }, callback);\n  });\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/log/level.js"],"names":["promisify","require","module","exports","send","subsystem","level","opts","callback","Error","path","args","qs","files","undefined","buffer"],"mappings":"AAAA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,SAAOJ,SAAS,CAAC,UAACK,SAAD,EAAYC,KAAZ,EAAmBC,IAAnB,EAAyBC,QAAzB,EAAsC;AACrD,QAAI,OAAOD,IAAP,KAAgB,UAApB,EAAgC;AAC9BC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACD,QAAI,OAAOF,SAAP,KAAqB,QAAzB,EAAmC;AACjC,aAAOG,QAAQ,CAAC,IAAIC,KAAJ,CAAU,wBAAV,CAAD,CAAf;AACD;;AAED,QAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOE,QAAQ,CAAC,IAAIC,KAAJ,CAAU,oBAAV,CAAD,CAAf;AACD;;AAEDL,IAAAA,IAAI,CAAC;AACHM,MAAAA,IAAI,EAAE,WADH;AAEHC,MAAAA,IAAI,EAAE,CAACN,SAAD,EAAYC,KAAZ,CAFH;AAGHM,MAAAA,EAAE,EAAEL,IAHD;AAIHM,MAAAA,KAAK,EAAEC,SAJJ;AAKHC,MAAAA,MAAM,EAAE;AALL,KAAD,EAMDP,QANC,CAAJ;AAOD,GApBe,CAAhB;AAqBD,CAtBD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\n\nmodule.exports = (send) => {\n  return promisify((subsystem, level, opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts\n      opts = {}\n    }\n    if (typeof subsystem !== 'string') {\n      return callback(new Error('Invalid subsystem type'))\n    }\n\n    if (typeof level !== 'string') {\n      return callback(new Error('Invalid level type'))\n    }\n\n    send({\n      path: 'log/level',\n      args: [subsystem, level],\n      qs: opts,\n      files: undefined,\n      buffer: true\n    }, callback)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}