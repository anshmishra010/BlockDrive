{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer');\n\nvar multiaddr = require('multiaddr');\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nmodule.exports = function (send) {\n  return promisify(function (cid, opts, callback) {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    var handleResult = function handleResult(res, callback) {\n      // Inconsistent return values in the browser vs node\n      if (!Array.isArray(res)) {\n        res = [res];\n      }\n\n      var responses = [];\n      res.forEach(function (result) {\n        // 4 = Provider\n        if (result.Type !== 4) return;\n        result.Responses.forEach(function (response) {\n          var peerInfo = new PeerInfo(PeerId.createFromB58String(response.ID));\n\n          if (response.Addrs) {\n            response.Addrs.forEach(function (addr) {\n              var ma = multiaddr(addr);\n              peerInfo.multiaddrs.add(ma);\n            });\n          }\n\n          responses.push(peerInfo);\n        });\n      });\n      callback(null, responses);\n    };\n\n    send({\n      path: 'dht/findprovs',\n      args: cid.toString(),\n      qs: opts\n    }, function (err, result) {\n      if (err) {\n        return callback(err);\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback);\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/dht/findprovs.js"],"names":["promisify","require","streamToValueWithTransformer","multiaddr","PeerId","PeerInfo","module","exports","send","cid","opts","callback","handleResult","res","Array","isArray","responses","forEach","result","Type","Responses","response","peerInfo","createFromB58String","ID","Addrs","addr","ma","multiaddrs","add","push","path","args","toString","qs","err"],"mappings":"AAAA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAMC,4BAA4B,GAAGD,OAAO,CAAC,2CAAD,CAA5C;;AAEA,IAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,SAAD,CAAtB;;AACA,IAAMI,QAAQ,GAAGJ,OAAO,CAAC,WAAD,CAAxB;;AAEAK,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,SAAOR,SAAS,CAAC,UAACS,GAAD,EAAMC,IAAN,EAAYC,QAAZ,EAAyB;AACxC,QAAI,OAAOD,IAAP,KAAgB,UAAhB,IAA8B,CAACC,QAAnC,EAA6C;AAC3CA,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD,KAJuC,CAMxC;AACA;;;AACA,QAAI,OAAOA,IAAP,KAAgB,UAAhB,IAA8B,OAAOC,QAAP,KAAoB,UAAtD,EAAkE;AAChEA,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,QAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAMF,QAAN,EAAmB;AACtC;AACA,UAAI,CAACG,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAL,EAAyB;AACvBA,QAAAA,GAAG,GAAG,CAACA,GAAD,CAAN;AACD;;AAED,UAAIG,SAAS,GAAG,EAAhB;AACAH,MAAAA,GAAG,CAACI,OAAJ,CAAY,UAAAC,MAAM,EAAI;AACpB;AACA,YAAIA,MAAM,CAACC,IAAP,KAAgB,CAApB,EAAuB;AACvBD,QAAAA,MAAM,CAACE,SAAP,CAAiBH,OAAjB,CAAyB,UAAAI,QAAQ,EAAI;AACnC,cAAMC,QAAQ,GAAG,IAAIjB,QAAJ,CAAaD,MAAM,CAACmB,mBAAP,CAA2BF,QAAQ,CAACG,EAApC,CAAb,CAAjB;;AAEA,cAAIH,QAAQ,CAACI,KAAb,EAAoB;AAClBJ,YAAAA,QAAQ,CAACI,KAAT,CAAeR,OAAf,CAAuB,UAACS,IAAD,EAAU;AAC/B,kBAAMC,EAAE,GAAGxB,SAAS,CAACuB,IAAD,CAApB;AACAJ,cAAAA,QAAQ,CAACM,UAAT,CAAoBC,GAApB,CAAwBF,EAAxB;AACD,aAHD;AAID;;AAEDX,UAAAA,SAAS,CAACc,IAAV,CAAeR,QAAf;AACD,SAXD;AAYD,OAfD;AAiBAX,MAAAA,QAAQ,CAAC,IAAD,EAAOK,SAAP,CAAR;AACD,KAzBD;;AA2BAR,IAAAA,IAAI,CAAC;AACHuB,MAAAA,IAAI,EAAE,eADH;AAEHC,MAAAA,IAAI,EAAEvB,GAAG,CAACwB,QAAJ,EAFH;AAGHC,MAAAA,EAAE,EAAExB;AAHD,KAAD,EAID,UAACyB,GAAD,EAAMjB,MAAN,EAAiB;AAClB,UAAIiB,GAAJ,EAAS;AACP,eAAOxB,QAAQ,CAACwB,GAAD,CAAf;AACD;;AAEDjC,MAAAA,4BAA4B,CAACgB,MAAD,EAASN,YAAT,EAAuBD,QAAvB,CAA5B;AACD,KAVG,CAAJ;AAWD,GAnDe,CAAhB;AAoDD,CArDD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer')\n\nconst multiaddr = require('multiaddr')\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\n\nmodule.exports = (send) => {\n  return promisify((cid, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts\n      opts = {}\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    const handleResult = (res, callback) => {\n      // Inconsistent return values in the browser vs node\n      if (!Array.isArray(res)) {\n        res = [res]\n      }\n\n      let responses = []\n      res.forEach(result => {\n        // 4 = Provider\n        if (result.Type !== 4) return\n        result.Responses.forEach(response => {\n          const peerInfo = new PeerInfo(PeerId.createFromB58String(response.ID))\n\n          if (response.Addrs) {\n            response.Addrs.forEach((addr) => {\n              const ma = multiaddr(addr)\n              peerInfo.multiaddrs.add(ma)\n            })\n          }\n\n          responses.push(peerInfo)\n        })\n      })\n\n      callback(null, responses)\n    }\n\n    send({\n      path: 'dht/findprovs',\n      args: cid.toString(),\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback)\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}