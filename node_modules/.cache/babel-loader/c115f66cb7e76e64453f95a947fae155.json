{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar dagNodeUtil = require('./util');\n\nvar cloneLinks = dagNodeUtil.cloneLinks;\nvar cloneData = dagNodeUtil.cloneData;\nvar toDAGLink = dagNodeUtil.toDAGLink;\n\nvar DAGLink = require('../dag-link');\n\nvar DAGNode = require('./index');\n\nvar create = require('./create');\n\nvar asDAGLink = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(link) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!DAGLink.isDAGLink(link)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", link);\n\n          case 2:\n            if (!DAGNode.isDAGNode(link)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", toDAGLink(link, {}));\n\n          case 4:\n            return _context.abrupt(\"return\", new DAGLink(link.Name || link.name, link.Tsize || link.size, link.Hash || link.multihash || link.hash || link.cid));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function asDAGLink(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar addLink = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(node, link) {\n    var links, data, dagLink;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            links = cloneLinks(node);\n            data = cloneData(node);\n            _context2.next = 4;\n            return asDAGLink(link);\n\n          case 4:\n            dagLink = _context2.sent;\n            links.push(dagLink);\n            return _context2.abrupt(\"return\", create(data, links));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function addLink(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nmodule.exports = addLink;","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipld-dag-pb/src/dag-node/addLink.js"],"names":["dagNodeUtil","require","cloneLinks","cloneData","toDAGLink","DAGLink","DAGNode","create","asDAGLink","link","isDAGLink","isDAGNode","Name","name","Tsize","size","Hash","multihash","hash","cid","addLink","node","links","data","dagLink","push","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,WAAW,GAAGC,OAAO,CAAC,QAAD,CAA3B;;AACA,IAAMC,UAAU,GAAGF,WAAW,CAACE,UAA/B;AACA,IAAMC,SAAS,GAAGH,WAAW,CAACG,SAA9B;AACA,IAAMC,SAAS,GAAGJ,WAAW,CAACI,SAA9B;;AACA,IAAMC,OAAO,GAAGJ,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAMK,OAAO,GAAGL,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMM,MAAM,GAAGN,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAMO,SAAS;AAAA,sEAAG,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA,iBACZJ,OAAO,CAACK,SAAR,CAAkBD,IAAlB,CADY;AAAA;AAAA;AAAA;;AAAA,6CAIPA,IAJO;;AAAA;AAAA,iBAOZH,OAAO,CAACK,SAAR,CAAkBF,IAAlB,CAPY;AAAA;AAAA;AAAA;;AAAA,6CAUPL,SAAS,CAACK,IAAD,EAAO,EAAP,CAVF;;AAAA;AAAA,6CAcT,IAAIJ,OAAJ,CAAYI,IAAI,CAACG,IAAL,IAAaH,IAAI,CAACI,IAA9B,EAAoCJ,IAAI,CAACK,KAAL,IAAcL,IAAI,CAACM,IAAvD,EAA6DN,IAAI,CAACO,IAAL,IAAaP,IAAI,CAACQ,SAAlB,IAA+BR,IAAI,CAACS,IAApC,IAA4CT,IAAI,CAACU,GAA9G,CAdS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATX,SAAS;AAAA;AAAA;AAAA,GAAf;;AAiBA,IAAMY,OAAO;AAAA,uEAAG,kBAAOC,IAAP,EAAaZ,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AACRa,YAAAA,KADQ,GACApB,UAAU,CAACmB,IAAD,CADV;AAERE,YAAAA,IAFQ,GAEDpB,SAAS,CAACkB,IAAD,CAFR;AAAA;AAAA,mBAIQb,SAAS,CAACC,IAAD,CAJjB;;AAAA;AAIRe,YAAAA,OAJQ;AAKdF,YAAAA,KAAK,CAACG,IAAN,CAAWD,OAAX;AALc,8CAMPjB,MAAM,CAACgB,IAAD,EAAOD,KAAP,CANC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPF,OAAO;AAAA;AAAA;AAAA,GAAb;;AASAM,MAAM,CAACC,OAAP,GAAiBP,OAAjB","sourcesContent":["'use strict'\n\nconst dagNodeUtil = require('./util')\nconst cloneLinks = dagNodeUtil.cloneLinks\nconst cloneData = dagNodeUtil.cloneData\nconst toDAGLink = dagNodeUtil.toDAGLink\nconst DAGLink = require('../dag-link')\nconst DAGNode = require('./index')\nconst create = require('./create')\n\nconst asDAGLink = async (link) => {\n  if (DAGLink.isDAGLink(link)) {\n    // It's a DAGLink instance\n    // no need to do anything\n    return link\n  }\n\n  if (DAGNode.isDAGNode(link)) {\n    // It's a DAGNode instance\n    // convert to link\n    return toDAGLink(link, {})\n  }\n\n  // It's a Object with name, multihash/hash/cid and size\n  return new DAGLink(link.Name || link.name, link.Tsize || link.size, link.Hash || link.multihash || link.hash || link.cid)\n}\n\nconst addLink = async (node, link) => {\n  const links = cloneLinks(node)\n  const data = cloneData(node)\n\n  const dagLink = await asDAGLink(link)\n  links.push(dagLink)\n  return create(data, links)\n}\n\nmodule.exports = addLink\n"]},"metadata":{},"sourceType":"script"}