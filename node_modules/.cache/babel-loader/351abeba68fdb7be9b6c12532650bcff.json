{"ast":null,"code":"/* eslint-disable require-await */\n'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar multihash = require('multihashes');\n\nvar crypto = self.crypto || self.msCrypto;\n\nvar digest = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, alg) {\n    var d;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof self === 'undefined' || !self.crypto && !self.msCrypto)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error('Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context');\n\n          case 2:\n            _context.t0 = alg;\n            _context.next = _context.t0 === 'sha1' ? 5 : _context.t0 === 'sha2-256' ? 10 : _context.t0 === 'sha2-512' ? 15 : _context.t0 === 'dbl-sha2-256' ? 20 : 28;\n            break;\n\n          case 5:\n            _context.t1 = Buffer;\n            _context.next = 8;\n            return crypto.subtle.digest({\n              name: 'SHA-1'\n            }, data);\n\n          case 8:\n            _context.t2 = _context.sent;\n            return _context.abrupt(\"return\", _context.t1.from.call(_context.t1, _context.t2));\n\n          case 10:\n            _context.t3 = Buffer;\n            _context.next = 13;\n            return crypto.subtle.digest({\n              name: 'SHA-256'\n            }, data);\n\n          case 13:\n            _context.t4 = _context.sent;\n            return _context.abrupt(\"return\", _context.t3.from.call(_context.t3, _context.t4));\n\n          case 15:\n            _context.t5 = Buffer;\n            _context.next = 18;\n            return crypto.subtle.digest({\n              name: 'SHA-512'\n            }, data);\n\n          case 18:\n            _context.t6 = _context.sent;\n            return _context.abrupt(\"return\", _context.t5.from.call(_context.t5, _context.t6));\n\n          case 20:\n            _context.next = 22;\n            return crypto.subtle.digest({\n              name: 'SHA-256'\n            }, data);\n\n          case 22:\n            d = _context.sent;\n            _context.t7 = Buffer;\n            _context.next = 26;\n            return crypto.subtle.digest({\n              name: 'SHA-256'\n            }, d);\n\n          case 26:\n            _context.t8 = _context.sent;\n            return _context.abrupt(\"return\", _context.t7.from.call(_context.t7, _context.t8));\n\n          case 28:\n            throw new Error(\"\".concat(alg, \" is not a supported algorithm\"));\n\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function digest(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = {\n  factory: function factory(alg) {\n    return /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", digest(data, alg));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  },\n  digest: digest,\n  multihashing: function () {\n    var _multihashing = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(buf, alg, length) {\n      var h;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return digest(buf, alg, length);\n\n            case 2:\n              h = _context3.sent;\n              return _context3.abrupt(\"return\", multihash.encode(h, alg, length));\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function multihashing(_x4, _x5, _x6) {\n      return _multihashing.apply(this, arguments);\n    }\n\n    return multihashing;\n  }()\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/multihashing-async/src/sha.browser.js"],"names":["require","Buffer","multihash","crypto","self","msCrypto","digest","data","alg","Error","subtle","name","from","d","module","exports","factory","multihashing","buf","length","h","encode"],"mappings":"AAAA;AACA;;;;;;eAEmBA,OAAO,CAAC,QAAD,C;IAAlBC,M,YAAAA,M;;AACR,IAAMC,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAzB;;AAEA,IAAMG,MAAM,GAAGC,IAAI,CAACD,MAAL,IAAeC,IAAI,CAACC,QAAnC;;AAEA,IAAMC,MAAM;AAAA,sEAAG,iBAAOC,IAAP,EAAaC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACT,OAAOJ,IAAP,KAAgB,WAAhB,IAAgC,CAACA,IAAI,CAACD,MAAN,IAAgB,CAACC,IAAI,CAACC,QAD7C;AAAA;AAAA;AAAA;;AAAA,kBAEL,IAAII,KAAJ,CACJ,2IADI,CAFK;;AAAA;AAAA,0BAMLD,GANK;AAAA,4CAON,MAPM,uBASN,UATM,wBAWN,UAXM,wBAaN,cAbM;AAAA;;AAAA;AAAA,0BAQFP,MARE;AAAA;AAAA,mBAQgBE,MAAM,CAACO,MAAP,CAAcJ,MAAd,CAAqB;AAAEK,cAAAA,IAAI,EAAE;AAAR,aAArB,EAAwCJ,IAAxC,CARhB;;AAAA;AAAA;AAAA,yDAQKK,IARL;;AAAA;AAAA,0BAUFX,MAVE;AAAA;AAAA,mBAUgBE,MAAM,CAACO,MAAP,CAAcJ,MAAd,CAAqB;AAAEK,cAAAA,IAAI,EAAE;AAAR,aAArB,EAA0CJ,IAA1C,CAVhB;;AAAA;AAAA;AAAA,yDAUKK,IAVL;;AAAA;AAAA,0BAYFX,MAZE;AAAA;AAAA,mBAYgBE,MAAM,CAACO,MAAP,CAAcJ,MAAd,CAAqB;AAAEK,cAAAA,IAAI,EAAE;AAAR,aAArB,EAA0CJ,IAA1C,CAZhB;;AAAA;AAAA;AAAA,yDAYKK,IAZL;;AAAA;AAAA;AAAA,mBAcOT,MAAM,CAACO,MAAP,CAAcJ,MAAd,CAAqB;AAAEK,cAAAA,IAAI,EAAE;AAAR,aAArB,EAA0CJ,IAA1C,CAdP;;AAAA;AAcHM,YAAAA,CAdG;AAAA,0BAeFZ,MAfE;AAAA;AAAA,mBAegBE,MAAM,CAACO,MAAP,CAAcJ,MAAd,CAAqB;AAAEK,cAAAA,IAAI,EAAE;AAAR,aAArB,EAA0CE,CAA1C,CAfhB;;AAAA;AAAA;AAAA,yDAeKD,IAfL;;AAAA;AAAA,kBAkBH,IAAIH,KAAJ,WAAaD,GAAb,mCAlBG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANF,MAAM;AAAA;AAAA;AAAA,GAAZ;;AAsBAQ,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,OAAO,EAAE,iBAACR,GAAD;AAAA;AAAA,2EAAS,kBAAOD,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA,kDACTD,MAAM,CAACC,IAAD,EAAOC,GAAP,CADG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAT;;AAAA;AAAA;AAAA;AAAA;AAAA,GADM;AAIfF,EAAAA,MAAM,EAANA,MAJe;AAKfW,EAAAA,YAAY;AAAA,iFAAE,kBAAOC,GAAP,EAAYV,GAAZ,EAAiBW,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACIb,MAAM,CAACY,GAAD,EAAMV,GAAN,EAAWW,MAAX,CADV;;AAAA;AACNC,cAAAA,CADM;AAAA,gDAELlB,SAAS,CAACmB,MAAV,CAAiBD,CAAjB,EAAoBZ,GAApB,EAAyBW,MAAzB,CAFK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AALG,CAAjB","sourcesContent":["/* eslint-disable require-await */\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst multihash = require('multihashes')\n\nconst crypto = self.crypto || self.msCrypto\n\nconst digest = async (data, alg) => {\n  if (typeof self === 'undefined' || (!self.crypto && !self.msCrypto)) {\n    throw new Error(\n      'Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context'\n    )\n  }\n  switch (alg) {\n    case 'sha1':\n      return Buffer.from(await crypto.subtle.digest({ name: 'SHA-1' }, data))\n    case 'sha2-256':\n      return Buffer.from(await crypto.subtle.digest({ name: 'SHA-256' }, data))\n    case 'sha2-512':\n      return Buffer.from(await crypto.subtle.digest({ name: 'SHA-512' }, data))\n    case 'dbl-sha2-256': {\n      const d = await crypto.subtle.digest({ name: 'SHA-256' }, data)\n      return Buffer.from(await crypto.subtle.digest({ name: 'SHA-256' }, d))\n    }\n    default:\n      throw new Error(`${alg} is not a supported algorithm`)\n  }\n}\n\nmodule.exports = {\n  factory: (alg) => async (data) => {\n    return digest(data, alg)\n  },\n  digest,\n  multihashing: async (buf, alg, length) => {\n    const h = await digest(buf, alg, length)\n    return multihash.encode(h, alg, length)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}