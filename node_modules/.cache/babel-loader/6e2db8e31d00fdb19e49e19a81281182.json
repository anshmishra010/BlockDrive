{"ast":null,"code":"'use strict';\n\nvar once = require('once');\n\nvar ConcatStream = require('concat-stream');\n\nvar SendFilesStream = require('./send-files-stream');\n\nmodule.exports = function (send, path) {\n  var sendFilesStream = SendFilesStream(send, path);\n  return function (file, options, _callback) {\n    var callback = once(_callback);\n    var stream = sendFilesStream(options);\n    var concat = ConcatStream(function (results) {\n      return callback(null, results);\n    });\n    stream.once('error', callback);\n    stream.pipe(concat);\n    stream.write(file);\n    stream.end();\n  };\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/utils/send-one-file-multiple-results.js"],"names":["once","require","ConcatStream","SendFilesStream","module","exports","send","path","sendFilesStream","file","options","_callback","callback","stream","concat","results","pipe","write","end"],"mappings":"AAAA;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA5B;;AACA,IAAME,eAAe,GAAGF,OAAO,CAAC,qBAAD,CAA/B;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAOC,IAAP,EAAgB;AAC/B,MAAMC,eAAe,GAAGL,eAAe,CAACG,IAAD,EAAOC,IAAP,CAAvC;AACA,SAAO,UAACE,IAAD,EAAOC,OAAP,EAAgBC,SAAhB,EAA8B;AACnC,QAAMC,QAAQ,GAAGZ,IAAI,CAACW,SAAD,CAArB;AACA,QAAME,MAAM,GAAGL,eAAe,CAACE,OAAD,CAA9B;AACA,QAAMI,MAAM,GAAGZ,YAAY,CAAC,UAACa,OAAD;AAAA,aAAaH,QAAQ,CAAC,IAAD,EAAOG,OAAP,CAArB;AAAA,KAAD,CAA3B;AACAF,IAAAA,MAAM,CAACb,IAAP,CAAY,OAAZ,EAAqBY,QAArB;AACAC,IAAAA,MAAM,CAACG,IAAP,CAAYF,MAAZ;AACAD,IAAAA,MAAM,CAACI,KAAP,CAAaR,IAAb;AACAI,IAAAA,MAAM,CAACK,GAAP;AACD,GARD;AASD,CAXD","sourcesContent":["'use strict'\n\nconst once = require('once')\nconst ConcatStream = require('concat-stream')\nconst SendFilesStream = require('./send-files-stream')\n\nmodule.exports = (send, path) => {\n  const sendFilesStream = SendFilesStream(send, path)\n  return (file, options, _callback) => {\n    const callback = once(_callback)\n    const stream = sendFilesStream(options)\n    const concat = ConcatStream((results) => callback(null, results))\n    stream.once('error', callback)\n    stream.pipe(concat)\n    stream.write(file)\n    stream.end()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}