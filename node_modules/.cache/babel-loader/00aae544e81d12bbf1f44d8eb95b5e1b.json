{"ast":null,"code":"'use strict';\n\nexports.toCallback = function (doWork) {\n  return function (input, callback) {\n    var res;\n\n    try {\n      res = doWork(input);\n    } catch (err) {\n      process.nextTick(callback, err);\n      return;\n    }\n\n    process.nextTick(callback, null, res);\n  };\n};\n\nexports.toBuf = function (doWork, other) {\n  return function (input) {\n    var result = doWork(input, other);\n    return Buffer.from(result, 'hex');\n  };\n};\n\nexports.fromString = function (doWork, other) {\n  return function (_input) {\n    var input = Buffer.isBuffer(_input) ? _input.toString() : _input;\n    return doWork(input, other);\n  };\n};\n\nexports.fromNumberTo32BitBuf = function (doWork, other) {\n  return function (input) {\n    var number = doWork(input, other);\n    var bytes = new Array(4);\n\n    for (var i = 0; i < 4; i++) {\n      bytes[i] = number & 0xff;\n      number = number >> 8;\n    }\n\n    return Buffer.from(bytes);\n  };\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/libp2p-crypto/node_modules/multihashing-async/src/utils.js"],"names":["exports","toCallback","doWork","input","callback","res","err","process","nextTick","toBuf","other","result","Buffer","from","fromString","_input","isBuffer","toString","fromNumberTo32BitBuf","number","bytes","Array","i"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,UAACC,MAAD,EAAY;AAC/B,SAAO,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AAChC,QAAIC,GAAJ;;AACA,QAAI;AACFA,MAAAA,GAAG,GAAGH,MAAM,CAACC,KAAD,CAAZ;AACD,KAFD,CAEE,OAAOG,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,QAAR,CAAiBJ,QAAjB,EAA2BE,GAA3B;AACA;AACD;;AAEDC,IAAAA,OAAO,CAACC,QAAR,CAAiBJ,QAAjB,EAA2B,IAA3B,EAAiCC,GAAjC;AACD,GAVD;AAWD,CAZD;;AAcAL,OAAO,CAACS,KAAR,GAAgB,UAACP,MAAD,EAASQ,KAAT;AAAA,SAAmB,UAACP,KAAD,EAAW;AAC5C,QAAIQ,MAAM,GAAGT,MAAM,CAACC,KAAD,EAAQO,KAAR,CAAnB;AACA,WAAOE,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoB,KAApB,CAAP;AACD,GAHe;AAAA,CAAhB;;AAKAX,OAAO,CAACc,UAAR,GAAqB,UAACZ,MAAD,EAASQ,KAAT;AAAA,SAAmB,UAACK,MAAD,EAAY;AAClD,QAAMZ,KAAK,GAAGS,MAAM,CAACI,QAAP,CAAgBD,MAAhB,IAA0BA,MAAM,CAACE,QAAP,EAA1B,GAA8CF,MAA5D;AACA,WAAOb,MAAM,CAACC,KAAD,EAAQO,KAAR,CAAb;AACD,GAHoB;AAAA,CAArB;;AAKAV,OAAO,CAACkB,oBAAR,GAA+B,UAAChB,MAAD,EAASQ,KAAT;AAAA,SAAmB,UAACP,KAAD,EAAW;AAC3D,QAAIgB,MAAM,GAAGjB,MAAM,CAACC,KAAD,EAAQO,KAAR,CAAnB;AACA,QAAMU,KAAK,GAAG,IAAIC,KAAJ,CAAU,CAAV,CAAd;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BF,MAAAA,KAAK,CAACE,CAAD,CAAL,GAAWH,MAAM,GAAG,IAApB;AACAA,MAAAA,MAAM,GAAGA,MAAM,IAAI,CAAnB;AACD;;AAED,WAAOP,MAAM,CAACC,IAAP,CAAYO,KAAZ,CAAP;AACD,GAV8B;AAAA,CAA/B","sourcesContent":["'use strict'\n\nexports.toCallback = (doWork) => {\n  return function (input, callback) {\n    let res\n    try {\n      res = doWork(input)\n    } catch (err) {\n      process.nextTick(callback, err)\n      return\n    }\n\n    process.nextTick(callback, null, res)\n  }\n}\n\nexports.toBuf = (doWork, other) => (input) => {\n  let result = doWork(input, other)\n  return Buffer.from(result, 'hex')\n}\n\nexports.fromString = (doWork, other) => (_input) => {\n  const input = Buffer.isBuffer(_input) ? _input.toString() : _input\n  return doWork(input, other)\n}\n\nexports.fromNumberTo32BitBuf = (doWork, other) => (input) => {\n  let number = doWork(input, other)\n  const bytes = new Array(4)\n\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = number & 0xff\n    number = number >> 8\n  }\n\n  return Buffer.from(bytes)\n}\n"]},"metadata":{},"sourceType":"script"}