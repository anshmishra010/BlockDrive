{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer');\n\nvar multiaddr = require('multiaddr');\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nvar errcode = require('err-code');\n\nmodule.exports = function (send) {\n  return promisify(function (peerId, opts, callback) {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    var handleResult = function handleResult(res, callback) {\n      // Inconsistent return values in the browser\n      if (Array.isArray(res)) {\n        res = res.find(function (r) {\n          return r.Type === 2;\n        });\n      } // Type 2 keys\n      // 2 = FinalPeer\n      // https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L18\n\n\n      if (!res || res.Type !== 2) {\n        var errMsg = \"key was not found (type 4)\";\n        return callback(errcode(new Error(errMsg), 'ERR_KEY_TYPE_4_NOT_FOUND'));\n      }\n\n      var responseReceived = res.Responses[0];\n      var peerInfo = new PeerInfo(PeerId.createFromB58String(responseReceived.ID));\n      responseReceived.Addrs.forEach(function (addr) {\n        var ma = multiaddr(addr);\n        peerInfo.multiaddrs.add(ma);\n      });\n      callback(null, peerInfo);\n    };\n\n    send({\n      path: 'dht/findpeer',\n      args: peerId.toString(),\n      qs: opts\n    }, function (err, result) {\n      if (err) {\n        return callback(err);\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback);\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/dht/findpeer.js"],"names":["promisify","require","streamToValueWithTransformer","multiaddr","PeerId","PeerInfo","errcode","module","exports","send","peerId","opts","callback","handleResult","res","Array","isArray","find","r","Type","errMsg","Error","responseReceived","Responses","peerInfo","createFromB58String","ID","Addrs","forEach","addr","ma","multiaddrs","add","path","args","toString","qs","err","result"],"mappings":"AAAA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAMC,4BAA4B,GAAGD,OAAO,CAAC,2CAAD,CAA5C;;AAEA,IAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,SAAD,CAAtB;;AACA,IAAMI,QAAQ,GAAGJ,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAMK,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AAEAM,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,SAAOT,SAAS,CAAC,UAACU,MAAD,EAASC,IAAT,EAAeC,QAAf,EAA4B;AAC3C,QAAI,OAAOD,IAAP,KAAgB,UAAhB,IAA8B,CAACC,QAAnC,EAA6C;AAC3CA,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD,KAJ0C,CAM3C;AACA;;;AACA,QAAI,OAAOA,IAAP,KAAgB,UAAhB,IAA8B,OAAOC,QAAP,KAAoB,UAAtD,EAAkE;AAChEA,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,QAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAMF,QAAN,EAAmB;AACtC;AACA,UAAIG,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AACtBA,QAAAA,GAAG,GAAGA,GAAG,CAACG,IAAJ,CAAS,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACC,IAAF,KAAW,CAAf;AAAA,SAAV,CAAN;AACD,OAJqC,CAMtC;AACA;AACA;;;AACA,UAAI,CAACL,GAAD,IAAQA,GAAG,CAACK,IAAJ,KAAa,CAAzB,EAA4B;AAC1B,YAAMC,MAAM,+BAAZ;AACA,eAAOR,QAAQ,CAACN,OAAO,CAAC,IAAIe,KAAJ,CAAUD,MAAV,CAAD,EAAoB,0BAApB,CAAR,CAAf;AACD;;AAED,UAAME,gBAAgB,GAAGR,GAAG,CAACS,SAAJ,CAAc,CAAd,CAAzB;AACA,UAAMC,QAAQ,GAAG,IAAInB,QAAJ,CAAaD,MAAM,CAACqB,mBAAP,CAA2BH,gBAAgB,CAACI,EAA5C,CAAb,CAAjB;AAEAJ,MAAAA,gBAAgB,CAACK,KAAjB,CAAuBC,OAAvB,CAA+B,UAACC,IAAD,EAAU;AACvC,YAAMC,EAAE,GAAG3B,SAAS,CAAC0B,IAAD,CAApB;AAEAL,QAAAA,QAAQ,CAACO,UAAT,CAAoBC,GAApB,CAAwBF,EAAxB;AACD,OAJD;AAMAlB,MAAAA,QAAQ,CAAC,IAAD,EAAOY,QAAP,CAAR;AACD,KAxBD;;AA0BAf,IAAAA,IAAI,CAAC;AACHwB,MAAAA,IAAI,EAAE,cADH;AAEHC,MAAAA,IAAI,EAAExB,MAAM,CAACyB,QAAP,EAFH;AAGHC,MAAAA,EAAE,EAAEzB;AAHD,KAAD,EAID,UAAC0B,GAAD,EAAMC,MAAN,EAAiB;AAClB,UAAID,GAAJ,EAAS;AACP,eAAOzB,QAAQ,CAACyB,GAAD,CAAf;AACD;;AAEDnC,MAAAA,4BAA4B,CAACoC,MAAD,EAASzB,YAAT,EAAuBD,QAAvB,CAA5B;AACD,KAVG,CAAJ;AAWD,GAlDe,CAAhB;AAmDD,CApDD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer')\n\nconst multiaddr = require('multiaddr')\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\nconst errcode = require('err-code')\n\nmodule.exports = (send) => {\n  return promisify((peerId, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts\n      opts = {}\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    const handleResult = (res, callback) => {\n      // Inconsistent return values in the browser\n      if (Array.isArray(res)) {\n        res = res.find(r => r.Type === 2)\n      }\n\n      // Type 2 keys\n      // 2 = FinalPeer\n      // https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L18\n      if (!res || res.Type !== 2) {\n        const errMsg = `key was not found (type 4)`\n        return callback(errcode(new Error(errMsg), 'ERR_KEY_TYPE_4_NOT_FOUND'))\n      }\n\n      const responseReceived = res.Responses[0]\n      const peerInfo = new PeerInfo(PeerId.createFromB58String(responseReceived.ID))\n\n      responseReceived.Addrs.forEach((addr) => {\n        const ma = multiaddr(addr)\n\n        peerInfo.multiaddrs.add(ma)\n      })\n\n      callback(null, peerInfo)\n    }\n\n    send({\n      path: 'dht/findpeer',\n      args: peerId.toString(),\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback)\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}