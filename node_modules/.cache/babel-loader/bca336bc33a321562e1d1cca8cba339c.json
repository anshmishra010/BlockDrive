{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar CID = require('cids');\n\nvar withIs = require('class-is');\n/**\n * Represents an immutable block of data that is uniquely referenced with a cid.\n *\n * @constructor\n * @param {Buffer} data - The data to be stored in the block as a buffer.\n * @param {CID} cid - The cid of the data\n *\n * @example\n * const block = new Block(new Buffer('a012d83b20f9371...'))\n */\n\n\nvar Block = /*#__PURE__*/function () {\n  function Block(data, cid) {\n    _classCallCheck(this, Block);\n\n    if (!data || !Buffer.isBuffer(data)) {\n      throw new Error('first argument  must be a buffer');\n    }\n\n    if (!cid || !CID.isCID(cid)) {\n      throw new Error('second argument must be a CID');\n    }\n\n    this._data = data;\n    this._cid = cid;\n  }\n  /**\n   * The data of this block.\n   *\n   * @type {Buffer}\n   */\n\n\n  _createClass(Block, [{\n    key: \"data\",\n    get: function get() {\n      return this._data;\n    },\n    set: function set(val) {\n      throw new Error('Tried to change an immutable block');\n    }\n    /**\n     * The cid of the data this block represents.\n     *\n     * @type {CID}\n     */\n\n  }, {\n    key: \"cid\",\n    get: function get() {\n      return this._cid;\n    },\n    set: function set(val) {\n      throw new Error('Tried to change an immutable block');\n    }\n  }]);\n\n  return Block;\n}();\n\nmodule.exports = withIs(Block, {\n  className: 'Block',\n  symbolName: '@ipfs/js-ipfs-block/block'\n});","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-block/src/index.js"],"names":["CID","require","withIs","Block","data","cid","Buffer","isBuffer","Error","isCID","_data","_cid","val","module","exports","className","symbolName"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACME,K;AACJ,iBAAaC,IAAb,EAAmBC,GAAnB,EAAwB;AAAA;;AACtB,QAAI,CAACD,IAAD,IAAS,CAACE,MAAM,CAACC,QAAP,CAAgBH,IAAhB,CAAd,EAAqC;AACnC,YAAM,IAAII,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAED,QAAI,CAACH,GAAD,IAAQ,CAACL,GAAG,CAACS,KAAJ,CAAUJ,GAAV,CAAb,EAA6B;AAC3B,YAAM,IAAIG,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,SAAKE,KAAL,GAAaN,IAAb;AACA,SAAKO,IAAL,GAAYN,GAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;;;wBACc;AACV,aAAO,KAAKK,KAAZ;AACD,K;sBAESE,G,EAAK;AACb,YAAM,IAAIJ,KAAJ,CAAU,oCAAV,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;;;;wBACa;AACT,aAAO,KAAKG,IAAZ;AACD,K;sBAEQC,G,EAAK;AACZ,YAAM,IAAIJ,KAAJ,CAAU,oCAAV,CAAN;AACD;;;;;;AAGHK,MAAM,CAACC,OAAP,GAAiBZ,MAAM,CAACC,KAAD,EAAQ;AAAEY,EAAAA,SAAS,EAAE,OAAb;AAAsBC,EAAAA,UAAU,EAAE;AAAlC,CAAR,CAAvB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst withIs = require('class-is')\n\n/**\n * Represents an immutable block of data that is uniquely referenced with a cid.\n *\n * @constructor\n * @param {Buffer} data - The data to be stored in the block as a buffer.\n * @param {CID} cid - The cid of the data\n *\n * @example\n * const block = new Block(new Buffer('a012d83b20f9371...'))\n */\nclass Block {\n  constructor (data, cid) {\n    if (!data || !Buffer.isBuffer(data)) {\n      throw new Error('first argument  must be a buffer')\n    }\n\n    if (!cid || !CID.isCID(cid)) {\n      throw new Error('second argument must be a CID')\n    }\n\n    this._data = data\n    this._cid = cid\n  }\n\n  /**\n   * The data of this block.\n   *\n   * @type {Buffer}\n   */\n  get data () {\n    return this._data\n  }\n\n  set data (val) {\n    throw new Error('Tried to change an immutable block')\n  }\n\n  /**\n   * The cid of the data this block represents.\n   *\n   * @type {CID}\n   */\n  get cid () {\n    return this._cid\n  }\n\n  set cid (val) {\n    throw new Error('Tried to change an immutable block')\n  }\n}\n\nmodule.exports = withIs(Block, { className: 'Block', symbolName: '@ipfs/js-ipfs-block/block' })\n"]},"metadata":{},"sourceType":"script"}