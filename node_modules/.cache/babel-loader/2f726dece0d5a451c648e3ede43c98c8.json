{"ast":null,"code":"'use strict'; // A linked list to keep track of recently-used-ness\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\anshm\\\\blockdrive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar Yallist = require('yallist');\n\nvar MAX = Symbol('max');\nvar LENGTH = Symbol('length');\nvar LENGTH_CALCULATOR = Symbol('lengthCalculator');\nvar ALLOW_STALE = Symbol('allowStale');\nvar MAX_AGE = Symbol('maxAge');\nvar DISPOSE = Symbol('dispose');\nvar NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');\nvar LRU_LIST = Symbol('lruList');\nvar CACHE = Symbol('cache');\nvar UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');\n\nvar naiveLength = function naiveLength() {\n  return 1;\n}; // lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\n\n\nvar LRUCache = /*#__PURE__*/function () {\n  function LRUCache(options) {\n    _classCallCheck(this, LRUCache);\n\n    if (typeof options === 'number') options = {\n      max: options\n    };\n    if (!options) options = {};\n    if (options.max && (typeof options.max !== 'number' || options.max < 0)) throw new TypeError('max must be a non-negative number'); // Kind of weird to have a default max of Infinity, but oh well.\n\n    var max = this[MAX] = options.max || Infinity;\n    var lc = options.length || naiveLength;\n    this[LENGTH_CALCULATOR] = typeof lc !== 'function' ? naiveLength : lc;\n    this[ALLOW_STALE] = options.stale || false;\n    if (options.maxAge && typeof options.maxAge !== 'number') throw new TypeError('maxAge must be a number');\n    this[MAX_AGE] = options.maxAge || 0;\n    this[DISPOSE] = options.dispose;\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;\n    this.reset();\n  } // resize the cache when the max changes.\n\n\n  _createClass(LRUCache, [{\n    key: \"rforEach\",\n    value: function rforEach(fn, thisp) {\n      thisp = thisp || this;\n\n      for (var walker = this[LRU_LIST].tail; walker !== null;) {\n        var prev = walker.prev;\n        forEachStep(this, fn, walker, thisp);\n        walker = prev;\n      }\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn, thisp) {\n      thisp = thisp || this;\n\n      for (var walker = this[LRU_LIST].head; walker !== null;) {\n        var next = walker.next;\n        forEachStep(this, fn, walker, thisp);\n        walker = next;\n      }\n    }\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this[LRU_LIST].toArray().map(function (k) {\n        return k.key;\n      });\n    }\n  }, {\n    key: \"values\",\n    value: function values() {\n      return this[LRU_LIST].toArray().map(function (k) {\n        return k.value;\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this = this;\n\n      if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {\n        this[LRU_LIST].forEach(function (hit) {\n          return _this[DISPOSE](hit.key, hit.value);\n        });\n      }\n\n      this[CACHE] = new Map(); // hash of items by key\n\n      this[LRU_LIST] = new Yallist(); // list of items in order of use recency\n\n      this[LENGTH] = 0; // length of items in the list\n    }\n  }, {\n    key: \"dump\",\n    value: function dump() {\n      var _this2 = this;\n\n      return this[LRU_LIST].map(function (hit) {\n        return isStale(_this2, hit) ? false : {\n          k: hit.key,\n          v: hit.value,\n          e: hit.now + (hit.maxAge || 0)\n        };\n      }).toArray().filter(function (h) {\n        return h;\n      });\n    }\n  }, {\n    key: \"dumpLru\",\n    value: function dumpLru() {\n      return this[LRU_LIST];\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value, maxAge) {\n      maxAge = maxAge || this[MAX_AGE];\n      if (maxAge && typeof maxAge !== 'number') throw new TypeError('maxAge must be a number');\n      var now = maxAge ? Date.now() : 0;\n      var len = this[LENGTH_CALCULATOR](value, key);\n\n      if (this[CACHE].has(key)) {\n        if (len > this[MAX]) {\n          _del(this, this[CACHE].get(key));\n\n          return false;\n        }\n\n        var node = this[CACHE].get(key);\n        var item = node.value; // dispose of the old one before overwriting\n        // split out into 2 ifs for better coverage tracking\n\n        if (this[DISPOSE]) {\n          if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);\n        }\n\n        item.now = now;\n        item.maxAge = maxAge;\n        item.value = value;\n        this[LENGTH] += len - item.length;\n        item.length = len;\n        this.get(key);\n        trim(this);\n        return true;\n      }\n\n      var hit = new Entry(key, value, len, now, maxAge); // oversized objects fall out of cache automatically.\n\n      if (hit.length > this[MAX]) {\n        if (this[DISPOSE]) this[DISPOSE](key, value);\n        return false;\n      }\n\n      this[LENGTH] += hit.length;\n      this[LRU_LIST].unshift(hit);\n      this[CACHE].set(key, this[LRU_LIST].head);\n      trim(this);\n      return true;\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      if (!this[CACHE].has(key)) return false;\n      var hit = this[CACHE].get(key).value;\n      return !isStale(this, hit);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return _get(this, key, true);\n    }\n  }, {\n    key: \"peek\",\n    value: function peek(key) {\n      return _get(this, key, false);\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      var node = this[LRU_LIST].tail;\n      if (!node) return null;\n\n      _del(this, node);\n\n      return node.value;\n    }\n  }, {\n    key: \"del\",\n    value: function del(key) {\n      _del(this, this[CACHE].get(key));\n    }\n  }, {\n    key: \"load\",\n    value: function load(arr) {\n      // reset the cache\n      this.reset();\n      var now = Date.now(); // A previous serialized cache has the most recent items first\n\n      for (var l = arr.length - 1; l >= 0; l--) {\n        var hit = arr[l];\n        var expiresAt = hit.e || 0;\n        if (expiresAt === 0) // the item was created without expiration in a non aged cache\n          this.set(hit.k, hit.v);else {\n          var maxAge = expiresAt - now; // dont add already expired items\n\n          if (maxAge > 0) {\n            this.set(hit.k, hit.v, maxAge);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"prune\",\n    value: function prune() {\n      var _this3 = this;\n\n      this[CACHE].forEach(function (value, key) {\n        return _get(_this3, key, false);\n      });\n    }\n  }, {\n    key: \"max\",\n    set: function set(mL) {\n      if (typeof mL !== 'number' || mL < 0) throw new TypeError('max must be a non-negative number');\n      this[MAX] = mL || Infinity;\n      trim(this);\n    },\n    get: function get() {\n      return this[MAX];\n    }\n  }, {\n    key: \"allowStale\",\n    set: function set(allowStale) {\n      this[ALLOW_STALE] = !!allowStale;\n    },\n    get: function get() {\n      return this[ALLOW_STALE];\n    }\n  }, {\n    key: \"maxAge\",\n    set: function set(mA) {\n      if (typeof mA !== 'number') throw new TypeError('maxAge must be a non-negative number');\n      this[MAX_AGE] = mA;\n      trim(this);\n    },\n    get: function get() {\n      return this[MAX_AGE];\n    } // resize the cache when the lengthCalculator changes.\n\n  }, {\n    key: \"lengthCalculator\",\n    set: function set(lC) {\n      var _this4 = this;\n\n      if (typeof lC !== 'function') lC = naiveLength;\n\n      if (lC !== this[LENGTH_CALCULATOR]) {\n        this[LENGTH_CALCULATOR] = lC;\n        this[LENGTH] = 0;\n        this[LRU_LIST].forEach(function (hit) {\n          hit.length = _this4[LENGTH_CALCULATOR](hit.value, hit.key);\n          _this4[LENGTH] += hit.length;\n        });\n      }\n\n      trim(this);\n    },\n    get: function get() {\n      return this[LENGTH_CALCULATOR];\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this[LENGTH];\n    }\n  }, {\n    key: \"itemCount\",\n    get: function get() {\n      return this[LRU_LIST].length;\n    }\n  }]);\n\n  return LRUCache;\n}();\n\nvar _get = function _get(self, key, doUse) {\n  var node = self[CACHE].get(key);\n\n  if (node) {\n    var hit = node.value;\n\n    if (isStale(self, hit)) {\n      _del(self, node);\n\n      if (!self[ALLOW_STALE]) return undefined;\n    } else {\n      if (doUse) {\n        if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();\n        self[LRU_LIST].unshiftNode(node);\n      }\n    }\n\n    return hit.value;\n  }\n};\n\nvar isStale = function isStale(self, hit) {\n  if (!hit || !hit.maxAge && !self[MAX_AGE]) return false;\n  var diff = Date.now() - hit.now;\n  return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];\n};\n\nvar trim = function trim(self) {\n  if (self[LENGTH] > self[MAX]) {\n    for (var walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      var prev = walker.prev;\n\n      _del(self, walker);\n\n      walker = prev;\n    }\n  }\n};\n\nvar _del = function _del(self, node) {\n  if (node) {\n    var hit = node.value;\n    if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);\n    self[LENGTH] -= hit.length;\n    self[CACHE].delete(hit.key);\n    self[LRU_LIST].removeNode(node);\n  }\n};\n\nvar Entry = function Entry(key, value, length, now, maxAge) {\n  _classCallCheck(this, Entry);\n\n  this.key = key;\n  this.value = value;\n  this.length = length;\n  this.now = now;\n  this.maxAge = maxAge || 0;\n};\n\nvar forEachStep = function forEachStep(self, fn, node, thisp) {\n  var hit = node.value;\n\n  if (isStale(self, hit)) {\n    _del(self, node);\n\n    if (!self[ALLOW_STALE]) hit = undefined;\n  }\n\n  if (hit) fn.call(thisp, hit.value, hit.key, self);\n};\n\nmodule.exports = LRUCache;","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/lru-cache/index.js"],"names":["Yallist","require","MAX","Symbol","LENGTH","LENGTH_CALCULATOR","ALLOW_STALE","MAX_AGE","DISPOSE","NO_DISPOSE_ON_SET","LRU_LIST","CACHE","UPDATE_AGE_ON_GET","naiveLength","LRUCache","options","max","TypeError","Infinity","lc","length","stale","maxAge","dispose","noDisposeOnSet","updateAgeOnGet","reset","fn","thisp","walker","tail","prev","forEachStep","head","next","toArray","map","k","key","value","forEach","hit","Map","isStale","v","e","now","filter","h","Date","len","has","del","get","node","item","trim","Entry","unshift","set","arr","l","expiresAt","mL","allowStale","mA","lC","self","doUse","undefined","unshiftNode","diff","delete","removeNode","call","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n// A linked list to keep track of recently-used-ness\nconst Yallist = require('yallist')\n\nconst MAX = Symbol('max')\nconst LENGTH = Symbol('length')\nconst LENGTH_CALCULATOR = Symbol('lengthCalculator')\nconst ALLOW_STALE = Symbol('allowStale')\nconst MAX_AGE = Symbol('maxAge')\nconst DISPOSE = Symbol('dispose')\nconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')\nconst LRU_LIST = Symbol('lruList')\nconst CACHE = Symbol('cache')\nconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')\n\nconst naiveLength = () => 1\n\n// lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\nclass LRUCache {\n  constructor (options) {\n    if (typeof options === 'number')\n      options = { max: options }\n\n    if (!options)\n      options = {}\n\n    if (options.max && (typeof options.max !== 'number' || options.max < 0))\n      throw new TypeError('max must be a non-negative number')\n    // Kind of weird to have a default max of Infinity, but oh well.\n    const max = this[MAX] = options.max || Infinity\n\n    const lc = options.length || naiveLength\n    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc\n    this[ALLOW_STALE] = options.stale || false\n    if (options.maxAge && typeof options.maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n    this[MAX_AGE] = options.maxAge || 0\n    this[DISPOSE] = options.dispose\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false\n    this.reset()\n  }\n\n  // resize the cache when the max changes.\n  set max (mL) {\n    if (typeof mL !== 'number' || mL < 0)\n      throw new TypeError('max must be a non-negative number')\n\n    this[MAX] = mL || Infinity\n    trim(this)\n  }\n  get max () {\n    return this[MAX]\n  }\n\n  set allowStale (allowStale) {\n    this[ALLOW_STALE] = !!allowStale\n  }\n  get allowStale () {\n    return this[ALLOW_STALE]\n  }\n\n  set maxAge (mA) {\n    if (typeof mA !== 'number')\n      throw new TypeError('maxAge must be a non-negative number')\n\n    this[MAX_AGE] = mA\n    trim(this)\n  }\n  get maxAge () {\n    return this[MAX_AGE]\n  }\n\n  // resize the cache when the lengthCalculator changes.\n  set lengthCalculator (lC) {\n    if (typeof lC !== 'function')\n      lC = naiveLength\n\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC\n      this[LENGTH] = 0\n      this[LRU_LIST].forEach(hit => {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)\n        this[LENGTH] += hit.length\n      })\n    }\n    trim(this)\n  }\n  get lengthCalculator () { return this[LENGTH_CALCULATOR] }\n\n  get length () { return this[LENGTH] }\n  get itemCount () { return this[LRU_LIST].length }\n\n  rforEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].tail; walker !== null;) {\n      const prev = walker.prev\n      forEachStep(this, fn, walker, thisp)\n      walker = prev\n    }\n  }\n\n  forEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].head; walker !== null;) {\n      const next = walker.next\n      forEachStep(this, fn, walker, thisp)\n      walker = next\n    }\n  }\n\n  keys () {\n    return this[LRU_LIST].toArray().map(k => k.key)\n  }\n\n  values () {\n    return this[LRU_LIST].toArray().map(k => k.value)\n  }\n\n  reset () {\n    if (this[DISPOSE] &&\n        this[LRU_LIST] &&\n        this[LRU_LIST].length) {\n      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))\n    }\n\n    this[CACHE] = new Map() // hash of items by key\n    this[LRU_LIST] = new Yallist() // list of items in order of use recency\n    this[LENGTH] = 0 // length of items in the list\n  }\n\n  dump () {\n    return this[LRU_LIST].map(hit =>\n      isStale(this, hit) ? false : {\n        k: hit.key,\n        v: hit.value,\n        e: hit.now + (hit.maxAge || 0)\n      }).toArray().filter(h => h)\n  }\n\n  dumpLru () {\n    return this[LRU_LIST]\n  }\n\n  set (key, value, maxAge) {\n    maxAge = maxAge || this[MAX_AGE]\n\n    if (maxAge && typeof maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n\n    const now = maxAge ? Date.now() : 0\n    const len = this[LENGTH_CALCULATOR](value, key)\n\n    if (this[CACHE].has(key)) {\n      if (len > this[MAX]) {\n        del(this, this[CACHE].get(key))\n        return false\n      }\n\n      const node = this[CACHE].get(key)\n      const item = node.value\n\n      // dispose of the old one before overwriting\n      // split out into 2 ifs for better coverage tracking\n      if (this[DISPOSE]) {\n        if (!this[NO_DISPOSE_ON_SET])\n          this[DISPOSE](key, item.value)\n      }\n\n      item.now = now\n      item.maxAge = maxAge\n      item.value = value\n      this[LENGTH] += len - item.length\n      item.length = len\n      this.get(key)\n      trim(this)\n      return true\n    }\n\n    const hit = new Entry(key, value, len, now, maxAge)\n\n    // oversized objects fall out of cache automatically.\n    if (hit.length > this[MAX]) {\n      if (this[DISPOSE])\n        this[DISPOSE](key, value)\n\n      return false\n    }\n\n    this[LENGTH] += hit.length\n    this[LRU_LIST].unshift(hit)\n    this[CACHE].set(key, this[LRU_LIST].head)\n    trim(this)\n    return true\n  }\n\n  has (key) {\n    if (!this[CACHE].has(key)) return false\n    const hit = this[CACHE].get(key).value\n    return !isStale(this, hit)\n  }\n\n  get (key) {\n    return get(this, key, true)\n  }\n\n  peek (key) {\n    return get(this, key, false)\n  }\n\n  pop () {\n    const node = this[LRU_LIST].tail\n    if (!node)\n      return null\n\n    del(this, node)\n    return node.value\n  }\n\n  del (key) {\n    del(this, this[CACHE].get(key))\n  }\n\n  load (arr) {\n    // reset the cache\n    this.reset()\n\n    const now = Date.now()\n    // A previous serialized cache has the most recent items first\n    for (let l = arr.length - 1; l >= 0; l--) {\n      const hit = arr[l]\n      const expiresAt = hit.e || 0\n      if (expiresAt === 0)\n        // the item was created without expiration in a non aged cache\n        this.set(hit.k, hit.v)\n      else {\n        const maxAge = expiresAt - now\n        // dont add already expired items\n        if (maxAge > 0) {\n          this.set(hit.k, hit.v, maxAge)\n        }\n      }\n    }\n  }\n\n  prune () {\n    this[CACHE].forEach((value, key) => get(this, key, false))\n  }\n}\n\nconst get = (self, key, doUse) => {\n  const node = self[CACHE].get(key)\n  if (node) {\n    const hit = node.value\n    if (isStale(self, hit)) {\n      del(self, node)\n      if (!self[ALLOW_STALE])\n        return undefined\n    } else {\n      if (doUse) {\n        if (self[UPDATE_AGE_ON_GET])\n          node.value.now = Date.now()\n        self[LRU_LIST].unshiftNode(node)\n      }\n    }\n    return hit.value\n  }\n}\n\nconst isStale = (self, hit) => {\n  if (!hit || (!hit.maxAge && !self[MAX_AGE]))\n    return false\n\n  const diff = Date.now() - hit.now\n  return hit.maxAge ? diff > hit.maxAge\n    : self[MAX_AGE] && (diff > self[MAX_AGE])\n}\n\nconst trim = self => {\n  if (self[LENGTH] > self[MAX]) {\n    for (let walker = self[LRU_LIST].tail;\n      self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      const prev = walker.prev\n      del(self, walker)\n      walker = prev\n    }\n  }\n}\n\nconst del = (self, node) => {\n  if (node) {\n    const hit = node.value\n    if (self[DISPOSE])\n      self[DISPOSE](hit.key, hit.value)\n\n    self[LENGTH] -= hit.length\n    self[CACHE].delete(hit.key)\n    self[LRU_LIST].removeNode(node)\n  }\n}\n\nclass Entry {\n  constructor (key, value, length, now, maxAge) {\n    this.key = key\n    this.value = value\n    this.length = length\n    this.now = now\n    this.maxAge = maxAge || 0\n  }\n}\n\nconst forEachStep = (self, fn, node, thisp) => {\n  let hit = node.value\n  if (isStale(self, hit)) {\n    del(self, node)\n    if (!self[ALLOW_STALE])\n      hit = undefined\n  }\n  if (hit)\n    fn.call(thisp, hit.value, hit.key, self)\n}\n\nmodule.exports = LRUCache\n"]},"metadata":{},"sourceType":"script"}