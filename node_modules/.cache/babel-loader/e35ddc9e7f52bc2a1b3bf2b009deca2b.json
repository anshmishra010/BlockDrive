{"ast":null,"code":"'use strict';\n\nvar dagPB = require('ipld-dag-pb');\n\nvar dagCBOR = require('ipld-dag-cbor');\n\nvar promisify = require('promisify-es6');\n\nvar CID = require('cids');\n\nvar multihash = require('multihashes');\n\nvar SendOneFile = require('../utils/send-one-file');\n\nmodule.exports = function (send) {\n  var sendOneFile = SendOneFile(send, 'dag/put');\n  return promisify(function (dagNode, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n    }\n\n    options = options || {};\n\n    if (options.hash) {\n      options.hashAlg = options.hash;\n      delete options.hash;\n    }\n\n    if (options.cid && (options.format || options.hashAlg)) {\n      return callback(new Error('Can\\'t put dag node. Please provide either `cid` OR `format` and `hash` options.'));\n    } else if (options.format && !options.hashAlg || !options.format && options.hashAlg) {\n      return callback(new Error('Can\\'t put dag node. Please provide `format` AND `hash` options.'));\n    }\n\n    if (options.cid) {\n      var cid;\n\n      try {\n        cid = new CID(options.cid);\n      } catch (err) {\n        return callback(err);\n      }\n\n      options.format = cid.codec;\n      options.hashAlg = multihash.decode(cid.multihash).name;\n      delete options.cid;\n    }\n\n    var optionDefaults = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw'\n    };\n    options = Object.assign(optionDefaults, options);\n    var serialized;\n\n    try {\n      if (options.format === 'dag-cbor') {\n        serialized = dagCBOR.util.serialize(dagNode);\n      } else if (options.format === 'dag-pb') {\n        serialized = dagPB.util.serialize(dagNode);\n      } else {\n        // FIXME Hopefully already serialized...can we use IPLD to serialise instead?\n        serialized = dagNode;\n      }\n    } catch (err) {\n      return callback(err);\n    }\n\n    var sendOptions = {\n      qs: {\n        hash: options.hashAlg,\n        format: options.format,\n        'input-enc': options.inputEnc\n      }\n    };\n    sendOneFile(serialized, sendOptions, function (err, result) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (result['Cid']) {\n        return callback(null, new CID(result['Cid']['/']));\n      } else {\n        return callback(result);\n      }\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/dag/put.js"],"names":["dagPB","require","dagCBOR","promisify","CID","multihash","SendOneFile","module","exports","send","sendOneFile","dagNode","options","callback","hash","hashAlg","cid","format","Error","err","codec","decode","name","optionDefaults","inputEnc","Object","assign","serialized","util","serialize","sendOptions","qs","result"],"mappings":"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","sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst dagCBOR = require('ipld-dag-cbor')\nconst promisify = require('promisify-es6')\nconst CID = require('cids')\nconst multihash = require('multihashes')\nconst SendOneFile = require('../utils/send-one-file')\n\nmodule.exports = (send) => {\n  const sendOneFile = SendOneFile(send, 'dag/put')\n\n  return promisify((dagNode, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n    }\n\n    options = options || {}\n\n    if (options.hash) {\n      options.hashAlg = options.hash\n      delete options.hash\n    }\n\n    if (options.cid && (options.format || options.hashAlg)) {\n      return callback(new Error('Can\\'t put dag node. Please provide either `cid` OR `format` and `hash` options.'))\n    } else if ((options.format && !options.hashAlg) || (!options.format && options.hashAlg)) {\n      return callback(new Error('Can\\'t put dag node. Please provide `format` AND `hash` options.'))\n    }\n\n    if (options.cid) {\n      let cid\n\n      try {\n        cid = new CID(options.cid)\n      } catch (err) {\n        return callback(err)\n      }\n\n      options.format = cid.codec\n      options.hashAlg = multihash.decode(cid.multihash).name\n      delete options.cid\n    }\n\n    const optionDefaults = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw'\n    }\n\n    options = Object.assign(optionDefaults, options)\n\n    let serialized\n\n    try {\n      if (options.format === 'dag-cbor') {\n        serialized = dagCBOR.util.serialize(dagNode)\n      } else if (options.format === 'dag-pb') {\n        serialized = dagPB.util.serialize(dagNode)\n      } else {\n        // FIXME Hopefully already serialized...can we use IPLD to serialise instead?\n        serialized = dagNode\n      }\n    } catch (err) {\n      return callback(err)\n    }\n\n    const sendOptions = {\n      qs: {\n        hash: options.hashAlg,\n        format: options.format,\n        'input-enc': options.inputEnc\n      }\n    }\n\n    sendOneFile(serialized, sendOptions, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n      if (result['Cid']) {\n        return callback(null, new CID(result['Cid']['/']))\n      } else {\n        return callback(result)\n      }\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}