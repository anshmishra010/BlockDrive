{"ast":null,"code":"'use strict';\n\nvar Stream = require('readable-stream');\n\nvar pump = require('pump');\n\nvar transformChunk = require('./bw-util');\n\nmodule.exports = function (send) {\n  return function (opts) {\n    opts = opts || {};\n    var pt = new Stream.Transform({\n      objectMode: true,\n      transform: function transform(chunk, encoding, cb) {\n        cb(null, transformChunk(chunk));\n      }\n    });\n    send({\n      path: 'stats/bw',\n      qs: opts\n    }, function (err, stream) {\n      if (err) {\n        return pt.destroy(err);\n      }\n\n      pump(stream, pt);\n    });\n    return pt;\n  };\n};","map":{"version":3,"sources":["C:/Users/anshm/blockdrive/node_modules/ipfs-http-client/src/stats/bw-readable-stream.js"],"names":["Stream","require","pump","transformChunk","module","exports","send","opts","pt","Transform","objectMode","transform","chunk","encoding","cb","path","qs","err","stream","destroy"],"mappings":"AAAA;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAAtB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,cAAc,GAAGF,OAAO,CAAC,WAAD,CAA9B;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,SAAO,UAACC,IAAD,EAAU;AACfA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,QAAMC,EAAE,GAAG,IAAIR,MAAM,CAACS,SAAX,CAAqB;AAC9BC,MAAAA,UAAU,EAAE,IADkB;AAE9BC,MAAAA,SAF8B,qBAEnBC,KAFmB,EAEZC,QAFY,EAEFC,EAFE,EAEE;AAC9BA,QAAAA,EAAE,CAAC,IAAD,EAAOX,cAAc,CAACS,KAAD,CAArB,CAAF;AACD;AAJ6B,KAArB,CAAX;AAOAN,IAAAA,IAAI,CAAC;AACHS,MAAAA,IAAI,EAAE,UADH;AAEHC,MAAAA,EAAE,EAAET;AAFD,KAAD,EAGD,UAACU,GAAD,EAAMC,MAAN,EAAiB;AAClB,UAAID,GAAJ,EAAS;AACP,eAAOT,EAAE,CAACW,OAAH,CAAWF,GAAX,CAAP;AACD;;AAEDf,MAAAA,IAAI,CAACgB,MAAD,EAASV,EAAT,CAAJ;AACD,KATG,CAAJ;AAWA,WAAOA,EAAP;AACD,GAtBD;AAuBD,CAxBD","sourcesContent":["'use strict'\n\nconst Stream = require('readable-stream')\nconst pump = require('pump')\nconst transformChunk = require('./bw-util')\n\nmodule.exports = (send) => {\n  return (opts) => {\n    opts = opts || {}\n\n    const pt = new Stream.Transform({\n      objectMode: true,\n      transform (chunk, encoding, cb) {\n        cb(null, transformChunk(chunk))\n      }\n    })\n\n    send({\n      path: 'stats/bw',\n      qs: opts\n    }, (err, stream) => {\n      if (err) {\n        return pt.destroy(err)\n      }\n\n      pump(stream, pt)\n    })\n\n    return pt\n  }\n}\n"]},"metadata":{},"sourceType":"script"}